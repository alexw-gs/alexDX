window.Coveo = window.Coveo || {};var c4sf =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 93);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = window.Coveo;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = $;

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SalesforceFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SalesforceUtilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Id; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Defines well-known Salesforce fields.
 */
var SalesforceFields;
(function (SalesforceFields) {
    SalesforceFields["Id"] = "sfid";
    SalesforceFields["OrganizationId"] = "sforganizationid";
})(SalesforceFields || (SalesforceFields = {}));
var SalesforceUtilities = /** @class */ (function () {
    function SalesforceUtilities() {
    }
    SalesforceUtilities.isInSalesforce = function () {
        return window.sforce != undefined;
    };
    SalesforceUtilities.isInLightning = function () {
        // Check if the aura framework is loaded.
        return window['$A'] !== undefined;
    };
    SalesforceUtilities.isInSalesforceConsole = function () {
        return SalesforceUtilities.isInSalesforce() && window.sforce.console != undefined && window.sforce.console.isInConsole();
    };
    SalesforceUtilities.isValidSalesforceResult = function (result, organizationId) {
        return [result.raw[SalesforceFields.Id], result.raw[SalesforceFields.OrganizationId], organizationId].every(Id.isId);
    };
    SalesforceUtilities.isLocalSalesforceResult = function (result, organizationId) {
        return this.isValidSalesforceResult(result, organizationId) && Id.equal(result.raw[SalesforceFields.OrganizationId], organizationId);
    };
    SalesforceUtilities.isRemoteSalesforceResult = function (result, organizationId) {
        return this.isValidSalesforceResult(result, organizationId) && !Id.equal(result.raw[SalesforceFields.OrganizationId], organizationId);
    };
    SalesforceUtilities.focusOrOpenTab = function (url, tabText, openInPrimaryTab) {
        if (openInPrimaryTab === void 0) { openInPrimaryTab = false; }
        url = typeof url !== 'undefined' ? url : '';
        var originalUrl = url;
        url = url.split('#')[0].split('?')[0];
        var urlId = this.getSfIdFromUrl(url);
        var endsWith = function (str, suffix) {
            if (!(str && suffix))
                return false;
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        };
        var resultError = function (result) {
            if (!result.success) {
                openSubtab(focusedPrimaryTabId, url);
                return true;
            }
            return false;
        };
        // For helper message
        var outputConsoleDomainErrorMessage = function () {
            console.log("Unexpected Behaviour? Please check your Domain is set in your Salesforce App's 'Whitelist Domains' section.");
            console.log('Settings are located in Build > Apps > ‘App Name’ (edit) > Whitelist Domains');
        };
        // Open in subtab
        var subtabCount = 0;
        var tabFocused = false;
        var subtabIndex = 0;
        var focusedPrimaryTabId = null;
        var openSubtab = function (primaryTabId, url) {
            window.sforce.console.openSubtab(primaryTabId, originalUrl, true, tabText, null, function openSuccess(result) {
                // `result.success` comes from the window.sforce.console object and will be set to FALSE when `openSubtab` fails
                if (!result.success) {
                    window.open(originalUrl);
                    outputConsoleDomainErrorMessage();
                }
            });
        };
        var handleGetSubtabInfo = function (result, id) {
            if (!resultError(result)) {
                subtabIndex++;
                if (!tabFocused) {
                    var tabUrl = $.parseJSON(result.pageInfo).url;
                    tabUrl = tabUrl ? tabUrl.split('#')[0].split('?')[0] : tabUrl;
                    var tabUrlId = $.parseJSON(result.pageInfo).objectId;
                    tabUrlId = tabUrlId ? tabUrlId.substr(0, 15) : tabUrl;
                    if (tabUrlId == urlId || endsWith(url, tabUrl) || endsWith(tabUrl, url)) {
                        window.sforce.console.focusSubtabById(id);
                        tabFocused = true;
                    }
                    subtabCount--;
                    if (!tabFocused && subtabCount == 0) {
                        openSubtab(focusedPrimaryTabId, url);
                    }
                }
            }
        };
        var handleGetSubTabIds = function (result) {
            if (!resultError(result)) {
                subtabCount = result.ids.length;
                for (var i = 0; i < result.ids.length; i++) {
                    window.sforce.console.getPageInfo(result.ids[i], function (newResult) {
                        handleGetSubtabInfo(newResult, result.ids[subtabIndex]);
                    });
                }
            }
        };
        var handleGetFocusedPrimaryTabId = function (result) {
            if (!resultError(result)) {
                focusedPrimaryTabId = result.id;
                window.sforce.console.getSubtabIds(result.id, handleGetSubTabIds);
            }
        };
        if (!openInPrimaryTab) {
            window.sforce.console.getFocusedPrimaryTabId(handleGetFocusedPrimaryTabId);
        }
        // Open in primary tab
        var primaryTabCount = 0;
        var primaryTabIndex = 0;
        var openPrimaryTab = function (url) {
            window.sforce.console.openPrimaryTab(null, originalUrl, true, tabText, function openSuccess(result) {
                // `result.success` comes from the window.sforce.console object and will be set to FALSE when `openPrimaryTab` fails
                if (!result.success) {
                    window.open(originalUrl);
                    outputConsoleDomainErrorMessage();
                }
            });
        };
        var handleGetPrimaryTabInfo = function (result, id) {
            if (!resultError(result)) {
                primaryTabIndex++;
                if (!tabFocused) {
                    var tabUrl = $.parseJSON(result.pageInfo).url;
                    tabUrl = tabUrl ? tabUrl.split('#')[0].split('?')[0] : tabUrl;
                    var tabUrlId = $.parseJSON(result.pageInfo).objectId;
                    tabUrlId = tabUrlId ? tabUrlId.substr(0, 15) : tabUrl;
                    if (tabUrlId == urlId || endsWith(url, tabUrl) || endsWith(tabUrl, url)) {
                        window.sforce.console.focusPrimaryTabById(id);
                        tabFocused = true;
                    }
                    primaryTabCount--;
                    if (!tabFocused && primaryTabCount == 0) {
                        openPrimaryTab(url);
                    }
                }
            }
        };
        var handleGetPrimaryTabIds = function (result) {
            if (!resultError(result)) {
                primaryTabCount = result.ids.length;
                for (var i = 0; i < result.ids.length; i++) {
                    window.sforce.console.getPageInfo(result.ids[i], function (newResult) {
                        handleGetPrimaryTabInfo(newResult, result.ids[primaryTabIndex]);
                    });
                }
            }
        };
        if (openInPrimaryTab) {
            window.sforce.console.getPrimaryTabIds(handleGetPrimaryTabIds);
        }
    };
    SalesforceUtilities.getSfIdFromUrl = function (url) {
        var id = url.substr(url.lastIndexOf('/') + 1, 18);
        var idIsValid = /^\w+$/.test(id);
        if (!idIsValid) {
            return url.split('#')[0].split('?')[0];
        }
        return id.substr(0, 15);
    };
    SalesforceUtilities.expandStringUsingRecord = function (value, record) {
        if (value != null) {
            var matches = value.match(/\{!(>?)(.*?)\}/g);
            if (matches != null) {
                for (var i = 0; i < matches.length; i++) {
                    var match = matches[i];
                    var groups = /\{!(>?)(.*?)\}/g.exec(match);
                    var cleanup = groups[1] === '>';
                    var fieldName = groups[2].toLowerCase();
                    var fieldValue = '';
                    if (record[fieldName] != null) {
                        fieldValue = record[fieldName].toString();
                        if (cleanup) {
                            fieldValue = SalesforceUtilities.cleanSentenceForQuery(fieldValue);
                        }
                    }
                    value = value.replace(groups[0], fieldValue);
                }
            }
        }
        return value;
    };
    SalesforceUtilities.expandStringUsingExpert = function (value, expert) {
        if (value != null) {
            var matches = value.match(/%(\w+)%/g);
            if (matches != null) {
                for (var i = 0; i < matches.length; i++) {
                    var match = matches[i];
                    var groups = /%(\w+)%/g.exec(match);
                    var fieldName = groups[1].toLowerCase();
                    var fieldValue = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Utils"].getFieldValue(expert, fieldName);
                    if (fieldValue != null) {
                        fieldValue = SalesforceUtilities.cleanSentenceForQuery(fieldValue);
                    }
                    else {
                        fieldValue = '';
                    }
                    value = value.replace(groups[0], fieldValue);
                }
            }
        }
        return value;
    };
    SalesforceUtilities.cleanSentenceForQuery = function (sentence) {
        return sentence.replace(/[\[\]"'\(\),\.@=<>:]/g, '');
    };
    /*
     * Allow to parse a template an inject the fields.
     * This is based of https://github.com/coveo/search-ui/blob/984d014639f09c61aca77b57bcc7ec804e30dbb2/src/ui/ResultLink/ResultLink.ts#L501
     */
    SalesforceUtilities.parseStringTemplate = function (template, result) {
        return coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["StringUtils"].buildStringTemplateFromResult(template, result);
    };
    /*
     * Allow to parse a template an inject the fields.
     * This is based of https://github.com/coveo/search-ui/blob/984d014639f09c61aca77b57bcc7ec804e30dbb2/src/ui/ResultLink/ResultLink.ts#L501
     */
    SalesforceUtilities.readFromObject = function (object, key) {
        if (object && key.indexOf('.') !== -1) {
            var newKey = key.substring(key.indexOf('.') + 1);
            key = key.substring(0, key.indexOf('.'));
            return this.readFromObject(object[key], newKey);
        }
        return object ? object[key] : undefined;
    };
    /**
     * Show a toast event indicating that an error has occurred.
     * @param message The message to show in the toast event.
     * @param error Optional. The error to log.
     * @param logger Optional. If provided, the error will be logged.
     */
    SalesforceUtilities.showToastError = function (message, error, logger) {
        if (typeof $A !== 'undefined') {
            var toastEvent = $A.get('e.force:showToast');
            toastEvent.setParams({
                title: 'Error',
                type: 'error',
                message: message,
            });
            toastEvent.fire();
        }
        if (logger && error) {
            logger.error(message, error);
        }
    };
    return SalesforceUtilities;
}());

/**
 * Helper class to deal with Salesforce IDs
 */
var Id = /** @class */ (function () {
    function Id() {
    }
    /**
     * Returns true if the ID is a valid Salesforce ID, in short or long form.
     * @param id The ID
     */
    Id.isId = function (id) {
        var cleanedId = id !== null && id !== void 0 ? id : '';
        return Id.isShort(cleanedId) || Id.isLong(cleanedId);
    };
    /**
     * Returns true if the ID is a "short" ID
     * @param id The ID
     */
    Id.isShort = function (id) {
        return id.length === Id.SHORT_ID_LENGTH;
    };
    /**
     * Returns true if the ID is a "long" ID
     * @param id The ID
     */
    Id.isLong = function (id) {
        return id.length === Id.LONG_ID_LENGTH;
    };
    /**
     * Takes in a short or long ID, and returns a capitalized long ID
     * @param id The ID
     */
    Id.toLongForm = function (id) {
        // Already a long ID, capitalize and return.
        if (Id.isLong(id)) {
            return id.toUpperCase();
        }
        // Must have a short ID to continue
        if (!Id.isShort(id)) {
            throw Error("Invalid Id " + id);
        }
        var suffix = '';
        /**
         * The last 3 digits of the long ID are a checksum of the capitalizations of the first 15 characters.
         */
        for (var block = 0; block < 3; block++) {
            var blockSuffixByte = 0;
            for (var position = 0; position < 5; position++) {
                var currentChar = id.charAt(block * 5 + position);
                if (currentChar >= 'A' && currentChar <= 'Z') {
                    blockSuffixByte += 1 << position;
                }
            }
            suffix += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ012345'.charAt(blockSuffixByte);
        }
        return (id + suffix).toUpperCase();
    };
    /**
     * Compares 2 ID and returns true if they are equal.
     * @param a The first ID
     * @param b The second ID
     */
    Id.equal = function (a, b) {
        return Id.toLongForm(a) === Id.toLongForm(b);
    };
    Id.SHORT_ID_LENGTH = 15;
    Id.LONG_ID_LENGTH = 18;
    return Id;
}());



/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = Coveo;

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UserActionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return UserProfilingEndpoint; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * User Actions posible type.
 */
var UserActionType;
(function (UserActionType) {
    UserActionType["Search"] = "SEARCH";
    UserActionType["Click"] = "CLICK";
    UserActionType["PageView"] = "VIEW";
    UserActionType["Custom"] = "CUSTOM";
})(UserActionType || (UserActionType = {}));
/**
 * Class that handle interaction with the endpoint.
 */
var UserProfilingEndpoint = /** @class */ (function () {
    /**
     * Create a `UserProfilingEndpoint` instance.
     * Create [`EndpointCaller`]{@link EndpointCaller} instance and uses it to communicate with the endpoint internally.
     *
     * @param options The options to initialize the component.
     */
    function UserProfilingEndpoint(options) {
        this.options = options;
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].exists(this.options.accessToken);
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].exists(this.options.organization);
        this.options.uri = this.options.uri ? this.options.uri : UserProfilingEndpoint.DEFAULT_URI;
        this.options.accessToken.subscribeToRenewal(this.buildEndpointCaller.bind(this));
        this.buildEndpointCaller(this.options.accessToken.token);
    }
    UserProfilingEndpoint.prototype.buildEndpointCaller = function (token) {
        this.caller = new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["EndpointCaller"]({ accessToken: token });
    };
    /**
     * Get the list of actions a user has performed.
     *
     * @param userId Id from which action history will be retrieve. (either visitId or user email).
     */
    UserProfilingEndpoint.prototype.getActions = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].exists(userId);
                        return [4 /*yield*/, this.caller.call({
                                method: 'POST',
                                url: this.options.uri + "/rest/organizations/" + this.options.organization + "/machinelearning/user/actions",
                                queryString: [],
                                responseType: 'json',
                                requestDataType: 'application/json',
                                requestData: { objectId: userId },
                                errorsAsSuccess: false,
                            })];
                    case 1:
                        response = _a.sent();
                        if (this.isResponseEmpty(response)) {
                            throw new Error("Response has no values: " + JSON.stringify(response));
                        }
                        return [2 /*return*/, this.parseResponse(response.data)];
                }
            });
        });
    };
    UserProfilingEndpoint.prototype.parseResponse = function (response) {
        return response.value.map(function (v) {
            return {
                time: parseInt(v.time),
                value: JSON.parse(v.value),
                name: v.name,
            };
        });
    };
    UserProfilingEndpoint.prototype.isResponseEmpty = function (response) {
        return !response || !response.data || !response.data.value || !Array.isArray(response.data.value) || !(response.data.value.length > 0);
    };
    return UserProfilingEndpoint;
}());

/**
 * Default platform uri.
 */
UserProfilingEndpoint.DEFAULT_URI = 'https://platform.cloud.coveo.com';



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrowDown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return search; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return view; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return dot; });
/* unused harmony export paperclipIcon */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return user; });
/* unused harmony export wait */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return copy; });
var ARROW_DOWN = '<svg xmlns="http://www.w3.org/2000/svg" width=".5em" height=".5em" enable-background="new 0 0 10 6" viewBox="0 0 10 6"><g fill="black"><path d="m5 5.932c-.222 0-.443-.084-.612-.253l-4.134-4.134c-.338-.338-.338-.886 0-1.224s.886-.338 1.224 0l3.522 3.521 3.523-3.521c.336-.338.886-.338 1.224 0s .337.886-.001 1.224l-4.135 4.134c-.168.169-.39.253-.611.253z"/></g></svg>';
var DUPLICATE = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1em" height="1em" fill="#004990" viewBox="0 0 30 30"><circle cx="15" cy="15" r="15" fill="#f7f8f9"/><g transform="translate(6, 5)"><path d="M4 5h7v1H4V5m0 3h7v1H4V8m0 3h7v1H4v-1"/><path d="M15 1c.009-.525.066-1-1-1H1.002c-.651 0-1 .33-1 1v15c0 .66.351 1 1 1H3v2c.075.546.383 1 1 1h13c.718 0 1-.295 1-1V3c.001-.468-.406-.99-1-1h-2V1M2 15V2h11v13H2m14 3H5v-.995L14 17c.5.005.976-.428 1-1l.021-12H16v14"/></g></svg>';
var SEARCH = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1em" height="1em" fill="#004990" viewBox="0 0 25 25"><circle cx="12.5" cy="12.5" r="12.5" fill="#f7f8f9"/><g transform="translate(5, 5)"><path d="M2.01 6.03a4.025 4.025 0 0 1 4.02-4.02 4.025 4.025 0 0 1 4.02 4.02 4.025 4.025 0 0 1-4.02 4.02 4.024 4.024 0 0 1-4.02-4.02m12.696 7.256l-3.769-3.768a5.991 5.991 0 0 0 1.12-3.487 6.036 6.036 0 0 0-6.03-6.03 6.036 6.036 0 0 0-6.03 6.03 6.036 6.036 0 0 0 6.03 6.03c1.3 0 2.502-.418 3.487-1.12l3.769 3.769a1.001 1.001 0 0 0 1.42 0 1.005 1.005 0 0 0 0-1.422"/></g></svg>';
var VIEW = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1em" height="1em" fill="#004990" viewBox="0 0 800 800"><circle cx="400" cy="400" r="400" fill="#f7f8f9"/><g transform="translate(112, 144)"><path d="M569.354 231.631C512.969 135.949 407.81 72 288 72 168.14 72 63.004 135.994 6.646 231.631a47.999 47.999 0 0 0 0 48.739C63.031 376.051 168.19 440 288 440c119.86 0 224.996-63.994 281.354-159.631a47.997 47.997 0 0 0 0-48.738zM288 392c-75.162 0-136-60.827-136-136 0-75.162 60.826-136 136-136 75.162 0 136 60.826 136 136 0 75.162-60.826 136-136 136zm104-136c0 57.438-46.562 104-104 104s-104-46.562-104-104c0-17.708 4.431-34.379 12.236-48.973l-.001.032c0 23.651 19.173 42.823 42.824 42.823s42.824-19.173 42.824-42.823c0-23.651-19.173-42.824-42.824-42.824l-.032.001C253.621 156.431 270.292 152 288 152c57.438 0 104 46.562 104 104z"/></g></svg>';
var DOT = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1em" height="1em" fill="#004990" viewBox="0 0 10 10"><circle cx="5" cy="5" r="5" fill="#f7f8f9"/><circle cx="5" cy="5" r="3"/></svg>';
var PAPER_CLIP = '<svg version="1.1" id="Calque_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 80 75" enable-background="new 0 0 80 75" xml:space="preserve"><path d="M73.844,6.458c-8.208-8.611-21.558-8.611-29.766,0L4.389,48.092c-5.853,6.14-5.853,16.164,0,22.304&#xA;&#x9;&#x9;&#x9;c5.853,6.14,15.409,6.14,21.262,0l39.688-41.634c3.497-3.668,3.497-9.714,0-13.382c-3.497-3.668-9.26-3.668-12.757,0&#xA;&#x9;&#x9;&#x9;L18.564,51.065c-0.777,0.793-1.088,1.964-0.812,3.064c0.276,1.1,1.095,1.959,2.143,2.249c1.049,0.289,2.165-0.036,2.921-0.852&#xA;&#x9;&#x9;&#x9;L56.835,19.84c1.215-1.274,3.038-1.274,4.252,0c1.215,1.274,1.215,3.187,0,4.461L21.399,65.935c-3.571,3.745-9.187,3.745-12.757,0&#xA;&#x9;&#x9;&#x9;c-3.57-3.745-3.57-9.637,0-13.382L48.33,10.919c5.926-6.217,15.335-6.217,21.262,0c5.926,6.217,5.926,16.087,0,22.304&#xA;&#x9;&#x9;&#x9;L35.573,68.908c-0.778,0.793-1.089,1.964-0.814,3.065c0.276,1.101,1.095,1.96,2.145,2.25c1.049,0.289,2.166-0.037,2.922-0.854&#xA;&#x9;&#x9;&#x9;l34.018-35.686C82.052,29.072,82.052,15.069,73.844,6.458z"/></svg>';
var USER = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1em" height="1em" viewBox="0 0 15 15"><path d="M 7.5,15 A 7.5,7.5 0 1 1 15,7.5 7.5,7.5 0 0 1 7.5,15 Z M 7.5,1 A 6.5,6.5 0 1 0 14,7.5 6.51,6.51 0 0 0 7.5,1 Z"/><path d="M 3.39,12.5 A 6.48,6.48 0 0 0 11.5,12.6 7.08,7.08 0 0 0 8.98,11.6 8,8 0 0 1 8.6,10.25 4,4 0 0 0 11,6.5 3.78,3.78 0 0 0 7.5,2.5 3.78,3.78 0 0 0 4,6.5 4,4 0 0 0 6.37,10.29 8.25,8.25 0 0 1 6.01,11.61 7.2,7.2 0 0 0 3.39,12.5 Z"/></svg>';
var WAIT = '<svg enable-background="new 0 0 18 18" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg"><g><path d="m16.76 8.051c-.448 0-.855-.303-.969-.757-.78-3.117-3.573-5.294-6.791-5.294s-6.01 2.177-6.79 5.294c-.134.537-.679.861-1.213.727-.536-.134-.861-.677-.728-1.212 1.004-4.009 4.594-6.809 8.731-6.809 4.138 0 7.728 2.8 8.73 6.809.135.536-.191 1.079-.727 1.213-.081.02-.162.029-.243.029z"/><path d="m9 18c-4.238 0-7.943-3.007-8.809-7.149-.113-.541.234-1.071.774-1.184.541-.112 1.071.232 1.184.773.674 3.222 3.555 5.56 6.851 5.56s6.178-2.338 6.852-5.56c.113-.539.634-.892 1.184-.773.54.112.887.643.773 1.184-.866 4.142-4.57 7.149-8.809 7.149z"/></g></svg>';
var COPY_PASTE = '<svg width=".5em" height=".5em" viewBox="0 0 20 20"><path d="M4 5h7v1H4V5m0 3h7v1H4V8m0 3h7v1H4v-1"/><path d="M15 1c.009-.525.066-1-1-1H1.002c-.651 0-1 .33-1 1v15c0 .66.351 1 1 1H3v2c.075.546.383 1 1 1h13c.718 0 1-.295 1-1V3c.001-.468-.406-.99-1-1h-2V1M2 15V2h11v13H2m14 3H5v-.995L14 17c.5.005.976-.428 1-1l.021-12H16v14"/></svg>';
var arrowDown = ARROW_DOWN;
var duplicate = DUPLICATE;
var search = SEARCH;
var view = VIEW;
var dot = DOT;
var paperclipIcon = PAPER_CLIP;
var user = USER;
var wait = WAIT;
var copy = COPY_PASTE;



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Translation; });
var Translation = /** @class */ (function () {
    function Translation() {
    }
    Translation.merge = function (language, values) {
        Object.keys(values)
            .filter(function (key) { return typeof values[key][language] === 'string'; })
            .forEach(function (key) {
            String['locales'] = String['locales'] || {};
            String['locales'][language] = String['locales'][language] || {};
            String['locales'][language][key] = values[key][language];
        });
    };
    Translation.register = function (language, values) {
        Translation.merge(language, values);
        String['toLocaleString'].call(this, { en: String['locales']['en'] });
    };
    return Translation;
}());



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getSalesforceContext; });
function getSalesforceContext() {
    return window['SalesforceContext'];
}


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return UserActionEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UserActionCause; });
var UserActionEvents = /** @class */ (function () {
    function UserActionEvents() {
    }
    UserActionEvents.enterOnSearchbox = 'enterOnSearchbox';
    UserActionEvents.quickviewLoaded = 'quickviewLoaded';
    UserActionEvents.openQuickview = 'openQuickview';
    UserActionEvents.attachToCase = 'attachToCase';
    UserActionEvents.detachFromCase = 'detachFromCase';
    UserActionEvents.attachedResultChange = 'attachedResultChange';
    UserActionEvents.attachToCaseStateChanged = 'attachToCaseStateChanged';
    UserActionEvents.sendAsEmail = 'sendAsEmail';
    UserActionEvents.postToFeed = 'postToFeed';
    UserActionEvents.sendToLiveAgent = 'sendToLiveAgent';
    return UserActionEvents;
}());

var UserActionCause = /** @class */ (function () {
    function UserActionCause() {
    }
    UserActionCause.sendAsEmail = {
        name: UserActionEvents.sendAsEmail,
        type: 'resultAction',
    };
    UserActionCause.postToFeed = {
        name: UserActionEvents.postToFeed,
        type: 'resultAction',
    };
    UserActionCause.sendToLiveAgent = {
        name: UserActionEvents.sendToLiveAgent,
        type: 'resultAction',
    };
    return UserActionCause;
}());



/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Language; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Translation; });
/**
 * Supported languages.
 */
var Language;
(function (Language) {
    Language["English"] = "en";
})(Language || (Language = {}));
/**
 * Translation utilities.
 */
var Translation = /** @class */ (function () {
    function Translation() {
    }
    /**
     * Register translations for a language.
     *
     * @param language Language of the dictionary.
     * @param translationDictionary Key-Value dictionary that contain all traslation for a language.
     */
    Translation.register = function (language, translationDictionary) {
        var _a;
        Object.keys(translationDictionary).forEach(function (key) {
            String['locales'] = String['locales'] || {};
            String['locales'][language] = String['locales'][language] || {};
            String['locales'][language][key] = translationDictionary[key];
        });
        String['toLocaleString'].call(this, (_a = {}, _a[language] = String['locales'][language], _a));
    };
    return Translation;
}());




/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResultActionsEvents; });
var ResultActionsEvents = /** @class */ (function () {
    function ResultActionsEvents() {
    }
    ResultActionsEvents.onPostToFeed = 'ResultActionsEvents.onPostToFeed';
    ResultActionsEvents.onSendAsEmail = 'ResultActionsEvents.onSendAsEmail';
    ResultActionsEvents.onSendToLiveAgent = 'ResultActionsEvents.onSendToLiveAgent';
    ResultActionsEvents.onChatEnded = 'ResultActionsEvents.onChatEnded';
    ResultActionsEvents.onTabFocused = 'ResultActionsEvents.onTabFocused';
    return ResultActionsEvents;
}());



/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesforceResultLink; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/*
 * This class is, as it's name implied, used only in the salesforce integration to handle
 * results link that can be opened in the console correctly.
 * When the page is created in salesforce (interface editor) all CoveoResultLink are replaced with CoveoSalesforceResultLink.
 */
/**
 * The _SalesforceResultLink_ component is used to open result links as Salesforce tabs.
 *
 * It inherits from the [ResultLink Component](https://coveo.github.io/search-ui/components/resultlink.html).
 *
 * ```html
 * <a class='CoveoSalesforceResultLink'></a>
 * ```
 */
var SalesforceResultLink = /** @class */ (function (_super) {
    __extends(SalesforceResultLink, _super);
    function SalesforceResultLink(element, options, bindings, result) {
        var _this = _super.call(this, element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, SalesforceResultLink, options), bindings, result) || this;
        _this.element = element;
        _this.options = options;
        _this.result = result;
        return _this;
    }
    SalesforceResultLink.prototype.bindEventToOpen = function () {
        var _this = this;
        if (utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceUtilities */ "c"].isInSalesforceConsole()) {
            var eventWasBinded = false;
            // Note: For Salesforce Tabs to work, check that your Domains are whitelisted in your App's "Whitelist Domains" section.
            if (this.options.openInPrimaryTab) {
                Coveo.$$(this.element).on('click', function () {
                    utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceUtilities */ "c"].focusOrOpenTab(decodeURIComponent(_this.result.clickUri), _this.result.title, true);
                });
                eventWasBinded = true;
            }
            else if (this.options.openInSubTab) {
                Coveo.$$(this.element).on('click', function () {
                    utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceUtilities */ "c"].focusOrOpenTab(decodeURIComponent(_this.result.clickUri), _this.result.title, false);
                });
                eventWasBinded = true;
            }
            if (!eventWasBinded) {
                eventWasBinded = _super.prototype.bindEventToOpen.call(this);
            }
            return eventWasBinded;
            /*
             * Bind lightning aura actions instead of redirecting to another URL.
             * If we want to open in a new window, it will use the ResultLink logic to open it.
             */
        }
        else if (utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceUtilities */ "c"].isInLightning() && this.areOptionsSupportedInLightning()) {
            this.bindEventToOpenInLightning();
        }
        else {
            // Fallback on the result link logic.
            return _super.prototype.bindEventToOpen.call(this);
        }
    };
    SalesforceResultLink.prototype.areOptionsSupportedInLightning = function () {
        // Those options are not supported in lightning. Fallback on the ResultLink.
        return !this.options.alwaysOpenInNewWindow && !this.options.openInOutlook && !this.options.openQuickview;
    };
    SalesforceResultLink.prototype.bindEventToOpenInLightning = function () {
        var _this = this;
        Coveo.$$(this.element).on('click', function () {
            // Create the lightning event.
            var auraClickEvent = _this.createLightningClickEvent();
            coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].isNotNull(auraClickEvent);
            // Fire the aura event.
            auraClickEvent.fire();
        });
    };
    SalesforceResultLink.prototype.createLightningClickEvent = function () {
        var auraClickEvent;
        // If the result is a Salesforce object, we'll use the navigateToSObject action.
        if (this.result.raw.sfid !== undefined) {
            // Is any other Salesforce objects.
            auraClickEvent = $A.get('e.force:navigateToSObject');
            auraClickEvent.setParams({
                recordId: this.getIdForNavigateToSObject(),
            });
        }
        else {
            // Is non salesforce items.
            auraClickEvent = $A.get('e.force:navigateToURL');
            auraClickEvent.setParams({
                url: this.result.clickUri,
            });
        }
        return auraClickEvent;
    };
    SalesforceResultLink.prototype.getIdForNavigateToSObject = function () {
        var idToUse = this.result.raw.sfid;
        // Knowledge article uses the knowledge article version id to navigate.
        if (this.result.raw.sfkbid !== undefined && this.result.raw.sfkavid !== undefined) {
            idToUse = this.result.raw.sfkavid;
        }
        return idToUse;
    };
    SalesforceResultLink.ID = 'SalesforceResultLink';
    /**
     * The possible options for SalesforceResultLink
     * @componentOptions
     */
    SalesforceResultLink.options = {
        /**
         * Specifies that the result link should try to open as a primary console tab. If it fails, it instead opens in a new browser tab.
         *
         * Default is `true`.
         *
         * ```html
         * <a class='CoveoSalesforceResultLink' data-open-in-primary-tab='true'/>
         * ```
         */
        openInPrimaryTab: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
        /**
         * Specifies that the result link should try to open as a secondary console tab. If it fails, it instead opens in a new browser tab.
         *
         * Default is `false`.
         *
         * ```html
         * <a class='CoveoSalesforceResultLink' data-open-in-sub-tab='true'/>
         * ```
         */
        openInSubTab: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
    };
    return SalesforceResultLink;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ResultLink"]));

// The options are extended here to ensure TypeDoc builds the documentation properly.
SalesforceResultLink.options = _.extend({}, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ResultLink"].options, SalesforceResultLink.options);
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(SalesforceResultLink);
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerComponentFields(SalesforceResultLink.ID, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].getRegisteredFieldsComponentForQuery(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ResultLink"].ID).concat(['sfid', 'sfkbid', 'sfkavid']));


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isKnowledgeArticleToAttach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isAttached; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getExpressions; });
/* unused harmony export handleAttachToCaseEvent */
/* unused harmony export handleDetachFromCase */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createResultToAttach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return handleEndpointDataPromise; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);


/**
 * Check if a given result is a Knowledge Article.
 * @param result {ResultToAttach} the result to check.
 */
function isKnowledgeArticleToAttach(result) {
    return (result.knowledgeArticleId !== undefined &&
        result.knowledgeArticleId !== null &&
        result.articleLanguage !== undefined &&
        result.articleLanguage !== null);
}
/**
 * Checks if a result is attached from the list of attachedResults
 * @param attachedResults The list of ResultToAttach
 * @param result The result
 */
function isAttached(attachedResults, result) {
    var attached = function (r) {
        // Has the same uriHash
        return (r === null || r === void 0 ? void 0 : r.uriHash) === (result === null || result === void 0 ? void 0 : result.raw.urihash) ||
            // Or has the same kbid and kblang
            ((result === null || result === void 0 ? void 0 : result.raw.sfkbid) !== undefined && (r === null || r === void 0 ? void 0 : r.knowledgeArticleId) === (result === null || result === void 0 ? void 0 : result.raw.sfkbid) && (r === null || r === void 0 ? void 0 : r.articleLanguage) === (result === null || result === void 0 ? void 0 : result.raw.sflanguage));
    };
    return (attachedResults === null || attachedResults === void 0 ? void 0 : attachedResults.filter(attached)[0]) !== undefined;
}
/**
 * Return the filtering expression to show only attached results.
 */
function getExpressions(attachedResults) {
    if (!(attachedResults === null || attachedResults === void 0 ? void 0 : attachedResults.length))
        return 'NOT @uri';
    var builder = new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ExpressionBuilder"]();
    var _a = attachedResults.reduce(splitDocumentsFromArticles, { articles: [], sysurihashs: [] }), articles = _a.articles, sysurihashs = _a.sysurihashs;
    addDocumentsExpression(builder, sysurihashs);
    addKnowledgeArticlesExpression(builder, articles);
    return builder.build(' OR ');
}
/**
 * Store the result in either `articles` or `sysurihashs`.
 * @param accumulator Storage object.
 * @param result The result to store.
 */
function splitDocumentsFromArticles(accumulator, result) {
    if (result.uriHash) {
        accumulator.sysurihashs.push(result.uriHash);
    }
    else if (result.knowledgeArticleId) {
        accumulator.articles.push({ sfkbid: result.knowledgeArticleId, sflang: result.articleLanguage });
    }
    return accumulator;
}
/**
 * Include knowledge articles from the current org.
 * @param builder An expression builder
 * @param articles knowledge articles from the current org to include.
 */
function addKnowledgeArticlesExpression(builder, articles) {
    if (articles.length > 0) {
        builder.add(articles.map(function (kb) { return "(@sfkbid=" + kb.sfkbid + " AND @sflanguage=" + kb.sflang + ")"; }).join(' OR '));
    }
}
/**
 * Include document that are not knowledge articles from the current org.
 * @param builder An expression builder
 * @param documentsUriHashes uri hashes of documents to include.
 * @param articles knowledge articles to exclude from the documents to include.
 */
function addDocumentsExpression(builder, documentsUriHashes) {
    if (documentsUriHashes.length > 0) {
        builder.add("@urihash==(" + documentsUriHashes.join(',') + ")");
    }
}
/**
 * Handle incoming AttachToCase events from other components
 *
 * @param endpoint The local attachToCaseEndpoint
 * @param args The AttachToCase event argument
 * @param onChange A function to be called if the state changed
 */
function handleAttachToCaseEvent(endpoint, args, onChange) {
    if (endpoint && modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* Id */ "a"].equal(endpoint.caseId, args.dataToAttach.caseId)) {
        var data = endpoint.data;
        var hasModification = false;
        if (data.succeeded) {
            // Add the document ID to our list of attached results since it was attached elsewhere.
            if (data.attachedResults.indexOf(args.dataToAttach) === -1) {
                data.attachedResults.push(args.dataToAttach);
                hasModification = true;
            }
        }
        if (hasModification) {
            onChange(data);
        }
    }
}
/**
 * Handle incoming DetachFromCase events from other components
 *
 * @param endpoint The local attachToCaseEndpoint
 * @param args The DetachFromCase event arguments
 * @param onChange A function to be called if the state changed
 */
function handleDetachFromCase(endpoint, args, onChange) {
    if (endpoint && endpoint.caseId == args.caseId) {
        var data = endpoint.data;
        var hasModification = false;
        if (data.succeeded) {
            // Remove the document ID to our list of attached results since it was detached elsewhere.
            var urihashs = data.attachedResults.map(function (a) { return a.uriHash; });
            if (urihashs.indexOf(args.result.raw.urihash) > -1) {
                data.attachedResults.splice(urihashs.indexOf(args.result.raw.urihash), 1);
                hasModification = true;
            }
            // Remove the article ID to our list of attached results since it was detached elsewhere.
            var kbid = args.result.raw.sfkbid;
            var sfkbids = data.attachedResults.map(function (a) { return a.knowledgeArticleId; });
            if (kbid && sfkbids.indexOf(kbid) > -1) {
                data.attachedResults.splice(sfkbids.indexOf(kbid), 1);
                hasModification = true;
            }
        }
        if (hasModification) {
            onChange(data);
        }
    }
}
/**
 * Creates a "ResultToAttach" object from a Result
 * @param result The result
 */
function createResultToAttach(result, caseId) {
    return {
        resultUrl: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["StringAndHoles"].shortenString(result.clickUri, 250, '...').value,
        source: result.raw.source,
        title: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["StringAndHoles"].shortenString(result.title, 250, '...').value,
        name: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["StringAndHoles"].shortenString(result.title, 80, '...').value,
        uriHash: result.raw.urihash,
        knowledgeArticleId: result.raw.sfkbid,
        articleLanguage: result.raw.sflanguage,
        articleVersionNumber: result.raw.sfversionnumber,
        articlePublishStatus: result.raw.sfpublishstatus,
        caseId: caseId,
        customs: {},
    };
}
/**
 * Handle the data promise resolution.
 *
 * @param endpoint The local endpoint
 */
function handleEndpointDataPromise(endpoint) {
    var dataPromise = endpoint.data;
    var data = endpoint.data;
    if (dataPromise && dataPromise.then) {
        return dataPromise.then(function (d) {
            endpoint.data = d;
            return d;
        });
    }
    else if (data && data.succeeded) {
        return Promise.resolve(data);
    }
}


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "AttachToCase", function() { return /* reexport */ AttachToCase["a" /* AttachToCase */]; });
__webpack_require__.d(__webpack_exports__, "LOAD_EVENT_NAME", function() { return /* reexport */ LOAD_EVENT_NAME; });
__webpack_require__.d(__webpack_exports__, "CHANGE_EVENT_NAME", function() { return /* reexport */ CHANGE_EVENT_NAME; });
__webpack_require__.d(__webpack_exports__, "AttachedResultsFilter", function() { return /* reexport */ AttachedResultsFilter_AttachedResultsFilter; });
__webpack_require__.d(__webpack_exports__, "AttachedResultsTab", function() { return /* reexport */ AttachedResultsTab["a" /* AttachedResultsTab */]; });
__webpack_require__.d(__webpack_exports__, "MetadataStore", function() { return /* reexport */ metadata["a" /* MetadataStore */]; });
__webpack_require__.d(__webpack_exports__, "SalesforceThumbnail", function() { return /* reexport */ SalesforceThumbnail["a" /* SalesforceThumbnail */]; });
__webpack_require__.d(__webpack_exports__, "ChatterThumbnail", function() { return /* reexport */ ChatterThumbnail["a" /* ChatterThumbnail */]; });
__webpack_require__.d(__webpack_exports__, "InsightQuerySummary", function() { return /* reexport */ InsightQuerySummary_InsightQuerySummary; });
__webpack_require__.d(__webpack_exports__, "SalesforceEnvironment", function() { return /* reexport */ SalesforceAdaptiveResultLink["c" /* SalesforceEnvironment */]; });
__webpack_require__.d(__webpack_exports__, "SalesforceComponent", function() { return /* reexport */ SalesforceAdaptiveResultLink["b" /* SalesforceComponent */]; });
__webpack_require__.d(__webpack_exports__, "SalesforceAdaptiveResultLink", function() { return /* reexport */ SalesforceAdaptiveResultLink["a" /* SalesforceAdaptiveResultLink */]; });
__webpack_require__.d(__webpack_exports__, "SalesforceResultLink", function() { return /* reexport */ SalesforceResultLink["a" /* SalesforceResultLink */]; });
__webpack_require__.d(__webpack_exports__, "ConsoleResultLink", function() { return /* reexport */ ConsoleResultLink["a" /* ConsoleResultLink */]; });
__webpack_require__.d(__webpack_exports__, "SalesforceQuickview", function() { return /* reexport */ SalesforceQuickview["a" /* SalesforceQuickview */]; });
__webpack_require__.d(__webpack_exports__, "ResultAction", function() { return /* reexport */ ResultAction["a" /* ResultAction */]; });
__webpack_require__.d(__webpack_exports__, "ResultQuickAction", function() { return /* reexport */ ResultQuickAction["a" /* ResultQuickAction */]; });
__webpack_require__.d(__webpack_exports__, "ResultActionsSendEmail", function() { return /* reexport */ ResultActionsSendEmail["a" /* ResultActionsSendEmail */]; });
__webpack_require__.d(__webpack_exports__, "ResultActionsPostToFeed", function() { return /* reexport */ ResultActionsPostToFeed["a" /* ResultActionsPostToFeed */]; });
__webpack_require__.d(__webpack_exports__, "ResultActionsSendLiveAgent", function() { return /* reexport */ ResultActionsSendLiveAgent["a" /* ResultActionsSendLiveAgent */]; });
__webpack_require__.d(__webpack_exports__, "ProductMedia", function() { return /* reexport */ ProductMedia["a" /* ProductMedia */]; });
__webpack_require__.d(__webpack_exports__, "AugmentedResultList", function() { return /* reexport */ AugmentedResultList_AugmentedResultList; });
__webpack_require__.d(__webpack_exports__, "ResultActionsEvents", function() { return /* reexport */ ResultActionsEvents["a" /* ResultActionsEvents */]; });
__webpack_require__.d(__webpack_exports__, "SalesforceFields", function() { return /* reexport */ SalesforceUtils["b" /* SalesforceFields */]; });
__webpack_require__.d(__webpack_exports__, "SalesforceUtilities", function() { return /* reexport */ SalesforceUtils["c" /* SalesforceUtilities */]; });
__webpack_require__.d(__webpack_exports__, "Id", function() { return /* reexport */ SalesforceUtils["a" /* Id */]; });

// EXTERNAL MODULE: ./src/modules/attachToCase/ts/AttachToCase.ts
var AttachToCase = __webpack_require__(19);

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// EXTERNAL MODULE: ./src/modules/attachToCase/ts/AttachToCaseUtils.ts
var AttachToCaseUtils = __webpack_require__(12);

// EXTERNAL MODULE: ./src/modules/common/ts/UserActionEvents.ts
var UserActionEvents = __webpack_require__(8);

// EXTERNAL MODULE: ./src/utils/SalesforceUtils.ts
var SalesforceUtils = __webpack_require__(2);

// CONCATENATED MODULE: ./src/modules/attachToCase/ts/AttachedResultsFilter.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var LOAD_EVENT_NAME = 'attachedResultsLoad';
var CHANGE_EVENT_NAME = 'attachedResultsChange';
var AttachedResultsFilter_AttachedResultsFilter = /** @class */ (function (_super) {
    __extends(AttachedResultsFilter, _super);
    /**
     * Apply a filter to the current search interface to only show AttachedResults
     *
     * @param element The root element
     * @param options Component options
     * @param bindings Bindings
     */
    function AttachedResultsFilter(element, options, bindings) {
        var _this = _super.call(this, element, AttachedResultsFilter.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, AttachedResultsFilter, options);
        _this.attachToCaseEndpoint = _this.options.attachToCaseEndpoint();
        if (_this.attachToCaseEndpoint == null) {
            _this.logger.warn('No endpoint detected, AttachedResultsFilter disabled');
            Coveo.$$(_this.element).remove();
            return _this;
        }
        _this.bind.onRootElement(external_window_Coveo_["QueryEvents"].doneBuildingQuery, function (arg) {
            return _this.handleDoneBuildingQueryForAttachedResults(arg);
        });
        // As soon as we have the attached result, execute a query.
        AttachToCaseUtils["c" /* handleEndpointDataPromise */](_this.attachToCaseEndpoint).then(function () {
            _this.usageAnalytics.logSearchEvent({
                name: LOAD_EVENT_NAME,
                type: _this.options.recordType,
            }, {});
            _this.queryController.executeQuery();
        });
        _this.bind.on(window, UserActionEvents["b" /* UserActionEvents */].attachedResultChange, function (args) {
            return _this.handleAttachedResultChangeEvent(args);
        });
        return _this;
    }
    AttachedResultsFilter.prototype.handleAttachedResultChangeEvent = function (args) {
        if (SalesforceUtils["a" /* Id */].equal(this.attachToCaseEndpoint.caseId, args.caseId)) {
            var data = this.attachToCaseEndpoint.data;
            data.attachedResults = args.attachedResults;
            this.usageAnalytics.logSearchEvent({
                name: CHANGE_EVENT_NAME,
                type: this.options.recordType,
            }, {});
            this.queryController.executeQuery();
        }
    };
    AttachedResultsFilter.prototype.handleDoneBuildingQueryForAttachedResults = function (arg) {
        var _a;
        if (((_a = this.attachToCaseEndpoint) === null || _a === void 0 ? void 0 : _a.data) && !this.disabled) {
            var data = this.attachToCaseEndpoint.data;
            var expressionBuilder = new external_window_Coveo_["ExpressionBuilder"]();
            expressionBuilder.add(AttachToCaseUtils["b" /* getExpressions */](data.attachedResults));
            arg.queryBuilder.constantExpression = new external_window_Coveo_["ExpressionBuilder"]();
            arg.queryBuilder.advancedExpression = expressionBuilder;
        }
    };
    AttachedResultsFilter.ID = 'AttachedResultsFilter';
    /**
     * The possible options for AttachedResultsFilter
     * @componentOptions
     */
    AttachedResultsFilter.options = {
        attachToCaseEndpoint: external_window_Coveo_["ComponentOptions"].buildCustomOption(function () { return window['attachToCaseEndpoint']; }, {
            defaultFunction: function () { return function () { return window['attachToCaseEndpoint']; }; },
        }),
        recordType: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: 'Case' }),
    };
    return AttachedResultsFilter;
}(external_window_Coveo_["Component"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(AttachedResultsFilter_AttachedResultsFilter);

// EXTERNAL MODULE: ./src/modules/attachToCase/ts/AttachedResultsTab.ts
var AttachedResultsTab = __webpack_require__(76);

// EXTERNAL MODULE: ./src/modules/search/ts/metadata/metadata.ts
var metadata = __webpack_require__(56);

// EXTERNAL MODULE: ./src/components/search-ui/Thumbnail/SalesforceThumbnail.ts
var SalesforceThumbnail = __webpack_require__(37);

// EXTERNAL MODULE: ./src/components/search-ui/Thumbnail/ChatterThumbnail.ts
var ChatterThumbnail = __webpack_require__(64);

// CONCATENATED MODULE: ./src/components/search-ui/QuerySummary/InsightQuerySummary.ts
var InsightQuerySummary_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The _InsightQuerySummary_ component is a composite component that displays a title or a query summary depending whether a user query is performed.
 *
 * ```html
 * <div class='CoveoInsightQuerySummary'></div>
 * ```
 */
var InsightQuerySummary_InsightQuerySummary = /** @class */ (function (_super) {
    InsightQuerySummary_extends(InsightQuerySummary, _super);
    function InsightQuerySummary(element, options, bindings) {
        var _this = _super.call(this, element, InsightQuerySummary.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, InsightQuerySummary, options);
        _this.bind.onRootElement(external_window_Coveo_["QueryEvents"].querySuccess, function (args) { return _this.handleQuerySuccess(args); });
        _this.appendTitleGroup(element, _this.options);
        _this.appendSummaryGroup(element, bindings);
        return _this;
    }
    InsightQuerySummary.prototype.appendTitleGroup = function (element, options) {
        this.titleGroup = document.createElement('div');
        this.titleGroup.classList.add('coveo-insight-title-group');
        this.innerTitleElement = document.createElement('span');
        this.innerTitleElement.classList.add('coveo-insight-title');
        this.innerTitleElement.innerText = this.options.title;
        this.titleGroup.appendChild(this.innerTitleElement);
        element.appendChild(this.titleGroup);
    };
    InsightQuerySummary.prototype.appendSummaryGroup = function (element, bindings) {
        this.summaryGroup = document.createElement('div');
        this.summaryGroup.classList.add('coveo-insight-summary-group');
        this.appendQuerySummary(this.summaryGroup, bindings);
        Object(external_window_Coveo_["$$"])(this.summaryGroup).hide();
        element.appendChild(this.summaryGroup);
    };
    InsightQuerySummary.prototype.appendQuerySummary = function (summaryGroup, bindings) {
        var _a, _b;
        var innerSummaryElement = document.createElement('span');
        this.innerSummary = new external_window_Coveo_["QuerySummary"](innerSummaryElement, external_window_Coveo_["ComponentOptions"].initComponentOptions(innerSummaryElement, external_window_Coveo_["QuerySummary"], (_b = (_a = bindings.searchInterface) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.originalOptionsObject[external_window_Coveo_["QuerySummary"].ID]), bindings);
        summaryGroup.appendChild(innerSummaryElement);
    };
    InsightQuerySummary.prototype.handleQuerySuccess = function (args) {
        var showInsightTitle = this.shouldShowInsightTitle(args.query, args.results);
        Object(external_window_Coveo_["$$"])(this.titleGroup).toggle(showInsightTitle);
        Object(external_window_Coveo_["$$"])(this.summaryGroup).toggle(!showInsightTitle);
    };
    InsightQuerySummary.prototype.shouldShowInsightTitle = function (query, results) {
        var _a;
        var hasQuery = query === null || query === void 0 ? void 0 : query.q;
        var hasResults = ((_a = results === null || results === void 0 ? void 0 : results.results) === null || _a === void 0 ? void 0 : _a.length) > 0;
        return !hasQuery && hasResults;
    };
    InsightQuerySummary.ID = 'InsightQuerySummary';
    /**
     * The CSS class name representing the elements of the title group.
     */
    InsightQuerySummary.TitleGroupClass = 'coveo-insight-title-group';
    /**
     * The CSS class name representing the elements of the summary group.
     */
    InsightQuerySummary.SummaryGroupClass = 'coveo-insight-summary-group';
    InsightQuerySummary.options = {
        /**
         * Specifies the title displayed when no user query is performed.
         *
         * ```html
         * <div class='CoveoInsightQuerySummary' data-title='Showing contextual results'></div>
         * ```
         */
        title: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: 'Insights related to this record' }),
    };
    return InsightQuerySummary;
}(external_window_Coveo_["Component"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(InsightQuerySummary_InsightQuerySummary);
external_window_Coveo_["Initialization"].registerComponentFields(InsightQuerySummary_InsightQuerySummary.ID, external_window_Coveo_["Initialization"].getRegisteredFieldsComponentForQuery(external_window_Coveo_["QuerySummary"].ID).concat(external_window_Coveo_["Initialization"].getRegisteredFieldsComponentForQuery(external_window_Coveo_["QueryDuration"].ID)));

// EXTERNAL MODULE: ./src/components/search-ui/SalesforceAdaptiveResultLink/SalesforceAdaptiveResultLink.ts
var SalesforceAdaptiveResultLink = __webpack_require__(39);

// EXTERNAL MODULE: ./src/components/search-ui/SalesforceResultLink/SalesforceResultLink.ts
var SalesforceResultLink = __webpack_require__(11);

// EXTERNAL MODULE: ./src/components/search-ui/SalesforceResultLink/ConsoleResultLink.ts
var ConsoleResultLink = __webpack_require__(21);

// EXTERNAL MODULE: ./src/components/search-ui/SalesforceQuickview/ts/SalesforceQuickview.ts + 3 modules
var SalesforceQuickview = __webpack_require__(86);

// EXTERNAL MODULE: ./src/components/search-ui/ResultAction/ResultAction.ts
var ResultAction = __webpack_require__(18);

// EXTERNAL MODULE: ./src/components/search-ui/ResultQuickAction/ResultQuickAction.ts
var ResultQuickAction = __webpack_require__(22);

// EXTERNAL MODULE: ./src/components/search-ui/ResultActionsSendEmail/ResultActionsSendEmail.ts
var ResultActionsSendEmail = __webpack_require__(51);

// EXTERNAL MODULE: ./src/components/search-ui/ResultActionsPostToFeed/ResultActionsPostToFeed.ts
var ResultActionsPostToFeed = __webpack_require__(50);

// EXTERNAL MODULE: ./src/components/search-ui/ResultActionsSendLiveAgent/ResultActionsSendLiveAgent.ts
var ResultActionsSendLiveAgent = __webpack_require__(54);

// EXTERNAL MODULE: ./src/components/search-ui/ProductMedia/ProductMedia.ts + 1 modules
var ProductMedia = __webpack_require__(84);

// CONCATENATED MODULE: ./src/components/search-ui/AugmentedResultList/AugmentedResultList.ts
var AugmentedResultList_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/**
 * The AugmentedResultList component allows you to add some custom data to results retrieved from the coveo index.
 */
var AugmentedResultList_AugmentedResultList = /** @class */ (function (_super) {
    AugmentedResultList_extends(AugmentedResultList, _super);
    /**
     * Creates a new `AugmentedResultList` component.
     * @param element The HTMLElement on which to instantiate the component.
     * @param options The options for the `ResultList` component.
     * @param bindings The bindings that the component requires to function normally. If not set, these will be
     * automatically resolved (with a slower execution time).
     */
    function AugmentedResultList(element, options, bindings) {
        var _this = _super.call(this, element, external_window_Coveo_["ComponentOptions"].initComponentOptions(element, AugmentedResultList, options), bindings, AugmentedResultList.ID) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        return _this;
    }
    AugmentedResultList.prototype.getObjectPayload = function (results) {
        var _this = this;
        return results.filter(function (result) { var _a; return (_a = result.raw) === null || _a === void 0 ? void 0 : _a[_this.matchingFieldString]; }).map(function (result) { return result.raw[_this.matchingFieldString]; });
    };
    Object.defineProperty(AugmentedResultList.prototype, "matchingFieldString", {
        get: function () {
            return this.options.matchingIdField.replace('@', '');
        },
        enumerable: true,
        configurable: true
    });
    AugmentedResultList.prototype.renderResults = function (resultElements, append) {
        if (append === void 0) { append = false; }
        return _super.prototype.renderResults.call(this, resultElements, append);
    };
    AugmentedResultList.prototype.buildResults = function (queryResults) {
        return __awaiter(this, void 0, void 0, function () {
            var remoteResults, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.fetchAugmentData) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.options.fetchAugmentData(this.getObjectPayload(queryResults.results))];
                    case 2:
                        // Call remote action to fetch augmenting data.
                        remoteResults = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        this.logger.error(['Unable to fetch augment data.', e_1]);
                        return [2 /*return*/, null];
                    case 4:
                        if (remoteResults === null || remoteResults === void 0 ? void 0 : remoteResults.data) {
                            // Merge augmenting data with Coveo Results.
                            queryResults.results.forEach(function (res) {
                                var match = remoteResults.data.resultData.find(function (data) { return _this.options.matchingFunction(data, res); });
                                // Add data common to all results.
                                for (var key in remoteResults.data.commonData) {
                                    res.raw[key.toLowerCase()] = remoteResults.data.commonData[key];
                                }
                                // Add data specific to each result/object.
                                for (var key in match) {
                                    if (key.toLowerCase() !== _this.matchingFieldString && Boolean(res.raw[key.toLowerCase()])) {
                                        _this.logger.trace("The " + key + " field was overwritten on result: " + res.title);
                                    }
                                    res.raw[key.toLowerCase()] = match[key];
                                }
                            });
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        this.logger.error('No objectDataAction is defined.');
                        _a.label = 6;
                    case 6: return [2 /*return*/, _super.prototype.buildResults.call(this, queryResults)];
                }
            });
        });
    };
    AugmentedResultList.ID = 'AugmentedResultList';
    /**
     * The possible options for _AugmentedResultList_.
     * @componentOptions
     */
    AugmentedResultList.options = {
        /**
         * The function used to fetch extra result information.
         * Default value is "@sfid".
         */
        fetchAugmentData: external_window_Coveo_["ComponentOptions"].buildCustomOption(function () { return null; }),
        /**
         * The field to be used as matching ID between augment data and query results.
         */
        matchingIdField: external_window_Coveo_["ComponentOptions"].buildFieldOption({ defaultValue: '@sfid' }),
        /**
         * The function to use to determine a match between augment data and query results.
         * Default function will match results based on "@sfid".
         */
        matchingFunction: external_window_Coveo_["ComponentOptions"].buildCustomOption(function () { return null; }, {
            defaultFunction: function () { return function (augmentData, queryResult) {
                return augmentData['sfid'] === queryResult.raw['sfid'];
            }; },
        }),
    };
    return AugmentedResultList;
}(external_window_Coveo_["ResultList"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(AugmentedResultList_AugmentedResultList);

// EXTERNAL MODULE: ./src/components/search-ui/ResultActionsMenu/ResultActionsEvents.ts
var ResultActionsEvents = __webpack_require__(10);

// EXTERNAL MODULE: ./src/utils/Translation.ts
var Translation = __webpack_require__(6);

// EXTERNAL MODULE: ./src/modules/search/strings.json
var strings = __webpack_require__(111);
var strings_namespaceObject = /*#__PURE__*/__webpack_require__.t(strings, 2);

// CONCATENATED MODULE: ./src/modules/search/ts/index.ts
// Components





















// Load strings

Translation["a" /* Translation */].register('en', strings_namespaceObject);


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export UserAction */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UserProfileModel; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_UserActions_Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony import */ var _rest_UserProfilingEndpoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



/**
 * Represent an action that a user has made.
 */
var UserAction = /** @class */ (function () {
    function UserAction(type, timestamp, raw, document, query) {
        this.type = type;
        this.timestamp = timestamp;
        this.raw = raw;
        this.document = document;
        this.query = query;
    }
    return UserAction;
}());

/**
 * Model that store each user profile informations such as actions made by them,
 */
var UserProfileModel = /** @class */ (function (_super) {
    __extends(UserProfileModel, _super);
    /**
     * Create a `UserProfileModel` and bound it to `element`.
     * Also create a `UserProfilingEndpoint` that will be use to fetch actions made by a user.
     *
     * @param element An element on which the model will be bound on.
     * @param options A set of options necessary for the component creation.
     */
    function UserProfileModel(element, options) {
        var _this = _super.call(this, element, UserProfileModel.ID, {}) || this;
        _this.options = options;
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].isNotUndefined(_this.options.restUri);
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].isNotUndefined(_this.options.organizationId);
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].isNotUndefined(_this.options.searchEndpoint);
        _this.getOrFetchCache = {};
        _this.endpoint = new _rest_UserProfilingEndpoint__WEBPACK_IMPORTED_MODULE_2__[/* UserProfilingEndpoint */ "b"]({
            uri: _this.options.restUri,
            accessToken: _this.options.accessToken || _this.options.searchEndpoint.accessToken,
            organization: _this.options.organizationId,
        });
        return _this;
    }
    /**
     * Get all actions related to a user.
     *
     * @param userId The identifier of a user.
     */
    UserProfileModel.prototype.getActions = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var actions, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        actions = this.get(userId);
                        if (!Array.isArray(actions)) return [3 /*break*/, 1];
                        _f = actions;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.fetchActions(userId)];
                    case 2:
                        _f = _g.sent();
                        _g.label = 3;
                    case 3:
                        actions = _f;
                        this.set(userId, actions, UserProfileModel.MODEL_CONFIG);
                        return [2 /*return*/, actions];
                }
            });
        });
    };
    /**
     * Delete all actions related to a user from the model.
     *
     * @param userId The identifier of a user.
     */
    UserProfileModel.prototype.deleteActions = function (userId) {
        this.set(userId, undefined, UserProfileModel.MODEL_CONFIG);
        this.getOrFetchCache[userId] = undefined;
    };
    UserProfileModel.prototype.fetchActions = function (userId) {
        var _this = this;
        var pendingFetch = this.getOrFetchCache[userId];
        var doFetch = function () {
            _this.getOrFetchCache[userId] = _this.endpoint.getActions(userId).then(function (actions) { return _this.parseGetActionsResponse(userId, actions); });
            return _this.getOrFetchCache[userId];
        };
        return pendingFetch || doFetch();
    };
    UserProfileModel.prototype.parseGetActionsResponse = function (userId, actions) {
        var userActions = this.buildUserActions(actions);
        this.registerNewAttribute(userId, userActions);
        return userActions;
    };
    UserProfileModel.prototype.fetchDocuments = function (urihashes) {
        return __awaiter(this, void 0, void 0, function () {
            var builder, query, searchRequest, documentsDict;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (urihashes.length === 0) {
                            return [2 /*return*/, Promise.resolve({})];
                        }
                        builder = new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["QueryBuilder"]();
                        builder.advancedExpression.addFieldExpression('@urihash', '==', urihashes.filter(function (x) { return x; }));
                        // Ensure we fetch the good amount of document.
                        builder.numberOfResults = urihashes.length;
                        query = builder.build();
                        return [4 /*yield*/, this.options.searchEndpoint.search(query)];
                    case 1:
                        searchRequest = _f.sent();
                        // Here we directly send the event using the Analytics Endpoint to prevent any unwanted side effects.
                        this.sendUserActionLoad(query, searchRequest);
                        documentsDict = searchRequest.results.reduce(function (acc, result) {
                            var _f;
                            return (Object.assign(Object.assign({}, acc), (_f = {}, _f[result.raw.urihash] = result, _f)));
                        }, {});
                        return [2 /*return*/, documentsDict];
                }
            });
        });
    };
    UserProfileModel.prototype.buildUserActions = function (actions) {
        return __awaiter(this, void 0, void 0, function () {
            var documents, urihashes, error_1;
            var _this = this;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        documents = {};
                        urihashes = actions
                            .filter(this.isClick)
                            .map(function (action) { return action.value.uri_hash; })
                            // Remove duplicates.
                            .filter(function (value, index, list) { return list.indexOf(value) === index; });
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.fetchDocuments(urihashes)];
                    case 2:
                        documents = _f.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _f.sent();
                        console.log(error_1);
                        this.logger.error(UserProfileModel.ERROR_MESSAGE.FETCH_CLICKED_DOCUMENT_FAIL, error_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, actions.map(function (action) {
                            return new UserAction(action.name, new Date(action.time), action.value, _this.isClickOrView(action) ? documents[action.value.uri_hash] : undefined, _this.isSearch(action) ? action.value.query_expression : undefined);
                        })];
                }
            });
        });
    };
    UserProfileModel.prototype.isClick = function (action) {
        return action.name === _rest_UserProfilingEndpoint__WEBPACK_IMPORTED_MODULE_2__[/* UserActionType */ "a"].Click;
    };
    UserProfileModel.prototype.isClickOrView = function (action) {
        return this.isClick(action) || action.name === _rest_UserProfilingEndpoint__WEBPACK_IMPORTED_MODULE_2__[/* UserActionType */ "a"].PageView;
    };
    UserProfileModel.prototype.isSearch = function (action) {
        return action.name === _rest_UserProfilingEndpoint__WEBPACK_IMPORTED_MODULE_2__[/* UserActionType */ "a"].Search;
    };
    UserProfileModel.prototype.sendUserActionLoad = function (query, result) {
        var _a, _b, _c, _d, _e;
        var uaClient = (_a = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"].get(this.element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["SearchInterface"], true)) === null || _a === void 0 ? void 0 : _a.usageAnalytics;
        (_b = uaClient) === null || _b === void 0 ? void 0 : _b.logSearchEvent(_components_UserActions_Events__WEBPACK_IMPORTED_MODULE_1__[/* UserActionEvents */ "a"].load, {});
        (_c = uaClient) === null || _c === void 0 ? void 0 : _c.endpoint.sendSearchEvents([
            Object.assign(Object.assign({}, uaClient.getPendingSearchEvent().templateSearchEvent), {
                queryPipeline: result.pipeline,
                splitTestRunName: result.splitTestRun,
                splitTestRunVersion: result.splitTestRun ? result.pipeline : undefined,
                queryText: (_d = query.q, (_d !== null && _d !== void 0 ? _d : '')),
                advancedQuery: (_e = query.aq, (_e !== null && _e !== void 0 ? _e : '')),
                didYouMean: query.enableDidYouMean,
                numberOfResults: result.totalCount,
                responseTime: result.duration,
                pageNumber: query.firstResult / query.numberOfResults,
                resultsPerPage: query.numberOfResults,
                searchQueryUid: result.searchUid,
                contextual: false,
            }),
        ]);
    };
    return UserProfileModel;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Model"]));

/**
 * Identifier of the Search-UI component.
 */
UserProfileModel.ID = 'UserProfileModel';
UserProfileModel.ERROR_MESSAGE = Object.freeze({
    FETCH_CLICKED_DOCUMENT_FAIL: 'Fetching clicked documents details failed',
});
UserProfileModel.MODEL_CONFIG = {
    customAttribute: true,
    silent: true,
};
/**
 * Expose the UserProfileModel so a user action implementation can use it.
 */
window['Coveo'] && (window['Coveo']['UserProfileModel'] = UserProfileModel);



/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export USER_ACTION_EVENT_TYPE */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UserActionEvents; });
var USER_ACTION_EVENT_TYPE = 'User Actions';
var UserActionEvents = /** @class */ (function () {
    function UserActionEvents() {
    }
    return UserActionEvents;
}());

UserActionEvents.load = Object.freeze({
    name: 'userActionLoad',
    type: USER_ACTION_EVENT_TYPE,
});
UserActionEvents.submit = Object.freeze({
    name: 'userActionsSubmit',
    type: USER_ACTION_EVENT_TYPE,
});
UserActionEvents.open = Object.freeze({
    name: 'openUserActions',
    type: USER_ACTION_EVENT_TYPE,
});



/***/ }),
/* 16 */,
/* 17 */,
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResultAction; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The base class for all ResultAction components.
 * Its main responsibility is handling the visual elements of the Result Action.
 */
var ResultAction = /** @class */ (function (_super) {
    __extends(ResultAction, _super);
    /**
     * Construct a ResultAction component.
     * @param element The HTML element bound to this component.
     * @param options The options that can be provided to this component.
     * @param bindings The bindings, or environment within which this component exists.
     * @param queryResult The result of the query in which this resultAction exists.
     */
    function ResultAction(element, options, bindings, queryResult) {
        var _this = _super.call(this, element, ResultAction.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.queryResult = queryResult;
        _this.isInitialized = false;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, ResultAction, options);
        _this.queryResult = _this.queryResult || _this.resolveResult();
        // Hide until initialized.
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(_this.element).addClass('coveo-hidden');
        _this.bind.on(_this.element, 'click', function () { return _this.doAction(); });
        return _this;
    }
    /**
     * Initializes the component if it is not already initialized.
     */
    ResultAction.prototype.init = function () {
        if (!this.isInitialized) {
            this.show();
            this.isInitialized = true;
        }
        else {
            this.logger.debug('Attempted to initialize ResultAction that was already initialized.');
        }
    };
    /**
     * Deactivate the component if it is initialized.
     * @param e The reason for the deactivation.
     */
    ResultAction.prototype.deactivate = function (e) {
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(this.element).remove();
        this.logger.warn(e);
        this.isInitialized = false;
    };
    /**
     * Make the result action button visible.
     */
    ResultAction.prototype.show = function () {
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(this.element).removeClass('coveo-hidden');
        if (this.options.icon) {
            var icon = document.createElement('span');
            icon.innerHTML = this.options.icon;
            icon.className = 'coveo-icon';
            this.element.appendChild(icon);
        }
        if (this.options.tooltip) {
            var tooltip = document.createElement('span');
            tooltip.innerText = this.options.tooltip;
            tooltip.className = 'coveo-caption-for-icon';
            this.element.appendChild(tooltip);
        }
    };
    /**
     * Make the result action button invisible.
     */
    ResultAction.prototype.hide = function () {
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(this.element).addClass('coveo-hidden');
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(this.element)
            .children()
            .forEach(function (el) { return el.remove(); });
    };
    ResultAction.ID = 'ResultAction';
    /**
     * The possible options for _ResultAction_.
     * @componentOptions
     */
    ResultAction.options = {
        /**
         * See {@link IResultActionOptions.icon}
         * Optional. You may instead provide the icon by appending it as a child element.
         */
        icon: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption(),
        /**
         * See {@link IResultActionOptions.tooltip}
         * Optional. If no tooltip is provided, the tooltip popup will not appear.
         */
        tooltip: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption(),
    };
    return ResultAction;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));



/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AttachToCase; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _common_ts_Icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31);
/* harmony import */ var _AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
/* harmony import */ var modules_common_ts_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(25);
/* harmony import */ var utils_Translation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _strings_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(34);
var _strings_json__WEBPACK_IMPORTED_MODULE_6___namespace = /*#__PURE__*/__webpack_require__.t(34, 1);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(2);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};








// Enforce the use of strings.json as a JSON object and not an ESM (see SFINT-2703).
var strings = _strings_json__WEBPACK_IMPORTED_MODULE_6__ ? _strings_json__WEBPACK_IMPORTED_MODULE_6__ : _strings_json__WEBPACK_IMPORTED_MODULE_6___namespace;
/**
 * The _AttachToCase_ component is a Result Templates component that allows you to link a result to a Salesforce case.
 *
 * **Note:**
 * > When wanting to attach Knowledge articles, ensure that the `sfkbid`, `sfkbversionnumber` (legacy), `sfversionnumber` (express), and `sflanguage` fields are properly populated on the article
 * (see [Add/Edit Mapping](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=285) for Cloud V2 and [Managing Fields for a Source](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=190) for Cloud V1).
 *
 * ```html
 * <div class="CoveoAttachToCase"></div>
 * ```
 */
var AttachToCase = /** @class */ (function (_super) {
    __extends(AttachToCase, _super);
    function AttachToCase(element, options, bindings, result) {
        var _this = _super.call(this, element, AttachToCase.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, AttachToCase, options);
        _this.result = _this.result || _this.resolveResult();
        _this.searchInterface = _this.searchInterface || _this.resolveSearchInterface();
        _this.attached = false;
        _this.loading = false;
        _this.initialized = false;
        _this.attachedResults = [];
        var attachToCaseEndpoint = _this.options.attachToCaseEndpoint();
        if (attachToCaseEndpoint != null) {
            _this.setAttachToCaseEndpoint(attachToCaseEndpoint);
        }
        else {
            _this.logger.warn('No endpoint detected, make sure to set one using the SetAttachToCaseEndpoint method.');
            Coveo.$$(_this.element).remove();
        }
        return _this;
    }
    AttachToCase.prototype.initialize = function () {
        var _this = this;
        if (this.attachToCaseEndpoint != null) {
            // AttachToCaseEndpoint.data can either be a promise or just the data.
            var attachToCaseEndpointPromise = this.attachToCaseEndpoint.data;
            if (attachToCaseEndpointPromise.then) {
                // If the data is a promise, set state to loading, render button and wait for Promise competion.
                this.loading = true;
                attachToCaseEndpointPromise
                    .then(function (data) {
                    _this.attachToCaseEndpoint.data = data;
                    _this.handleData(_this.attachToCaseEndpoint.data);
                    _this.initialized = true;
                    _this.loading = false;
                    _this.updateButton();
                })
                    .catch(function (error) {
                    _this.logger.error('An error occured while getting attached results', error.message);
                });
            }
            else {
                this.attachToCaseEndpoint.data = this.attachToCaseEndpoint.data;
                if (this.attachToCaseEndpoint.data.succeeded) {
                    this.handleData(this.attachToCaseEndpoint.data);
                    this.initialized = true;
                }
                else {
                    this.logger.error('An error occured while getting attached results', this.attachToCaseEndpoint.data.message);
                }
            }
            this.bind.on(window, modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_1__[/* UserActionEvents */ "b"].attachedResultChange, function (args) {
                return _this.handleAttachedResultChangeEvent(args);
            });
            this.bind.onRootElement(modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_1__[/* UserActionEvents */ "b"].attachToCaseStateChanged, function (arg) {
                return _this.handleStateChanged(arg);
            });
            this.renderButton();
        }
        else {
            this.logger.warn('No endpoint detected, make sure to set one using the SetAttachToCaseEndpoint method.');
        }
    };
    /**
     * Attaches the result to the current Case.
     *
     * ```js
     * $('#myAttachToCase').coveo('attach')
     * ```
     */
    AttachToCase.prototype.attach = function () {
        var _this = this;
        if (this.isAttached() && this.initialized && !this.loading) {
            return;
        }
        this.loading = true;
        this.updateButton();
        // Check for empty *attachedResultRecord* fields ( Note: caseId comes from !{caseId} in AttachToCase.component )
        var requiredFields = ['uriHash', 'source'];
        var requiredFieldsMissing = [];
        // Temporary variable so we don't modify *this.result.raw.sfkbversionnumber*
        var actualSfkbVersionNumber = this.result.raw.sfkbversionnumber || this.result.raw.sfversionnumber;
        // If we have an article ... also check articleLanguage and articleVersionNumber
        if (this.result.raw.sfkbid && actualSfkbVersionNumber) {
            requiredFields.push('articleLanguage');
            // Make sure *sfkbversionnumber* is a Number
            actualSfkbVersionNumber = Number(actualSfkbVersionNumber);
            if (_.isNaN(actualSfkbVersionNumber)) {
                var errorMessage = 'The field sfkbversionnumber is not a valid Number.';
                this.logger.error(errorMessage);
                this.displayModalBoxHelper(errorMessage);
                return;
            }
        }
        // If there is no clickUri we fallback on the uri.
        if (!this.result.clickUri) {
            this.result.clickUri = this.result.uri;
        }
        // If there is no title we fallback on the clickUri
        if (!this.result.title) {
            this.result.title = this.result.clickUri;
        }
        var resultToAttach = Object(_AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_3__[/* createResultToAttach */ "a"])(this.result, this.attachToCaseEndpoint.caseId);
        // Check fields for empty values
        requiredFields.forEach(function (field) {
            if (_.isEmpty(resultToAttach[field])) {
                requiredFieldsMissing.push(field);
            }
        });
        // If we have missing fields, show error + abort attach()
        if (requiredFieldsMissing.length > 0) {
            var errorMessage = "You're missing the " + requiredFieldsMissing.join(', ') + ' field(s).';
            this.logger.error(errorMessage);
            this.displayModalBoxHelper(errorMessage);
            return;
        }
        var args = {
            result: this.result,
            dataToAttach: resultToAttach,
        };
        Coveo.$$(window).trigger(modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_1__[/* UserActionEvents */ "b"].attachToCase, args);
        this.logger.info('Attaching result to case', args);
        this.attachToCaseEndpoint.attachToCase(args.dataToAttach, function (arg) { return _this.handleAttachCallback(arg); });
    };
    /**
     * Detaches the result from the current Case.
     *
     * ```js
     * $('#myAttachToCase').coveo('detach')
     * ```
     */
    AttachToCase.prototype.detach = function () {
        var _this = this;
        if (!this.isAttached() && this.initialized && !this.loading) {
            return false;
        }
        this.loading = true;
        this.updateButton();
        var args = {
            result: this.result,
            caseId: this.attachToCaseEndpoint.caseId,
        };
        Coveo.$$(window).trigger(modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_1__[/* UserActionEvents */ "b"].detachFromCase, args);
        this.logger.info('Detaching result from case', args);
        this.attachToCaseEndpoint.detachFromCase(this.result.raw.urihash, this.result.raw.sfkbid, this.attachToCaseEndpoint.caseId, function (arg) { return _this.handleDetachCallback(arg); });
    };
    AttachToCase.prototype.setAttachToCaseEndpoint = function (endpoint) {
        if (endpoint != null) {
            this.attachToCaseEndpoint = endpoint;
            this.initialize();
        }
    };
    /**
     * Returns whether or not the result is attached.
     *
     * ```js
     * $('#myAttachToCase').coveo('isAttached')
     * ```
     */
    AttachToCase.prototype.isAttached = function () {
        return this.attached;
    };
    AttachToCase.prototype.handleClick = function () {
        if (!this.loading) {
            this.isAttached() ? this.detach() : this.attach();
        }
    };
    AttachToCase.prototype.handleData = function (arg) {
        this.attachedResults = arg.attachedResults;
        this.attached = Object(_AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_3__[/* isAttached */ "d"])(this.attachedResults, this.result);
    };
    AttachToCase.prototype.getCustomMetadata = function () {
        var _a;
        return _a = {},
            _a[this.options.recordType === 'Case' ? 'caseID' : 'recordID'] = this.attachToCaseEndpoint.caseId,
            _a.articleID = this.result.raw.sfkbid,
            _a.resultUriHash = this.result.raw.urihash,
            _a.author = this.result.raw.author,
            _a;
    };
    AttachToCase.prototype.getActionCause = function (causeName) {
        if (this.options.recordType !== 'Case') {
            return {
                name: causeName,
                type: this.options.recordType.toLowerCase(),
            };
        }
        return causeName === 'attach' ? coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["analyticsActionCauseList"].caseAttach : coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["analyticsActionCauseList"].caseDetach;
    };
    AttachToCase.prototype.handleAttachCallback = function (arg) {
        if (arg != null) {
            if (arg.succeeded) {
                this.attached = true;
                if (arg.message) {
                    this.logger.warn(arg.message);
                }
                this.attachedResults.push(Object(_AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_3__[/* createResultToAttach */ "a"])(this.result, this.attachToCaseEndpoint.caseId));
                Coveo.$$(window).trigger('attachedResultChange', {
                    attachedResults: this.attachedResults.slice(0),
                    caseId: this.attachToCaseEndpoint.caseId,
                });
                var customData = this.getCustomMetadata();
                this.usageAnalytics.logClickEvent(this.getActionCause('attach'), __assign({ documentTitle: this.result.title, documentURL: this.result.clickUri, author: this.result.raw.author }, customData), this.result, this.root);
                this.usageAnalytics.logCustomEvent(this.getActionCause('attach'), customData, this.root);
            }
            else {
                // Display errors ...
                this.logger.error('Attach failed', arg.message);
                this.displayModalBoxHelper(arg.message);
            }
        }
        this.loading = false;
        this.updateButton();
    };
    AttachToCase.prototype.handleDetachCallback = function (arg) {
        if (arg != null) {
            if (arg.succeeded) {
                this.attached = false;
                if (arg.message) {
                    this.logger.warn(arg.message);
                }
                this.logger.debug('Array before delete', this.attachedResults);
                this.deleteFromResults();
                this.logger.debug('Array after delete', this.attachedResults);
                Coveo.$$(window).trigger('attachedResultChange', {
                    attachedResults: this.attachedResults.slice(0),
                    caseId: this.attachToCaseEndpoint.caseId,
                });
                var customData = this.getCustomMetadata();
                this.usageAnalytics.logCustomEvent(this.getActionCause('detach'), customData, this.root);
            }
            else {
                this.logger.error('Detach failed', arg.message);
            }
        }
        this.loading = false;
        this.updateButton();
    };
    AttachToCase.prototype.deleteFromResults = function () {
        var _this = this;
        this.attachedResults = this.attachedResults.filter(function (result) {
            return !(Object(_AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_3__[/* isKnowledgeArticleToAttach */ "e"])(result)
                ? result.knowledgeArticleId === _this.result.raw.sfkbid && result.articleLanguage === _this.result.raw.sflanguage
                : result.uriHash === _this.result.raw.urihash);
        });
    };
    AttachToCase.prototype.handleStateChanged = function (arg) {
        if (arg.target != this.element && arg.urihash == this.result.raw.urihash) {
            this.attached = Object(_AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_3__[/* isAttached */ "d"])(this.attachedResults, this.result);
            this.loading = arg.loading;
            this.updateButton(false);
        }
    };
    AttachToCase.prototype.handleAttachedResultChangeEvent = function (args) {
        if (modules_search_ts__WEBPACK_IMPORTED_MODULE_7__[/* Id */ "a"].equal(this.attachToCaseEndpoint.caseId, args.caseId)) {
            var data = this.attachToCaseEndpoint.data;
            this.attachedResults = args.attachedResults;
            data.attachedResults = this.attachedResults;
            this.attached = Object(_AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_3__[/* isAttached */ "d"])(this.attachedResults, this.result);
            this.updateButton(false);
        }
    };
    AttachToCase.prototype.displayModalBoxHelper = function (message) {
        var content = document.createElement('p');
        content.innerText = message;
        Coveo.ModalBox.open(content, {
            title: 'An error occured',
            overlayClose: true,
            buttons: Coveo.ModalBox.BUTTON.OK,
        });
    };
    AttachToCase.prototype.renderButton = function () {
        var _this = this;
        this.element.innerHTML = '';
        this.buttonElement = document.createElement('div');
        var iconElement = document.createElement('span');
        iconElement.classList.add('coveo-attach-to-case-icon');
        Coveo.$$(this.buttonElement).append(iconElement);
        this.appendSvgIconToElement(iconElement, _common_ts_Icons__WEBPACK_IMPORTED_MODULE_2__[/* Icons */ "a"].attachIcon, 'coveo-attach-icon');
        this.appendSvgIconToElement(iconElement, _common_ts_Icons__WEBPACK_IMPORTED_MODULE_2__[/* Icons */ "a"].waitIcon, 'coveo-loading-icon');
        if (this.options.displayTooltip) {
            this.tooltipElement = document.createElement('div');
            this.tooltipElement.classList.add('coveo-caption-for-icon');
            Coveo.$$(iconElement).append(this.tooltipElement);
        }
        if (this.options.displayText) {
            this.textElement = document.createElement('span');
            this.textElement.classList.add('coveo-attach-to-case-text');
            Coveo.$$(this.buttonElement).append(this.textElement);
        }
        Coveo.$$(this.element).append(this.buttonElement);
        if (!this.options.readonly) {
            Coveo.$$(this.element).on('click', function () { return _this.handleClick(); });
            Coveo.$$(this.element).on('mouseenter', function () { return _this.handleHover(true); });
            Coveo.$$(this.element).on('mouseleave', function () { return _this.handleHover(false); });
        }
        this.updateButton();
    };
    AttachToCase.prototype.handleHover = function (isIn) {
        if (this.isAttached() && this.options.displayText) {
            var label = isIn ? Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Detach') : Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Attached');
            this.textElement.innerText = label;
        }
    };
    AttachToCase.prototype.sendStateChangedEvent = function () {
        var arg = {
            target: this.element,
            urihash: this.result.raw.urihash,
            loading: this.loading,
        };
        Coveo.$$(this.root).trigger(modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_1__[/* UserActionEvents */ "b"].attachToCaseStateChanged, arg);
    };
    AttachToCase.prototype.updateButton = function (sendEvent) {
        if (sendEvent === void 0) { sendEvent = true; }
        if (!this.buttonElement) {
            return;
        }
        this.buttonElement.className = '';
        if (this.loading) {
            this.buttonElement.classList.add('coveo-loading');
        }
        else if (this.isAttached()) {
            this.buttonElement.classList.add('coveo-attached');
        }
        else if (!this.options.readonly) {
            this.buttonElement.classList.add('coveo-attach');
        }
        if (this.options.readonly) {
            this.buttonElement.classList.add('coveo-readonly');
        }
        if (this.options.displayText) {
            this.textElement.innerText = this.isAttached() ? Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Attached') : Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Attach');
        }
        if (this.options.displayTooltip) {
            this.tooltipElement.innerText = this.isAttached() ? Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Attached_tooltip') : Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Attach_tooltip');
        }
        if (sendEvent) {
            this.sendStateChangedEvent();
        }
    };
    AttachToCase.prototype.appendSvgIconToElement = function (element, svgIconName, svgIconClass) {
        var iconElement = Object(modules_common_ts_Utils__WEBPACK_IMPORTED_MODULE_4__[/* parseHTML */ "a"])(svgIconName)[0];
        /**
         * SVGElement.classList is not supported in IE.
         * https://developer.mozilla.org/en-US/docs/Web/API/Element/classList
         * SVGElement.classList is an SVGAnimatedString, so we must set the `baseVal` property.
         */
        iconElement.className.baseVal = svgIconClass;
        /**
         * IE does not support SVGElement.outerHTML because SVG are not part of the HTML specification.
         * https://stackoverflow.com/questions/12592417/outerhtml-of-an-svg-element
         */
        var iconHtml = new XMLSerializer().serializeToString(iconElement);
        element.innerHTML += iconHtml;
    };
    AttachToCase.ID = 'AttachToCase';
    AttachToCase.fields = ['sfkbid', 'sfkbversionnumber', 'sfversionnumber', 'sflanguage'];
    /**
     * The possible options for AttachToCase
     * @componentOptions
     */
    AttachToCase.options = {
        /**
         * Specifies if the component should include the Attach/Detach text.
         *
         * Default value is `false`.
         *
         * ```html
         * <div data-display-text='true'/>
         * ```
         */
        displayText: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        /**
         * Specifies if the component should include the Attach/Detach tooltip.
         *
         * Default value is `false`.
         *
         * ```html
         * <div data-display-tooltip='true'/>
         * ```
         */
        displayTooltip: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        /**
         * Specifies if the component should be in read only mode. When in read only mode, you cannot Attach or Detach results.
         *
         * The default value is `false`.
         *
         * ```html
         * <div data-readonly='true'/>
         * ```
         */
        readonly: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        /**
         * Specified the current record type.
         */
        recordType: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: 'Case' }),
        attachToCaseEndpoint: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function (name) { return function () { return window[name]; }; }, {
            defaultFunction: function () { return function () { return window['attachToCaseEndpoint']; }; },
        }),
    };
    return AttachToCase;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerComponentFields(AttachToCase.ID, AttachToCase.fields);
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(AttachToCase);
// Load strings and format 'description' ones for the tooltips.
utils_Translation__WEBPACK_IMPORTED_MODULE_5__[/* Translation */ "a"].register('en', strings);


/***/ }),
/* 20 */
/***/ (function(module) {

module.exports = JSON.parse("{\"a\":\"<svg viewbox=\\\"0 0 20 20\\\"><path d=\\\"M0 10c0 5.52 4.466 10 9.989 10 5.53 0 10.01-4.478 10.01-10 0-5.52-4.478-10-10.01-10C4.469 0 0 4.478 0 10m10.04-8c4.44 0 8.05 3.589 8.05 8s-3.612 8-8.05 8c-4.428 0-8.03-3.589-8.03-8s3.603-8 8.03-8\\\"/><path d=\\\"M9 5.991C9 5.451 9.45 5 10.01 5c.559 0 1 .444 1 .991l-.009 4.596 2.742 2.742a.994.994 0 0 1-.005 1.409.997.997 0 0 1-1.409.005L9 11.414V5.991\\\"/></svg>\",\"b\":\"<svg viewbox=\\\"0 0 22 22\\\"><path d=\\\"M.818 2.232L2.232.818l19.02 19.02-1.413 1.415z\\\"/><path d=\\\"M.818 19.768L19.838.748l1.415 1.413L2.232 21.182z\\\"/></svg>\",\"c\":\"<svg viewbox=\\\"0 0 20 20\\\"><path d=\\\"M1 4c0-.553.446-1 .997-1h8v2h-7s.019 11.933 0 12h12v-7h2v8a.997.997 0 0 1-1 .997H1.999c-.553 0-1-.445-1-1V4\\\"/><path d=\\\"M14.5 3.5l-7 7L6 14l3.5-1.5 7-7zM17.848.848a.495.495 0 0 0-.697 0L15.499 2.5l2 2 1.652-1.652a.495.495 0 0 0 0-.697L17.848.848\\\"/></svg>\",\"d\":\"<svg viewbox=\\\"0 0 20 20\\\"><path d=\\\"M1 4c0-.553.446-1 .997-1h8v2h-7s.019 11.933 0 12h12v-7h2v8a.997.997 0 0 1-1 .998H1.999c-.553 0-1-.445-1-1V4\\\"/><path d=\\\"M15.5 3L8.707 9.792a.999.999 0 0 0 0 1.414l.086.086a.999.999 0 0 0 1.414 0L17 4.5v2a1 1 0 0 0 2 0V2.001a1 1 0 0 0-1-1h-4.499a1 1 0 0 0 0 2h2\\\"/></svg>\"}");

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConsoleResultLink; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ConsoleResultLink = /** @class */ (function (_super) {
    __extends(ConsoleResultLink, _super);
    function ConsoleResultLink(element, options, bindings, result) {
        var _this = _super.call(this, element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, ConsoleResultLink, options), bindings, result) || this;
        _this.element = element;
        _this.options = options;
        _this.result = result;
        return _this;
    }
    ConsoleResultLink.prototype.bindEventToOpen = function () {
        if (!this.options.workspaceAPI) {
            console.log('ConsoleResultLink: workspaceAPI is null, binding ResultLink open instead.');
            return _super.prototype.bindEventToOpen.call(this);
        }
        return this.bindClickForLightningConsole();
    };
    ConsoleResultLink.prototype.bindClickForLightningConsole = function () {
        // Open the result as a primary tab by default.
        var actionOnClick = (this.options.openInSubTab ? this.openInSubTab : this.openInPrimaryTab).bind(this);
        $(this.element).click(function () {
            actionOnClick().catch(function (err) {
                console.log(err);
            });
        });
        return true;
    };
    ConsoleResultLink.prototype.openInPrimaryTab = function () {
        if (this.options.hrefTemplate) {
            return this.openUrlInPrimaryTab(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["StringUtils"].buildStringTemplateFromResult(this.options.hrefTemplate, this.result));
        }
        return this.openRecordInPrimaryTab(this.getResultSfId());
    };
    ConsoleResultLink.prototype.openInSubTab = function () {
        if (this.options.hrefTemplate) {
            return this.openUrlInSubTab(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["StringUtils"].buildStringTemplateFromResult(this.options.hrefTemplate, this.result));
        }
        return this.openRecordIdInSubTab(this.getResultSfId());
    };
    ConsoleResultLink.prototype.openRecordInPrimaryTab = function (recordId) {
        if (!recordId) {
            console.log('ConsoleResultLink: Could not find a Salesforce ID to navigate to, doing nothing.');
            return Promise.resolve();
        }
        return this.options.workspaceAPI.openTab({
            recordId: recordId,
            focus: true,
        });
    };
    ConsoleResultLink.prototype.openUrlInPrimaryTab = function (url) {
        return this.options.workspaceAPI.openTab({
            url: url,
            focus: true,
        });
    };
    ConsoleResultLink.prototype.openRecordIdInSubTab = function (recordId) {
        var _this = this;
        if (!recordId) {
            console.log('ConsoleResultLink: Could not find a Salesforce ID to navigate to, doing nothing.');
            return Promise.resolve();
        }
        return this.options.workspaceAPI.getFocusedTabInfo().then(function (response) {
            return _this.options.workspaceAPI.openSubtab({
                parentTabId: response.tabId,
                recordId: recordId,
                focus: true,
            });
        });
    };
    ConsoleResultLink.prototype.openUrlInSubTab = function (url) {
        var _this = this;
        return this.options.workspaceAPI.getFocusedTabInfo().then(function (response) {
            return _this.options.workspaceAPI.openSubtab({
                parentTabId: response.tabId,
                url: url,
                focus: true,
            });
        });
    };
    ConsoleResultLink.prototype.getResultSfId = function () {
        var idToUse = this.result.raw.sfid;
        // TODO: Make sure this works with Lightning Knowledge...
        // Knowledge article uses the knowledge article version id to navigate.
        if (this.result.raw.sfkbid !== undefined && this.result.raw.sfkavid !== undefined) {
            idToUse = this.result.raw.sfkavid;
        }
        return idToUse || '';
    };
    ConsoleResultLink.ID = 'ConsoleResultLink';
    ConsoleResultLink.fields = ['sfkbid', 'sfkavid', 'sfid'];
    ConsoleResultLink.options = {
        /**
         * Specifies a template literal from which to generate the `ResultLink` `href` attribute value (see
         * [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).
         *
         * This option overrides the [`field`]{@link ResultLink.options.field} option value.
         *
         * The template literal can reference any number of fields from the parent result. It can also reference global
         * scope properties.
         *
         * **Examples:**
         *
         * - The following markup generates an `href` value such as `http://uri.com?id=itemTitle`:
         *
         * ```html
         * <a class='CoveoResultLink' data-href-template='${clickUri}?id=${raw.title}'></a>
         * ```
         *
         * - The following markup generates an `href` value such as `localhost/fooBar`:
         *
         * ```html
         * <a class='CoveoResultLink' data-href-template='${window.location.hostname}/{Foo.Bar}'></a>
         * ```
         *
         * Default value is `undefined`.
         */
        hrefTemplate: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption(),
        /**
         * Specifies a template literal from which to generate the `ResultLink` display title (see
         * [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).
         *
         * This option overrides the default `ResultLink` display title behavior.
         *
         * The template literal can reference any number of fields from the parent result. However, if the template literal
         * references a key whose value is undefined in the parent result fields, the `ResultLink` title displays the
         * name of this key instead.
         *
         * This option is ignored if the `ResultLink` innerHTML contains any value.
         *
         * **Examples:**
         *
         * - The following markup generates a `ResultLink` display title such as `Case number: 123456` if both the
         * `raw.objecttype` and `raw.objectnumber` keys are defined in the parent result fields:
         *
         * ```html
         * <a class="CoveoResultLink" data-title-template="${raw.objecttype} number: ${raw.objectnumber}"></a>
         * ```
         *
         * - The following markup generates `${myField}` as a `ResultLink` display title if the `myField` key is undefined
         * in the parent result fields:
         *
         * ```html
         * <a class="CoveoResultLink" data-title-template="${myField}"></a>
         * ```
         *
         * - The following markup generates `Foobar` as a `ResultLink` display title, because the `ResultLink` innterHTML is
         * not empty:
         *
         * ```html
         * <a class="CoveoResultLink" data-title-template="${will} ${be} ${ignored}">Foobar</a>
         * ```
         *
         * Default value is `undefined`.
         */
        titleTemplate: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption(),
        /**
         * Open links as sub tabs in the Salesforce Console instead of primary tabs.
         *
         * **Examples:**
         *
         * `<a class="CoveoConsoleResultLink" data-open-in-sub-tab="true"></a>
         *
         * Default value is `false`.
         */
        openInSubTab: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        workspaceAPI: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function () { return null; }, { defaultValue: null, required: true }),
    };
    return ConsoleResultLink;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ResultLink"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerComponentFields(ConsoleResultLink.ID, ConsoleResultLink.fields);
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(ConsoleResultLink);


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResultQuickAction; });
/* harmony import */ var _ResultAction_ResultAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



/**
 * The _ResultQuickAction_ component is a Result Template component designed to work
 * with the _ResultActionsMenu_ Result Template component.
 *
 * It can be customized to perform any Salesforce Quick Action.
 *
 * ```html
 * <div class="CoveoResultActionsMenu">
 *  <div class="CoveoResultQuickAction"></div>
 * </div>
 * ```
 */
var ResultQuickAction = /** @class */ (function (_super) {
    __extends(ResultQuickAction, _super);
    /**
     * Construct a ResultQuickAction component.
     * @param element The HTML element bound to this component.
     * @param options The options that can be provided to this component.
     * @param bindings The bindings, or environment within which this component exists.
     * @param queryResult The result of the query in which this ResultQuickAction exists.
     */
    function ResultQuickAction(element, options, bindings, queryResult) {
        var _this = _super.call(this, element, options, bindings, queryResult) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.queryResult = queryResult;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].initComponentOptions(element, ResultQuickAction, options);
        _super.prototype.init.call(_this);
        return _this;
    }
    /**
     * Construct quick action arguments and perform the action.
     * @override
     */
    ResultQuickAction.prototype.doAction = function () {
        var _this = this;
        if (!this.options.quickActionAPI) {
            throw new Error('The QuickAction Lightning API is required.');
        }
        var QUICK_ACTION_ERROR_MESSAGE = 'This action is unavailable.';
        // Acquire fields from component options and insert query result values into the templates.
        var fields = __assign(__assign({}, this.getActionFields()), this.options.targetFields);
        Object.keys(fields).forEach(function (key) {
            fields[key].value = coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["StringUtils"].buildStringTemplateFromResult(fields[key].value, _this.queryResult);
        });
        var args = {
            actionName: this.options.actionName,
            targetFields: fields,
            submitOnSuccess: this.options.autoSubmit || false,
        };
        // This is used to allow clients to hook and edit the arg before sending to Salesforce.
        if (this.options.onSendActionEvent) {
            var onSendAction = { result: this.queryResult, args: args };
            this.bind.trigger(Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["$$"])(this.root), this.options.onSendActionEvent, onSendAction);
        }
        /**
         * Log a usage analytics event with event name corresponding to the action name.
         * This allows clients to check usage analytics for even custom result actions.
         */
        var actionCause = {
            name: this.options.actionName,
            type: 'resultAction',
        };
        this.usageAnalytics.logClickEvent(actionCause, null, this.queryResult, this.root);
        this.options.quickActionAPI.setActionFieldValues(args).then(function (data) {
            if (data.success) {
                _this.logger.info('Action sent', args, data);
            }
            else {
                modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* SalesforceUtilities */ "c"].showToastError(QUICK_ACTION_ERROR_MESSAGE, data, _this.logger);
            }
        }, function (error) { return modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* SalesforceUtilities */ "c"].showToastError(QUICK_ACTION_ERROR_MESSAGE, error, _this.logger); });
    };
    /**
     * Override this function in implementation classes to provide the required fields.
     */
    ResultQuickAction.prototype.getActionFields = function () {
        return {};
    };
    ResultQuickAction.ID = 'ResultQuickAction';
    /**
     * The possible options for _ResultQuickAction_.
     * @componentOptions
     */
    ResultQuickAction.options = {
        quickActionAPI: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildCustomOption(function () { return null; }, { required: true }),
        /**
         * Specifies the name of the Quick Action bound to this result action.
         * This field is required.
         *
         * ```html
         * <div data-action-name='FeedItem.TextPost' />
         * ```
         */
        actionName: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({ required: true }),
        /**
         * Specifies the fields that will be sent in the arguments of the quick action.
         * This argument must be provided as a JSON object. Fields from the query result
         * can be inserted by placing ${FieldName} in a string value.
         *
         * This field is required.
         *
         * ```html
         * <div data-target-fields='{"Body":{"value":"<b>${title}</b>(${ClickUri})<br/><p><i>\"${Excerpt}\"</i></p>"}}'/>
         * ```
         *
         */
        targetFields: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildJsonOption(),
        /**
         * Specify the name of the event that will be fired to allow modification
         * of the arguments before sending the action.
         *
         * This field is optional. If left empty, no event will be fired.
         *
         * ```html
         * <div data-on-send-action-event='ResultActionsEvents.onPostToFeed' />
         * ```
         */
        onSendActionEvent: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption(),
        /**
         * Specifies if the component should perform the action right away.
         *
         * Default value is `false`.
         *
         * ```html
         * <div data-auto-submit='true'/>
         * ```
         */
        autoSubmit: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        /**
         * The icon that will be displayed on the button.
         * If text is provided, the button will contain that text.
         * If the HTML of an image is provided, that image will be displayed in the button.
         */
        icon: _ResultAction_ResultAction__WEBPACK_IMPORTED_MODULE_0__[/* ResultAction */ "a"].options.icon,
        /**
         * The tooltip that displays on hovering the component.
         *
         * ```html
         * <div data-tooltip='Post to Feed'/>
         * ```
         */
        tooltip: _ResultAction_ResultAction__WEBPACK_IMPORTED_MODULE_0__[/* ResultAction */ "a"].options.tooltip,
    };
    return ResultQuickAction;
}(_ResultAction_ResultAction__WEBPACK_IMPORTED_MODULE_0__[/* ResultAction */ "a"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["Initialization"].registerAutoCreateComponent(ResultQuickAction);


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FullSearchHelper; });
/* harmony import */ var _utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var FullSearchHelper = /** @class */ (function () {
    function FullSearchHelper() {
    }
    FullSearchHelper.openFullSearchPage = function (button) {
        return __awaiter(this, void 0, void 0, function () {
            var pageRef, workspace, options, focusedTabId, tabId, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pageRef = {
                            type: 'standard__component',
                            attributes: {
                                componentName: button.options.fullSearchComponentName || 'CoveoV2__FullSearch',
                            },
                            state: FullSearchHelper.getPageReferenceState(button),
                        };
                        workspace = button.options.workspaceAPI;
                        options = { pageReference: pageRef, focus: true };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, FullSearchHelper.getFocusedTabId(button.options.openInSubtab, options, workspace)];
                    case 2:
                        focusedTabId = _a.sent();
                        return [4 /*yield*/, workspace.setTabLabel({
                                tabId: focusedTabId,
                                label: 'Search',
                            })];
                    case 3:
                        tabId = (_a.sent()).tabId;
                        return [4 /*yield*/, workspace.setTabIcon({
                                tabId: tabId,
                                icon: 'standard:search',
                                iconAlt: 'Search',
                            })];
                    case 4:
                        _a.sent();
                        button.bindings.usageAnalytics.logCustomEvent(Coveo.analyticsActionCauseList.expandToFullUI, {
                            fullSearchComponentName: button.options.fullSearchComponentName,
                            triggeredBy: button.id,
                        }, button.element);
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        return [2 /*return*/, button.options.navigator
                                .generateUrl(pageRef)
                                .then(function (url) {
                                window.open(url);
                            })
                                .catch(function (e) {
                                _utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_0__[/* SalesforceUtilities */ "c"].showToastError('An error occurred while performing the desired action.', e, button.logger);
                            })];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    FullSearchHelper.getPageReferenceState = function (button) {
        /**
         * Keys in the page reference state must only contain URI characters but cannot be
         * URI encoded.
         */
        var customKeyPrefix = 'c__';
        var facetKeyUrlPrefix = 'f-';
        var facetKeyStatePrefix = 'f:@';
        // Add the search's state to the page reference state to carry it over to the full search page.
        var searchState = button.queryStateModel.getAttributes();
        var pageReferenceState = __assign({}, button.options.pageState);
        if (!searchState) {
            return pageReferenceState;
        }
        for (var key in searchState) {
            var keyInPageRef = customKeyPrefix + key.replace(facetKeyStatePrefix, facetKeyUrlPrefix);
            pageReferenceState[keyInPageRef] = searchState[key];
        }
        // If the query is blank update the PageReferenceState Query to also be blank
        if (!searchState.q) {
            pageReferenceState['c__q'] = '';
        }
        return pageReferenceState;
    };
    FullSearchHelper.getFocusedTabId = function (openInSubtab, tabOptions, workspace) {
        return __awaiter(this, void 0, void 0, function () {
            var focusedTabId, currentTab;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!openInSubtab) return [3 /*break*/, 3];
                        return [4 /*yield*/, workspace.getFocusedTabInfo()];
                    case 1:
                        currentTab = _a.sent();
                        return [4 /*yield*/, workspace.openSubtab(__assign(__assign({}, tabOptions), { parentTabId: currentTab.tabId }))];
                    case 2:
                        focusedTabId = _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, workspace.openTab(tabOptions)];
                    case 4:
                        focusedTabId = _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, focusedTabId];
                }
            });
        });
    };
    return FullSearchHelper;
}());



/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CreateArticleHelper; });
/* harmony import */ var _utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var CreateArticleHelper = /** @class */ (function () {
    function CreateArticleHelper() {
    }
    CreateArticleHelper.createArticle = function (button, useDefault, articleApiName) {
        return __awaiter(this, void 0, void 0, function () {
            var URL, currentTab, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        URL = "/lightning/o/" + articleApiName + "/new" + (useDefault ? '' : '?useRecordTypeCheck=1');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        if (!button.options.openInSubtab) return [3 /*break*/, 3];
                        return [4 /*yield*/, button.options.workspaceAPI.getFocusedTabInfo()];
                    case 2:
                        currentTab = _a.sent();
                        button.options.workspaceAPI.openSubtab({
                            parentTabId: currentTab.tabId,
                            url: URL,
                            focus: true,
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        button.options.workspaceAPI.openTab({
                            url: URL,
                            focus: true,
                        });
                        _a.label = 4;
                    case 4:
                        button.bindings.usageAnalytics.logCustomEvent({ name: 'createArticle', type: 'createArticle' }, {
                            articleType: articleApiName,
                            triggeredBy: button.id,
                        }, button.element);
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        _utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_0__[/* SalesforceUtilities */ "c"].showToastError('An error occurred while performing the desired action.', e_1, button.logger);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return CreateArticleHelper;
}());



/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getSearchParams */
/* unused harmony export stringifySearchParams */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return parseHTML; });
/**
 * Parse the search string of the current page into a map.
 * @returns a map with the key corresponding to the left side of the = and the value corresponding to the right side.
 */
function getSearchParams() {
    var params = window.location.search
        .substring(1)
        .split('&')
        .reduce(function (params, param) {
        var _a = param.split('='), key = _a[0], value = _a[1];
        params[key] = value;
        return params;
    }, {});
    return params;
}
/**
 * Build the query from a Map of strings.
 * @param params The params to set, as a map with it's key being the string before the = and the value being the string after it.
 * @returns the query to append to the URL.
 */
function stringifySearchParams(params) {
    var paramString = '?';
    for (var key in params) {
        if (params.hasOwnProperty(key)) {
            var value = params[key];
            paramString += key + "=" + value + "&";
        }
    }
    return paramString.substr(0, paramString.length - 1);
}
/**
 * Create HTMLElements the same way that jQuery.parseHtml does.
 * @param htmlText some HTML markup
 */
function parseHTML(htmlText) {
    /**
     * Passing a title to `createHTMLDocument` is mandatory for IE.
     * https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument
     */
    var tmp = document.implementation.createHTMLDocument('');
    tmp.body.innerHTML = htmlText;
    return tmp.body.children;
}


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_translation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);

_utils_translation__WEBPACK_IMPORTED_MODULE_0__[/* Translation */ "b"].register(_utils_translation__WEBPACK_IMPORTED_MODULE_0__[/* Language */ "a"].English, {
    UserActions_no_actions: 'No actions available for this user',
    UserActions_enable_prompt: 'The User Action feature is not activated for your organization.\nTo activate it, contact Coveo Support.',
    QueryList_more: 'Show More',
    QueryList_less: 'Show Less',
    QueryList_no_queries: 'No queries made by this user',
    ClickedDocumentList_more: 'Show More',
    ClickedDocumentList_less: 'Show Less',
    ClickedDocumentList_no_clicked_documents: 'No document clicked by this user',
    UserActivity_start_date: 'Start Date',
    UserActivity_start_time: 'Start Time',
    UserActivity_duration: 'Duration',
    UserActivity_other_event: 'Other Event',
    UserActivity_other_events: 'Other Events',
    UserActivity_search: 'Query',
    UserActivity_query: 'User Query',
    UserActivity_click: 'Clicked Document',
    UserActivity_view: 'Page View',
    UserActivity_custom: 'Custom Action',
});



/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExpandableList; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * Display a list that expand when click on the more button.
 */
var ExpandableList = /** @class */ (function () {
    /**
     * Create an instance of the **ExpandableList** class.
     *
     * @param element Element on which to bind the component
     * @param items List of items to display.
     * @param options Initialization options.
     */
    function ExpandableList(element, items, options) {
        this.element = element;
        this.items = items;
        this.options = options;
        this.isOpen = false;
        this.options = this.parseOptions(options);
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].isNotUndefined(this.options.transform);
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].isNotNull(this.options.transform);
        this.proccessedItem = items.slice(0, this.options.maximumItemsShown).map(this.options.transform);
        this.visibleItems = this.proccessedItem.slice(0, this.options.minimumItemsShown);
        this.hiddenItems = this.proccessedItem.slice(this.options.minimumItemsShown, this.options.maximumItemsShown);
        this.render();
    }
    ExpandableList.prototype.buildMoreButton = function () {
        var button = document.createElement('button');
        button.type = 'button';
        button.classList.add('coveo-more-less');
        button.addEventListener('click', this.toggleExpansion.bind(this));
        this.button = button;
        return button;
    };
    ExpandableList.prototype.isSomeItemsHidden = function () {
        return !(this.options.maximumItemsShown === this.options.minimumItemsShown || this.hiddenItems.length === 0);
    };
    ExpandableList.prototype.parseOptions = function (options) {
        var moreOrEqualThan = function (mininum, value) { return (value >= mininum ? value : mininum); };
        var parsedOptions = Object.assign({}, options);
        parsedOptions.showLessMessage = parsedOptions.showLessMessage || ExpandableList.DEFAULTS.LESS_LABEL;
        parsedOptions.showMoreMessage = parsedOptions.showMoreMessage || ExpandableList.DEFAULTS.MORE_LABEL;
        parsedOptions.minimumItemsShown = parsedOptions.minimumItemsShown || ExpandableList.DEFAULTS.MINIMUM_ITEMS_SHOWN;
        parsedOptions.maximumItemsShown = parsedOptions.maximumItemsShown || ExpandableList.DEFAULTS.MAXIMUM_ITEMS_SHOWN;
        parsedOptions.minimumItemsShown = moreOrEqualThan(parsedOptions.minimumItemsShown, 1);
        parsedOptions.maximumItemsShown = moreOrEqualThan(parsedOptions.maximumItemsShown, parsedOptions.minimumItemsShown);
        parsedOptions.listLabel = parsedOptions.listLabel || ExpandableList.DEFAULTS.LIST_LABEL;
        return parsedOptions;
    };
    ExpandableList.prototype.render = function () {
        this.element.classList.add(ExpandableList.COMPONENT_CLASS);
        var header = document.createElement('h2');
        header.classList.add('coveo-title');
        header.innerText = this.options.listLabel;
        var list = document.createElement('ol');
        list.classList.add('coveo-list');
        this.element.appendChild(header);
        this.element.appendChild(list);
        if (this.isSomeItemsHidden()) {
            this.element.appendChild(this.buildMoreButton());
        }
        if (this.items.length === 0) {
            this.renderEmpty();
        }
        else {
            this.fold();
        }
    };
    ExpandableList.prototype.renderEmpty = function () {
        var list = this.element.querySelector('.coveo-list');
        var li = document.createElement('li');
        li.classList.add(ExpandableList.EMPTY_CLASS);
        li.innerText = this.options.messageWhenEmpty || '';
        list.appendChild(li);
    };
    ExpandableList.prototype.toggleExpansion = function () {
        if (this.isOpen) {
            this.fold();
        }
        else {
            this.unfold();
        }
        this.isOpen = !this.isOpen;
    };
    ExpandableList.prototype.fold = function () {
        this.update(this.visibleItems, this.options.showMoreMessage);
    };
    ExpandableList.prototype.unfold = function () {
        this.update(__spreadArrays(this.visibleItems, this.hiddenItems), this.options.showLessMessage);
    };
    ExpandableList.prototype.update = function (items, buttonText) {
        return __awaiter(this, void 0, void 0, function () {
            var list, listItems;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list = this.element.querySelector('.coveo-list');
                        return [4 /*yield*/, Promise.all(items)];
                    case 1:
                        listItems = (_a.sent()).map(function (itemElement) {
                            var listItem = document.createElement('li');
                            listItem.appendChild(itemElement);
                            return listItem;
                        });
                        list.innerHTML = '';
                        listItems.forEach(function (itemElement) {
                            Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(list).append(itemElement);
                        });
                        if (this.button) {
                            this.button.innerText = buttonText;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return ExpandableList;
}());

ExpandableList.DEFAULTS = Object.freeze({
    LESS_LABEL: 'Show Less',
    MORE_LABEL: 'Show More',
    LIST_LABEL: 'Items',
    MAXIMUM_ITEMS_SHOWN: 8,
    MINIMUM_ITEMS_SHOWN: 4,
});
ExpandableList.COMPONENT_CLASS = 'coveo-expandable-list';
ExpandableList.EMPTY_CLASS = 'coveo-empty';



/***/ }),
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ UserActions_UserActions; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/ResponsiveUserActions.js


/**
 * Handle the responsive button creation and positionning.
 */
var ResponsiveUserActions_ResponsiveUserActions = /** @class */ (function () {
    /**
     * Create a **ResponsiveUserActions** instance.
     *
     * @param root The root of the interface.
     * @param ID Identifier of the **ResponsiveUserActions**.
     * @param _options _unused parameter_.
     */
    function ResponsiveUserActions(root, ID, _options) {
        this.root = root;
        this.ID = ID;
    }
    /**
     * Register the **component** to the **ResponsiveComponentsManager**.
     *
     * @param root The root of the interface.
     * @param component The component to register as a responsive component.
     */
    ResponsiveUserActions.init = function (root, component) {
        external_window_Coveo_["ResponsiveComponentsManager"].register(ResponsiveUserActions, Object(external_window_Coveo_["$$"])(root), UserActions_UserActions.ID, component, {});
    };
    /**
     * Register the user action component as a responsive component.
     *
     * @param component The component to register as a responsive component.
     */
    ResponsiveUserActions.prototype.registerComponent = function (component) {
        if (!this.userActions && component.constructor.ID === UserActions_UserActions.ID) {
            this.userActions = component;
            this.buildDropdownHeader(this.userActions.options.buttonLabel);
            return true;
        }
        return false;
    };
    /**
     * On resize, will place the user actions button in the Dropdown Header Wrapper Section.
     */
    ResponsiveUserActions.prototype.handleResizeEvent = function () {
        var wrapper = Object(external_window_Coveo_["$$"])(this.root).find("." + external_window_Coveo_["ResponsiveComponentsManager"].DROPDOWN_HEADER_WRAPPER_CSS_CLASS);
        if (wrapper != null) {
            Object(external_window_Coveo_["$$"])(wrapper).append(this.dropdownHeader.element.el);
        }
    };
    /**
     * Always return true because the component always need a button.
     */
    ResponsiveUserActions.prototype.needDropdownWrapper = function () {
        return true;
    };
    ResponsiveUserActions.prototype.buildDropdownHeader = function (label) {
        var _this = this;
        // Create a button.
        var button = document.createElement('a');
        var content = document.createElement('p');
        content.innerText = label;
        button.appendChild(content);
        this.dropdownHeader = new external_window_Coveo_["ResponsiveDropdownHeader"]('user-actions', Object(external_window_Coveo_["$$"])(button));
        this.dropdownHeader.element.on('click', function () {
            _this.userActions.toggle();
        });
    };
    return ResponsiveUserActions;
}());



// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/icons.js
var icons = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/ClickedDocumentList.js
var ClickedDocumentList = __webpack_require__(42);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/QueryList.js
var QueryList = __webpack_require__(43);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/UserActivity.js + 2 modules
var UserActivity = __webpack_require__(48);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/models/UserProfileModel.js
var UserProfileModel = __webpack_require__(14);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/Strings.js
var Strings = __webpack_require__(26);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/ViewedByCustomer/ViewedByCustomer.js + 1 modules
var ViewedByCustomer = __webpack_require__(49);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/Events.js
var Events = __webpack_require__(15);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/UserActions.js
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










var ResultLayoutType;
(function (ResultLayoutType) {
    ResultLayoutType["LIST"] = "list";
    ResultLayoutType["TABLE"] = "table";
    ResultLayoutType["CARD"] = "card";
})(ResultLayoutType || (ResultLayoutType = {}));
/**
 * Display a panel that contains a summary of a user session and that also contains detailed information about user actions.
 */
var UserActions_UserActions = /** @class */ (function (_super) {
    __extends(UserActions, _super);
    /**
     * Create an instance of the **UserActions** class. Initialize is needed the **UserProfileModel** and fetch user actions related to the **UserId**.
     *
     * @param element Element on which to bind the component.
     * @param options Initialization options of the component.
     * @param bindings Bindings of the Search-UI environment.
     */
    function UserActions(element, options, bindings) {
        var _this = _super.call(this, element, UserActions.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, UserActions, options);
        if (!_this.options.userId) {
            _this.disable();
            return _this;
        }
        if (_this.options.viewedByCustomer) {
            _this.showViewedByCustomer();
        }
        _this.tagViewsOfUser();
        if (!options.hidden) {
            if (options.useResponsiveManager) {
                ResponsiveUserActions_ResponsiveUserActions.init(_this.root, _this);
            }
            _this.bind.onRootElement(external_window_Coveo_["QueryEvents"].newQuery, function () { return _this.hide(); });
            _this.hide();
        }
        return _this;
    }
    /**
     * Collapse the panel.
     */
    UserActions.prototype.hide = function () {
        if (this.isOpened) {
            this.isOpened = false;
            Object(external_window_Coveo_["get"])(this.root, UserProfileModel["a" /* UserProfileModel */]).deleteActions(this.options.userId);
            this.root.classList.remove(UserActions.USER_ACTION_OPENED);
            this.element.dispatchEvent(new CustomEvent(UserActions.Events.Hide));
        }
    };
    /**
     * Open the panel.
     */
    UserActions.prototype.show = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var userActions, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.isOpened) return [3 /*break*/, 4];
                        this.isOpened = true;
                        this.element.dispatchEvent(new CustomEvent(UserActions.Events.Show));
                        this.bindings.usageAnalytics.logCustomEvent(Events["a" /* UserActionEvents */].open, {}, this.element);
                        this.root.classList.add(UserActions.USER_ACTION_OPENED);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, Object(external_window_Coveo_["get"])(this.root, UserProfileModel["a" /* UserProfileModel */]).getActions(this.options.userId)];
                    case 2:
                        userActions = _b.sent();
                        if (userActions.length > 0) {
                            this.render();
                        }
                        else {
                            this.renderNoActions();
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        if (((_a = e_1) === null || _a === void 0 ? void 0 : _a.statusCode) === 404) {
                            this.renderEnablePrompt();
                        }
                        else {
                            this.renderNoActions();
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Toggle the visibility of the panel.
     */
    UserActions.prototype.toggle = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isOpened) return [3 /*break*/, 1];
                        this.hide();
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.show()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    UserActions.prototype.buildAccordionHeader = function (title) {
        var div = document.createElement('div');
        div.classList.add('coveo-accordion-header');
        var headerTitle = document.createElement('div');
        headerTitle.classList.add('coveo-accordion-header-title');
        headerTitle.innerText = title;
        var arrow = document.createElement('div');
        arrow.classList.add('coveo-arrow-down');
        arrow.innerHTML = icons["a" /* arrowDown */];
        div.appendChild(headerTitle);
        div.appendChild(arrow);
        return div;
    };
    UserActions.prototype.buildAccordion = function (title, elements) {
        var div = document.createElement('div');
        div.classList.add('coveo-accordion');
        var header = this.buildAccordionHeader(title);
        var foldable = document.createElement('div');
        foldable.classList.add('coveo-accordion-foldable');
        elements.forEach(function (el) { return foldable.appendChild(el); });
        div.appendChild(header);
        div.appendChild(foldable);
        header.addEventListener('click', function () {
            if (div.classList.contains('coveo-folded')) {
                div.classList.remove('coveo-folded');
            }
            else {
                div.classList.add('coveo-folded');
            }
        });
        return div;
    };
    UserActions.prototype.buildCoveoElement = function (klass) {
        var el = document.createElement('div');
        el.classList.add("Coveo" + klass.ID);
        return el;
    };
    /**
     * Initialize child Search-UI component and pass down critical options.
     *
     * @param element Parent element of each child that would be initialize.
     */
    UserActions.prototype.initializeSearchUIComponents = function (element) {
        var originalOptions = this.searchInterface.options.originalOptionsObject;
        external_window_Coveo_["Initialization"].automaticallyCreateComponentsInside(element, {
            options: Object.assign(Object.assign({}, originalOptions), { QueryList: Object.assign(Object.assign({}, originalOptions.QueryList), { userId: this.options.userId }), ClickedDocumentList: Object.assign(Object.assign({}, originalOptions.ClickedDocumentList), { userId: this.options.userId }), UserActivity: Object.assign(Object.assign({}, originalOptions.UserActivity), { userId: this.options.userId }) }),
            bindings: this.bindings,
        });
    };
    UserActions.prototype.render = function () {
        var element = document.createElement('div');
        var summarySection = this.buildAccordion(this.options.summaryLabel, [
            this.buildCoveoElement(ClickedDocumentList["a" /* ClickedDocumentList */]),
            this.buildCoveoElement(QueryList["a" /* QueryList */]),
        ]);
        summarySection.classList.add("coveo-summary");
        var detailsSection = this.buildAccordion(this.options.activityLabel, [this.buildCoveoElement(UserActivity["a" /* UserActivity */])]);
        detailsSection.classList.add('coveo-details');
        element.appendChild(summarySection);
        element.appendChild(detailsSection);
        this.initializeSearchUIComponents(element);
        this.element.innerHTML = '';
        this.element.appendChild(element);
    };
    UserActions.prototype.renderNoActions = function () {
        var element = document.createElement('div');
        element.classList.add('coveo-no-actions');
        element.innerText = Object(external_window_Coveo_["l"])(UserActions.ID + "_no_actions");
        this.element.innerHTML = '';
        this.element.appendChild(element);
    };
    UserActions.prototype.renderEnablePrompt = function () {
        var element = document.createElement('div');
        element.classList.add('coveo-enable-prompt');
        element.innerText = Object(external_window_Coveo_["l"])(UserActions.ID + "_enable_prompt");
        this.element.innerHTML = '';
        this.element.appendChild(element);
    };
    UserActions.prototype.showViewedByCustomer = function () {
        var _this = this;
        this.bind.onRootElement(external_window_Coveo_["ResultListEvents"].newResultDisplayed, function (args) {
            if (Boolean(args.item.getElementsByClassName('CoveoViewedByCustomer').length)) {
                return;
            }
            if (_this.inferResultListLayout() !== ResultLayoutType.TABLE) {
                var resultLastRow = '.coveo-result-row:last-child';
                args.item
                    .querySelector(resultLastRow)
                    .parentNode.appendChild(ViewedByCustomer["a" /* ViewedByCustomer */].getViewedByCustomerResultRowDom(_this.bindings, args.result));
            }
        });
    };
    UserActions.prototype.tagViewsOfUser = function () {
        var _this = this;
        Coveo.$$(this.root).on('buildingQuery', function (e, args) {
            try {
                args.queryBuilder.userActions = {
                    tagViewsOfUser: _this.options.userId,
                };
            }
            catch (e) {
                _this.logger.warn("CreatedBy Email wasn't found", e);
            }
        });
    };
    UserActions.prototype.inferResultListLayout = function () {
        var resultLists = this.root.querySelectorAll(external_window_Coveo_["Component"].computeSelectorForType(external_window_Coveo_["ResultList"].ID) + ":not(.coveo-hidden)");
        var resultListLayoutTypes = [ResultLayoutType.CARD, ResultLayoutType.TABLE, ResultLayoutType.LIST];
        if (resultLists.length > 0 && resultListLayoutTypes.indexOf(resultLists[0].dataset.layout) !== -1) {
            return resultLists[0].dataset.layout;
        }
        return ResultLayoutType.LIST;
    };
    return UserActions;
}(external_window_Coveo_["Component"]));

/**
 * Identifier of the Search-UI component.
 */
UserActions_UserActions.ID = 'UserActions';
UserActions_UserActions.Events = {
    Hide: 'userActionsPanelHide',
    Show: 'userActionsPanelShow',
};
/**
 * Default initialization options of the **UserActions** class.
 */
UserActions_UserActions.options = {
    userId: external_window_Coveo_["ComponentOptions"].buildStringOption({ required: true }),
    buttonLabel: external_window_Coveo_["ComponentOptions"].buildStringOption({
        defaultValue: 'User Actions',
    }),
    summaryLabel: external_window_Coveo_["ComponentOptions"].buildStringOption({
        defaultValue: 'Session Summary',
    }),
    activityLabel: external_window_Coveo_["ComponentOptions"].buildStringOption({
        defaultValue: "User's Recent Activity",
    }),
    viewedByCustomer: external_window_Coveo_["ComponentOptions"].buildBooleanOption({
        defaultValue: true,
    }),
    hidden: external_window_Coveo_["ComponentOptions"].buildBooleanOption({
        defaultValue: false,
    }),
    useResponsiveManager: external_window_Coveo_["ComponentOptions"].buildBooleanOption({
        defaultValue: true,
    }),
};
UserActions_UserActions.USER_ACTION_OPENED = 'coveo-user-actions-opened';
external_window_Coveo_["Initialization"].registerAutoCreateComponent(UserActions_UserActions);



/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Icons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return closeIcon; });
/* harmony import */ var _svg_close_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
/* harmony import */ var _svg_close_svg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_svg_close_svg__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _svg_attach_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40);
/* harmony import */ var _svg_attach_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_attach_svg__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _svg_wait_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(41);
/* harmony import */ var _svg_wait_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_svg_wait_svg__WEBPACK_IMPORTED_MODULE_2__);



/*
 * Underscore template options containing all SVGs
 */
var Icons = {
    closeIcon: _svg_close_svg__WEBPACK_IMPORTED_MODULE_0___default.a,
    attachIcon: _svg_attach_svg__WEBPACK_IMPORTED_MODULE_1___default.a,
    waitIcon: _svg_wait_svg__WEBPACK_IMPORTED_MODULE_2___default.a,
};
var closeIcon = _svg_close_svg__WEBPACK_IMPORTED_MODULE_0___default.a;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\"><path d=\"M.818 2.232L2.232.818l19.02 19.02-1.413 1.415z\"></path><path d=\"M.818 19.768L19.838.748l1.415 1.413L2.232 21.182z\"></path></svg>"

/***/ }),
/* 33 */,
/* 34 */
/***/ (function(module) {

module.exports = JSON.parse("{\"Attached_tooltip\":{\"en\":\"Attached\"},\"Attach_tooltip\":{\"en\":\"Attach\"},\"AttachToCase_displayTooltip\":{\"en\":\"Display tooltip\"},\"AttachToCase_attachToCaseEndpoint\":{\"en\":\"Endpoint\"},\"AttachToCase_readonly\":{\"en\":\"Read only\"}}");

/***/ }),
/* 35 */,
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActionButton; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The _ActionButton_ component is a simple button allowing to show an icon, text, and tooltip.
 *
 * ```html
 * <button class='CoveoActionButton'></button>
 * ```
 */
var ActionButton = /** @class */ (function (_super) {
    __extends(ActionButton, _super);
    function ActionButton(element, options, bindings) {
        var _this = _super.call(this, element, ActionButton.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, ActionButton, options);
        if (_this.options.icon || _this.options.title) {
            _this.render();
        }
        else {
            console.warn('The action button cannot render since no icon nor title is defined.');
            Coveo.$$(_this.element).hide();
        }
        if (_this.options.click) {
            Coveo.$$(element).on('click', function () { return _this.options.click(); });
        }
        return _this;
    }
    /**
     * Updates the button icon.
     * @param icon Markup of the SVG icon to set.
     */
    ActionButton.prototype.updateIcon = function (icon) {
        var iconElement = this.element.querySelector('.coveo-actionbutton_icon');
        if (iconElement && icon && icon != iconElement.innerHTML) {
            iconElement.innerHTML = icon;
        }
    };
    /**
     * Updates the button tooltip.
     * @param tooltip The tooltip to set.
     */
    ActionButton.prototype.updateTooltip = function (tooltip) {
        if (tooltip && tooltip != this.element.title) {
            this.element.title = tooltip;
        }
    };
    ActionButton.prototype.render = function () {
        this.applyButtonStyles();
        if (this.options.icon) {
            this.appendIcon();
        }
        if (this.options.title) {
            this.appendTitle();
        }
        if (this.options.tooltip) {
            this.appendTooltip();
        }
    };
    ActionButton.prototype.applyButtonStyles = function () {
        this.element.classList.add('coveo-actionbutton');
        if (this.options.icon && !this.options.title) {
            this.element.classList.add('coveo-actionbutton-icononly');
        }
    };
    ActionButton.prototype.createIconElement = function () {
        var iconElement = document.createElement('span');
        iconElement.classList.add('coveo-icon', 'coveo-actionbutton_icon');
        iconElement.innerHTML = this.options.icon;
        return iconElement;
    };
    ActionButton.prototype.createTitleElement = function () {
        var titleElement = document.createElement('span');
        titleElement.classList.add('coveo-actionbutton_title');
        titleElement.innerText = this.options.title;
        return titleElement;
    };
    ActionButton.prototype.appendIcon = function () {
        this.element.appendChild(this.createIconElement());
    };
    ActionButton.prototype.appendTitle = function () {
        this.element.appendChild(this.createTitleElement());
    };
    ActionButton.prototype.appendTooltip = function () {
        this.element.title = this.options.tooltip;
    };
    return ActionButton;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

ActionButton.ID = 'ActionButton';
/**
 * The possible options for _ActionButton_.
 * @componentOptions
 */
ActionButton.options = {
    /**
     * Specifies the button label. The text is displayed on a single line, next to the icon.
     *
     * Default is the empty string.
     *
     * ```html
     * <button class='CoveoActionButton' data-title='My Button'></button>
     * ```
     */
    title: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption(),
    /**
     * Specifies the button tooltip text.
     *
     * Default is the empty string.
     *
     * ```html
     * <button class='CoveoActionButton' data-tooltip='My button tooltip'></button>
     * ```
     */
    tooltip: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption(),
    /**
     * Specifies the button SVG icon.
     * Note: The SVG markup has to be HTML encoded when set using the HTML attributes.
     *
     * Default is the empty string.
     *
     * For example, with this SVG markup:
     *
     * ```xml
     * <svg width="1em" height="1em">...</svg>
     * ```
     *
     * The attribute would be set like this:
     *
     * ```html
     * <button class='CoveoActionButton' data-icon='&lt;svg width=&quot;1em&quot; height=&quot;1em&quot;&gt;...&lt;/svg&gt;'></button>
     * ```
     */
    icon: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption(),
    /**
     * Specifies the handler called when the button is clicked.
     *
     * Default is `null`.
     *
     * This option must be set in JavaScript when initializing the component.
     */
    click: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function (s) { return null; }, { required: true }),
};
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(ActionButton);



/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesforceThumbnail; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The _SalesforceThumbnail_ component is used in result templates to display a thumbnail preview for Salesforce content documents.
 *
 * It is included by default in the Document result template.
 *
 * **NOTE:**
 * > Objects without attachments may fail to render a preview. You should only use it for Salesforce Content documents.
 *
 * ```html
 * <span class="CoveoSalesforceThumbnail"></span>
 * ```
 */
var SalesforceThumbnail = /** @class */ (function (_super) {
    __extends(SalesforceThumbnail, _super);
    function SalesforceThumbnail(element, options, bindings, result) {
        var _this = _super.call(this, element, SalesforceThumbnail.ID, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, SalesforceThumbnail, options)) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.result = _this.result || _this.resolveResult();
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].exists(_this.result);
        var thumbnailDiv = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])('div'); // Create a div container
        thumbnailDiv.addClass('coveo-salesforce-thumbnail-container');
        var img = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])('img'); // Create the image to hold the thumbnail
        img.el.setAttribute('width', _this.options.width);
        img.el.setAttribute('height', _this.options.height);
        img.setAttribute('src', _this.getSalesforceThumbnailURI());
        img.addClass('coveo-salesforce-thumbnail-img');
        thumbnailDiv.append(img.el); // Add the image to the div.
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(_this.element).append(thumbnailDiv.el);
        /*
         * If the thumbnail image fails to load, it is either a bad url or the user cannot access the thumbnail url,
         * Replace the thumbnail with a generic File icon to serve as placeholder
         */
        img.one('error', function () {
            var placeholder = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])('span');
            placeholder.addClass(SalesforceThumbnail.SEARCHUI_SALESFORCE_FILE_ICON_CLASS);
            thumbnailDiv.addClass(SalesforceThumbnail.PLACEHOLDER_CLASS);
            thumbnailDiv.append(placeholder.el);
            img.el.style.display = 'none';
        });
        return _this;
    }
    // This returns the salesforce API url to the thumbnail image or undefined if it cannot find the versionId.
    SalesforceThumbnail.prototype.getSalesforceThumbnailURI = function () {
        if (!this.result.raw.sflatestpublishedversionid) {
            return undefined;
        }
        return SalesforceThumbnail.SALESFORCE_THUMBNAIL_URI + "?" + SalesforceThumbnail.RENDITION_SIZE + "&versionId=" + this.result.raw.sflatestpublishedversionid;
    };
    SalesforceThumbnail.ID = 'SalesforceThumbnail';
    SalesforceThumbnail.SALESFORCE_THUMBNAIL_URI = '/sfc/servlet.shepherd/version/renditionDownload';
    SalesforceThumbnail.RENDITION_SIZE = 'rendition=THUMB720BY480';
    SalesforceThumbnail.SEARCHUI_SALESFORCE_FILE_ICON_CLASS = 'coveo-filetype-salesforce-standard-file';
    SalesforceThumbnail.PLACEHOLDER_CLASS = 'coveo-salesforce-thumbnail-placeholder';
    /**
     * The possible options for the Salesforce Thumbnail
     * @componentOptions
     */
    SalesforceThumbnail.options = {
        /**
         * Specifies the width of the thumbnail.
         *
         * Default value is `120px`.
         *
         * ```html
         * <span data-width='120px'></span>
         * ```
         */
        width: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: '120px' }),
        /**
         * Specifies the height of the thumbnail.
         *
         * Default is `auto`, meaning that it scales with the given width.
         *
         * ```html
         * <span data-height='auto'></span>
         * ```
         */
        height: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: 'auto' }),
    };
    SalesforceThumbnail.fields = ['sflatestpublishedversionid'];
    return SalesforceThumbnail;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerComponentFields(SalesforceThumbnail.ID, SalesforceThumbnail.fields);
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(SalesforceThumbnail);


/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" id=\"quick_text\"><path d=\"M12 1.5C5.8 1.5.7 6.2.7 11.9c0 1.8.5 3.5 1.4 5 .1.3.2.5.1.8l-1.5 4c-.1.4.2.7.6.6l4.1-1.5c.2-.1.5-.1.7.1 1.7.9 3.8 1.5 6 1.5 6.2-.1 11.3-4.7 11.3-10.4 0-5.8-5.1-10.5-11.4-10.5zm-5.2 10c0-.2.2-.4.4-.4h7.4c.2 0 .4.2.4.4v1c0 .2-.1.4-.4.4H7.2c-.2 0-.5-.2-.5-.4v-1zM17.4 16c0 .2-.2.4-.5.4H7.2c-.2 0-.5-.2-.5-.4v-.9c0-.2.2-.5.5-.5h9.7c.2 0 .5.2.5.5v.9zm0-7.1c0 .2-.2.5-.5.5H7.2c-.2 0-.5-.2-.5-.5V8c0-.2.2-.4.5-.4h9.7c.2 0 .5.2.5.4v.9z\"></path></svg>"

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SalesforceEnvironment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SalesforceComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesforceAdaptiveResultLink; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Defines the Salesforce environment in which the search interface is currently running.
 */
var SalesforceEnvironment;
(function (SalesforceEnvironment) {
    SalesforceEnvironment["Classic"] = "classic";
    SalesforceEnvironment["LightningConsole"] = "lightning-console";
    SalesforceEnvironment["LightningApp"] = "lightning-app";
    SalesforceEnvironment["LightningCommunity"] = "lightning-community";
    SalesforceEnvironment["Other"] = "other";
    SalesforceEnvironment["NotSet"] = "";
})(SalesforceEnvironment || (SalesforceEnvironment = {}));
/**
 * Defines the Coveo for Salesforce component which is hosting the search interface.
 */
var SalesforceComponent;
(function (SalesforceComponent) {
    SalesforceComponent["AttachedResults"] = "Internal_AttachedResults";
    SalesforceComponent["CaseDeflection"] = "Community_CaseDeflection";
    SalesforceComponent["FullSearch"] = "Internal_FullSearch";
    SalesforceComponent["InsightPanel"] = "Internal_InsightPanel";
    SalesforceComponent["Search"] = "Community_Search";
    SalesforceComponent["Other"] = "other";
    SalesforceComponent["NotSet"] = "";
})(SalesforceComponent || (SalesforceComponent = {}));
/**
 * The _SalesforceAdaptiveResultLink_ is a factory component that chooses which of the _ConsoleResultLink_, _SalesforceResultLink_, or the _ResultLink_ should be used in a given context. The Salesforce environment, the hosting component, and the location of the search result are all taken into consideration to render the component that is best suited to open the result.
 *
 * ```html
 * <a class='CoveoSalesforceAdaptiveResultLink'></a>
 * ```
 */
var SalesforceAdaptiveResultLink = /** @class */ (function (_super) {
    __extends(SalesforceAdaptiveResultLink, _super);
    function SalesforceAdaptiveResultLink(element, options, bindings, result) {
        var _this = _super.call(this, element, SalesforceAdaptiveResultLink.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.result = result;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, SalesforceAdaptiveResultLink, options);
        var createComponent = _this.validateContextOptions(_this.options)
            ? _this.resolveComponentGenerator(_this.options, result)
            : _this.createResultLink;
        _this.innerResultLink = createComponent(element, _this.options, bindings, result);
        return _this;
    }
    SalesforceAdaptiveResultLink.prototype.validateContextOptions = function (options) {
        var invalidOptions = [];
        if (!options.component) {
            invalidOptions.push('component');
        }
        if (!options.environment) {
            invalidOptions.push('environment');
        }
        if (!modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* Id */ "a"].isId(options.sfOrganizationId)) {
            invalidOptions.push('sfOrganizationId');
        }
        if (invalidOptions.length > 0) {
            console.warn("The 'SalesforceAdaptiveResultLink' component has invalid context option values. Please set: " + invalidOptions.join(', '));
        }
        return invalidOptions.length === 0;
    };
    SalesforceAdaptiveResultLink.prototype.resolveComponentGenerator = function (options, result) {
        var generator;
        if (this.shouldCreateConsoleResultLink(options, result)) {
            generator = this.createConsoleResultLink;
        }
        else if (this.shouldCreateSalesforceResultLink(options, result)) {
            generator = this.createSalesforceResultLink;
        }
        else {
            generator = this.createResultLink;
        }
        return generator;
    };
    SalesforceAdaptiveResultLink.prototype.shouldCreateConsoleResultLink = function (options, result) {
        var isInLightningConsole = options.environment === SalesforceEnvironment.LightningConsole;
        var isLocalSalesforceResult = modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceUtilities */ "c"].isLocalSalesforceResult(result, options.sfOrganizationId);
        return isInLightningConsole && isLocalSalesforceResult;
    };
    SalesforceAdaptiveResultLink.prototype.shouldCreateSalesforceResultLink = function (options, result) {
        var isInSalesforce = options.environment !== SalesforceEnvironment.Other;
        var isClassicFullSearch = options.environment === SalesforceEnvironment.Classic && options.component === SalesforceComponent.FullSearch;
        var isLocalSalesforceResult = modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceUtilities */ "c"].isLocalSalesforceResult(result, options.sfOrganizationId);
        var isRemoteSalesforceResult = modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceUtilities */ "c"].isRemoteSalesforceResult(result, options.sfOrganizationId);
        return isInSalesforce && (isLocalSalesforceResult || (isRemoteSalesforceResult && isClassicFullSearch));
    };
    SalesforceAdaptiveResultLink.prototype.createConsoleResultLink = function (element, options, bindings, result) {
        var innerOptions = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* ConsoleResultLink */ "a"]);
        innerOptions.workspaceAPI = options.workspaceAPI;
        element.classList.add(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"].computeCssClassName(modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* ConsoleResultLink */ "a"]));
        return new modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* ConsoleResultLink */ "a"](element, innerOptions, bindings, result);
    };
    SalesforceAdaptiveResultLink.prototype.createSalesforceResultLink = function (element, options, bindings, result) {
        element.classList.add(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"].computeCssClassName(modules_search_ts__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceResultLink */ "a"]));
        return new modules_search_ts__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceResultLink */ "a"](element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, modules_search_ts__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceResultLink */ "a"]), bindings, result);
    };
    SalesforceAdaptiveResultLink.prototype.createResultLink = function (element, options, bindings, result) {
        return new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ResultLink"](element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ResultLink"]), bindings);
    };
    SalesforceAdaptiveResultLink.ID = 'SalesforceAdaptiveResultLink';
    SalesforceAdaptiveResultLink.options = {
        /**
         * Specifies the Salesforce organization ID. It is used to detect if the search result belongs to the current Salesforce organization.
         *
         * ```html
         * <a class='CoveoSalesforceAdaptiveResultLink' data-sf-organization-id='0123456789abcde'></a>
         * ```
         */
        sfOrganizationId: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: '' }),
        /**
         * Specifies the Salesforce environment in which the search interface is running.
         *
         * Default is the empty string. The option must be set explicitly.
         *
         * Allowed values are: `classic`, `lightning-console`, `lightning-app`, `lightning-community`, `other`
         *
         * ```html
         * <a class='CoveoSalesforceAdaptiveResultLink' data-environment='lightning-console'></a>
         * ```
         *
         */
        environment: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: SalesforceEnvironment.NotSet }),
        /**
         * Specified the Coveo for Salesforce component which is hosting the search interface.
         *
         * Default is the empty string. The option must be set explicitly.
         *
         * Allowed values are: `Community_CaseDeflection`, `Community_Search`, `Internal_AttachedResults`, `Internal_FullSearch`, `Internal_InsightPanel`, `other`
         */
        component: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: SalesforceComponent.NotSet }),
    };
    return SalesforceAdaptiveResultLink;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(SalesforceAdaptiveResultLink);
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerComponentFields(SalesforceAdaptiveResultLink.ID, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].getRegisteredFieldsComponentForQuery(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ResultLink"].ID)
    .concat(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].getRegisteredFieldsComponentForQuery(modules_search_ts__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceResultLink */ "a"].ID))
    .concat(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].getRegisteredFieldsComponentForQuery(modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* ConsoleResultLink */ "a"].ID))
    .concat([modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceFields */ "b"].Id, modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* SalesforceFields */ "b"].OrganizationId]));


/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 78.905 77.861\" enable-background=\"new 0 0 78.905 77.861\"><g transform=\"translate(0,-952.36218)\" id=\"g4\"><path d=\"m 71.828,957.626 c 8.674,7.675 9.487,20.969 1.813,29.643 l -37.107,41.941 c -1.098,1.241 -2.994,1.357 -4.235,0.259 -1.241,-1.098 -1.357,-2.994 -0.259,-4.235 l 37.107,-41.941 c 5.541,-6.263 4.968,-15.633 -1.295,-21.174 -6.263,-5.541 -15.633,-4.968 -21.174,1.295 l -38.433,43.439 c -3.338,3.773 -2.996,9.366 0.777,12.704 3.773,3.338 9.366,2.996 12.704,-0.777 l 29.100468,-33.05767 c 1.13279,-1.28683 0.800246,-3.29785 -0.259,-4.235 -1.059246,-0.93715 -3.099,-1.025 -4.235,0.259 0,0 -9.944868,9.86376 -18.793868,20.71177 -1.04,1.275 -3.505,4.666 -6.064,2.563 -2.657,-2.184 0.427,-5.30501 1.57,-6.53801 9.517,-10.268 18.793868,-20.71176 18.793868,-20.71176 3.269,-3.695 9.009,-4.046 12.704,-0.777 3.695,3.27 4.046,9.009 0.777,12.704 L 26.219,1022.756 c -5.472,6.185 -14.989,6.767 -21.174,1.295 -6.185,-5.472 -6.767,-14.989 -1.295,-21.174 l 38.432,-43.439 c 7.678,-8.673 20.972,-9.486 29.646,-1.812 z\"></path></g></svg>"

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = "<svg enable-background=\"new 0 0 18 18\" viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"m16.76 8.051c-.448 0-.855-.303-.969-.757-.78-3.117-3.573-5.294-6.791-5.294s-6.01 2.177-6.79 5.294c-.134.537-.679.861-1.213.727-.536-.134-.861-.677-.728-1.212 1.004-4.009 4.594-6.809 8.731-6.809 4.138 0 7.728 2.8 8.73 6.809.135.536-.191 1.079-.727 1.213-.081.02-.162.029-.243.029z\"></path><path d=\"m9 18c-4.238 0-7.943-3.007-8.809-7.149-.113-.541.234-1.071.774-1.184.541-.112 1.071.232 1.184.773.674 3.222 3.555 5.56 6.851 5.56s6.178-2.338 6.852-5.56c.113-.539.634-.892 1.184-.773.54.112.887.643.773 1.184-.866 4.142-4.57 7.149-8.809 7.149z\"></path></g></svg>"

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ClickedDocumentList; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_UserProfileModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _ExpandableList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _rest_UserProfilingEndpoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _utils_icons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _Strings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};






/**
 * Display the list of the most recent clicked documents of a user.
 */
var ClickedDocumentList = /** @class */ (function (_super) {
    __extends(ClickedDocumentList, _super);
    /**
     * Create an instance of **ClickedDocumentList**. Initialize is needed the **UserProfileModel** and fetch user actions related to the **UserId**.
     *
     * @param element Element on which to bind the component.
     * @param options Initialization options of the component.
     * @param bindings Bindings of the Search-UI environment.
     */
    function ClickedDocumentList(element, options, bindings) {
        var _this = _super.call(this, element, ClickedDocumentList.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, ClickedDocumentList, options);
        if (!_this.options.userId) {
            _this.disable();
            return _this;
        }
        _this.userProfileModel = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["get"])(_this.root, _models_UserProfileModel__WEBPACK_IMPORTED_MODULE_1__[/* UserProfileModel */ "a"]);
        _this.userProfileModel.getActions(_this.options.userId).then(function (actions) {
            _this.sortedDocumentsList = actions
                .filter(function (action) { return action.document && action.type === _rest_UserProfilingEndpoint__WEBPACK_IMPORTED_MODULE_3__[/* UserActionType */ "a"].Click; })
                .sort(function (a, b) { return a.timestamp.getTime() - b.timestamp.getTime(); })
                .reverse()
                .reduce(_this.filterDuplicatesClickAction, [])
                .map(function (action) {
                action.document.searchInterface = _this.searchInterface;
                return action.document;
            });
            _this.render();
        }, _this.logger.error.bind(_this.logger));
        return _this;
    }
    ClickedDocumentList.prototype.filterDuplicatesClickAction = function (accumulator, action) {
        return !accumulator.find(function (existing) { return existing.raw.uri_hash === action.raw.uri_hash; }) ? __spreadArrays(accumulator, [action]) : accumulator;
    };
    ClickedDocumentList.prototype.render = function () {
        var _this = this;
        new _ExpandableList__WEBPACK_IMPORTED_MODULE_2__[/* ExpandableList */ "a"](this.element, this.sortedDocumentsList, {
            maximumItemsShown: this.sortedDocumentsList.length,
            minimumItemsShown: this.options.numberOfItems,
            transform: function (result) {
                coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["QueryUtils"].setStateObjectOnQueryResult(_this.queryStateModel.get(), result);
                coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["QueryUtils"].setSearchInterfaceObjectOnQueryResult(_this.searchInterface, result);
                return _this.options.template.instantiateToElement(result, {
                    wrapInDiv: true,
                    checkCondition: true,
                    currentLayout: 'list',
                    responsiveComponents: _this.searchInterface.responsiveComponents,
                }).then(function (element) {
                    coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].automaticallyCreateComponentsInsideResult(element, result);
                    return element;
                });
            },
            listLabel: this.options.listLabel,
            messageWhenEmpty: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])(ClickedDocumentList.ID + "_no_clicked_documents"),
            showMoreMessage: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])(ClickedDocumentList.ID + "_more"),
            showLessMessage: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])(ClickedDocumentList.ID + "_less"),
        });
    };
    return ClickedDocumentList;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

/**
 * Identifier of the Search-UI component.
 */
ClickedDocumentList.ID = 'ClickedDocumentList';
/**
 * Default initialization options of the **ClickedDocumentList** class.
 */
ClickedDocumentList.options = {
    numberOfItems: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildNumberOption({
        defaultValue: 4,
        min: 1,
    }),
    listLabel: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({
        defaultValue: 'Recent Clicked Documents',
    }),
    userId: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ required: true }),
    template: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildTemplateOption({
        defaultValue: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["HtmlTemplate"].fromString("<div class=\"coveo-list-row\">\n                    <div class=\"coveo-row-icon\">" + _utils_icons__WEBPACK_IMPORTED_MODULE_4__[/* duplicate */ "d"] + "</div>\n                    <a class=\"CoveoResultLink\"/a>\n                </div>", {
            layout: 'list',
        }),
    }),
};
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(ClickedDocumentList);



/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QueryList; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_UserProfileModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _ExpandableList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _utils_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _Strings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};






var DEFAULT_TRANSFORMATION = function () { return function (query) {
    var container = document.createElement('div');
    container.classList.add('coveo-list-row');
    var icon = document.createElement('div');
    icon.classList.add('coveo-row-icon');
    icon.innerHTML = _utils_icons__WEBPACK_IMPORTED_MODULE_3__[/* search */ "e"];
    var link = document.createElement('a');
    link.classList.add('coveo-link');
    link.innerHTML = query;
    container.appendChild(icon);
    container.appendChild(link);
    return Promise.resolve(container);
}; };
/**
 * Display the list of the most recent queries of a user.
 */
var QueryList = /** @class */ (function (_super) {
    __extends(QueryList, _super);
    /**
     * Create an instance of **QueryList**. Initialize is needed the **UserProfileModel** and fetch user actions related to the **UserId**.
     *
     * @param element Element on which to bind the component.
     * @param options Initialization options of the component.
     * @param bindings Bindings of the Search-UI environment.
     */
    function QueryList(element, options, bindings) {
        var _this = _super.call(this, element, QueryList.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, QueryList, options);
        if (!_this.options.userId) {
            _this.disable();
            return _this;
        }
        _this.userProfileModel = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["get"])(_this.root, _models_UserProfileModel__WEBPACK_IMPORTED_MODULE_1__[/* UserProfileModel */ "a"]);
        _this.userProfileModel.getActions(_this.options.userId).then(function (actions) {
            _this.sortedQueryList = __spreadArrays(actions).filter(function (action) { return action.query; })
                .sort(function (a, b) { return a.timestamp.getTime() - b.timestamp.getTime(); })
                .reverse()
                .map(function (action) { return action.query; })
                .reduce(_this.removeDuplicateQueries, []);
            _this.render();
        }, _this.logger.error.bind(_this.logger));
        return _this;
    }
    QueryList.prototype.removeDuplicateQueries = function (acc, query) {
        return acc.indexOf(query) === -1 ? __spreadArrays(acc, [query]) : acc;
    };
    QueryList.prototype.render = function () {
        var _this = this;
        new _ExpandableList__WEBPACK_IMPORTED_MODULE_2__[/* ExpandableList */ "a"](this.element, this.sortedQueryList, {
            maximumItemsShown: this.sortedQueryList.length,
            minimumItemsShown: this.options.numberOfItems,
            transform: function (query) { return _this.options.transform(query).then(_this.makeClickable.bind(_this, query)); },
            listLabel: this.options.listLabel,
            messageWhenEmpty: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])(QueryList.ID + "_no_queries"),
            showMoreMessage: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])(QueryList.ID + "_more"),
            showLessMessage: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])(QueryList.ID + "_less"),
        });
    };
    /**
     * Make a list item element generate a query when click if an omnibox is present.
     * @param query The query to generate.
     * @param listItem  The list item element.
     */
    QueryList.prototype.makeClickable = function (query, listItem) {
        var _this = this;
        var omniboxElement = this.root.querySelector('.CoveoOmnibox');
        if (omniboxElement != null) {
            listItem.addEventListener('click', function () {
                Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["get"])(omniboxElement, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Omnibox"], true).setText(query);
                _this.usageAnalytics.logSearchEvent(_Events__WEBPACK_IMPORTED_MODULE_5__[/* UserActionEvents */ "a"].submit, {});
                _this.queryController.executeQuery();
            });
            listItem.style.cursor = 'pointer';
        }
        return listItem;
    };
    return QueryList;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

/**
 * Identifier of the Search-UI component.
 */
QueryList.ID = 'QueryList';
/**
 * Default initialization options of the **QueryList** class.
 */
QueryList.options = {
    numberOfItems: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildNumberOption({
        defaultValue: 4,
        min: 1,
        required: true,
    }),
    listLabel: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({
        defaultValue: 'Recent Queries',
    }),
    transform: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(DEFAULT_TRANSFORMATION, {
        defaultValue: DEFAULT_TRANSFORMATION(),
    }),
    userId: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ required: true }),
};
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(QueryList);



/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" id=\"Calque_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 90 78.58\" enable-background=\"new 0 0 90 78.58\" xml:space=\"preserve\"><g><path fill=\"none\" d=\"M66.024,56.591c-0.014-0.199,0.001-0.395,0.014-0.592c0.006-0.093-0.001-0.188,0.011-0.279 c0.02-0.148,0.064-0.289,0.099-0.433c0.031-0.131,0.05-0.267,0.094-0.394c0.031-0.092,0.082-0.177,0.119-0.267 c0.07-0.167,0.133-0.337,0.223-0.492c0.068-0.119,0.159-0.225,0.238-0.338c0.081-0.114,0.151-0.236,0.242-0.341 c0.078-0.091,0.175-0.167,0.262-0.252c0.116-0.114,0.225-0.233,0.353-0.334c0.069-0.054,0.15-0.094,0.223-0.144 c0.166-0.114,0.331-0.228,0.513-0.319c0.01-0.005,0.018-0.013,0.028-0.018c8.246-4.05,13.281-12.595,12.827-21.768 C80.666,18.417,70.621,8.828,58.404,8.788L31.757,8.701c-0.024,0-0.051,0-0.075,0c-12.521,0-22.815,10.163-22.966,22.692 L8.704,32.39c-0.076,6.337,2.376,12.267,6.906,16.698c4.53,4.432,10.521,6.773,16.845,6.536l22.463-0.768 c0.076-0.002,0.148,0.015,0.224,0.017c0.212,0.004,0.424,0.013,0.634,0.048c0.027,0.005,0.053,0.014,0.08,0.019 c0.765,0.141,1.504,0.475,2.124,1.033l8.585,7.739l-0.542-7.088C66.022,56.613,66.025,56.603,66.024,56.591z\"></path><path d=\"M89.961,30.191C89.127,13.366,75.278,0.142,58.431,0.088L31.785,0c-0.034,0-0.069,0-0.104,0 C14.419,0,0.223,14.015,0.014,31.291l-0.012,0.996C-0.103,41.024,3.279,49.2,9.525,55.31c5.979,5.847,13.793,9.031,22.109,9.031 c0.372,0,0.745-0.006,1.119-0.019l20.706-0.708l15.36,13.846c0.817,0.736,1.86,1.12,2.915,1.12c0.651,0,1.308-0.147,1.917-0.446 c1.598-0.785,2.556-2.462,2.42-4.236l-1.16-15.169C84.698,52.712,90.537,41.825,89.961,30.191z M57.98,55.974 c-0.62-0.559-1.359-0.892-2.124-1.033c-0.027-0.005-0.053-0.015-0.08-0.019c-0.21-0.035-0.422-0.044-0.634-0.048 c-0.076-0.002-0.148-0.019-0.224-0.017l-22.463,0.768c-6.324,0.237-12.315-2.104-16.845-6.536 c-4.529-4.43-6.982-10.361-6.906-16.698l0.012-0.996C8.867,18.866,19.161,8.703,31.682,8.703c0.024,0,0.051,0,0.075,0L58.404,8.79 c12.218,0.039,22.262,9.629,22.866,21.832c0.454,9.173-4.581,17.718-12.827,21.768c-0.01,0.005-0.018,0.013-0.028,0.018 c-0.182,0.091-0.347,0.205-0.513,0.319c-0.073,0.05-0.154,0.09-0.223,0.144c-0.128,0.1-0.237,0.22-0.353,0.334 c-0.086,0.085-0.183,0.161-0.262,0.252c-0.091,0.106-0.162,0.227-0.242,0.341c-0.079,0.113-0.17,0.219-0.238,0.338 c-0.089,0.156-0.153,0.326-0.223,0.492c-0.037,0.09-0.088,0.174-0.119,0.267c-0.043,0.127-0.062,0.262-0.094,0.394 c-0.035,0.144-0.079,0.286-0.099,0.433c-0.012,0.091-0.005,0.186-0.011,0.279c-0.014,0.197-0.028,0.393-0.014,0.592 c0.001,0.011-0.002,0.022-0.001,0.033l0.542,7.088L57.98,55.974z\"></path></g></svg>"

/***/ }),
/* 45 */
/***/ (function(module) {

module.exports = JSON.parse("{\"ResultActionsPostToFeed_body\":{\"en\":\"Body\"},\"ResultActionsPostToFeed_insertType\":{\"en\":\"Insert Type\"},\"ResultActionsPostToFeed_autoSubmit\":{\"en\":\"Auto Submit\"}}");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" id=\"Calque_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 52 36\" enable-background=\"new 0 0 52 36\" xml:space=\"preserve\"><g><path d=\"M50,0H2C0.896,0,0,0.896,0,2v32c0,1.104,0.896,2,2,2h48c1.104,0,2-0.896,2-2V2C52,0.896,51.104,0,50,0z M44.476,4 L26,19.396L7.524,4H44.476z M4,32V6.27l20.72,17.266C25.09,23.846,25.545,24,26,24c0.455,0,0.91-0.154,1.28-0.464L48,6.27V32H4z\"></path></g></svg>"

/***/ }),
/* 47 */
/***/ (function(module) {

module.exports = JSON.parse("{\"ResultActionsSendEmail_htmlBody\":{\"en\":\"HTML Body\"},\"ResultActionsSendEmail_insertType\":{\"en\":\"Insert Type\"}}");

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ UserActivity_UserActivity; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/time.js

/**
 * Format a date object to a date string that follow the format describe below.
 * > Ex: `Mon, Apr 29, 2019`
 * @param date The date that will be formated.
 * @returns A string formated version of the date.
 */
function formatDate(date) {
    return date.toLocaleDateString('default', {
        weekday: 'short',
        day: '2-digit',
        month: 'short',
        year: 'numeric',
    });
}
/**
 * Format a date object to a short date string that follow the format describe below.
 * > Ex: `Apr 29`
 * @param date The date that will be formated.
 * @returns A string formated version of the date.
 */
function formatDateShort(date) {
    return date.toLocaleDateString('default', {
        day: '2-digit',
        month: 'short',
    });
}
/**
 * Format a date object to a time string that follow the format describe below.
 * > Ex: `12:00:00 PM`
 * @param date The date that will be formated.
 * @returns A string formated version of the time.
 */
function formatTime(date) {
    return date.toLocaleTimeString('default', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
    });
}
/**
 * Format a date object to a short time string that follow the format describe below.
 * > Ex: `12:00 PM`
 * @param date The date that will be formated.
 * @returns A string formated version of the time.
 */
function formatTimeShort(date) {
    return date.toLocaleTimeString('default', {
        hour: '2-digit',
        minute: '2-digit',
    });
}
/**
 * Format a date object to a date and time string that follow the format describe below.
 * > Ex: `Mon, Apr 29, 2019 - 12:00 PM`
 * @param date The date that will be formated.
 * @returns A string formated version of the date and time.
 */
function formatDateAndTime(date) {
    return formatDate(date) + " - " + formatTimeShort(date);
}
/**
 * Format a date object to a date and time string that follow the format describe below.
 * > Ex: `Apr 29 - 12:00 PM`
 * @param date The date that will be formated.
 * @returns A string formated version of the date and time.
 */
function formatDateAndTimeShort(date) {
    return formatDateShort(date) + " - " + formatTimeShort(date);
}
var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var DAY = 24 * HOUR;
var WEEK = 7 * DAY;
/**
 * Format a time interval to a user friendly string format.
 * > Ex: `5 minutes 10 seconds`
 * @param interval The time interval in milliseconds to format in a user friendly fashion.
 */
function formatTimeInterval(interval) {
    var string_index = 1;
    var nb_seconds = Math.floor(Math.round((interval % MINUTE) / SECOND));
    var nb_minutes = Math.floor((interval % HOUR) / MINUTE);
    var nb_hour = Math.floor((interval % DAY) / HOUR);
    var nb_day = Math.floor((interval % WEEK) / DAY);
    var nb_week = Math.floor(interval / WEEK);
    var formater = function (nb, unit) { return nb + " " + unit + (nb === 1 ? '' : 's'); };
    var seconds_str = formater(nb_seconds, Object(external_window_Coveo_["l"])('second'));
    var minutes_str = formater(nb_minutes, Object(external_window_Coveo_["l"])('minute'));
    var hour_str = formater(nb_hour, Object(external_window_Coveo_["l"])('hour'));
    var day_str = formater(nb_day, Object(external_window_Coveo_["l"])('day'));
    var week_str = formater(nb_week, Object(external_window_Coveo_["l"])('week'));
    var time_per_unit = [
        [nb_week, "" + week_str + (nb_day > 0 ? " " + day_str : '')],
        [nb_day, "" + day_str + (nb_hour > 0 ? " " + hour_str : '')],
        [nb_hour, "" + hour_str + (nb_minutes > 0 ? " " + minutes_str : '')],
        [nb_minutes, "" + minutes_str + (nb_seconds > 0 ? " " + seconds_str : '')],
        [nb_seconds, seconds_str],
    ];
    var first_meaningful_tuple = time_per_unit.find(function (_a) {
        var amount = _a[0], _ = _a[1];
        return amount > 0;
    }) || [0, '0 seconds'];
    return first_meaningful_tuple[string_index];
}


// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/models/UserProfileModel.js
var UserProfileModel = __webpack_require__(14);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/icons.js
var icons = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/rest/UserProfilingEndpoint.js
var UserProfilingEndpoint = __webpack_require__(4);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/events.js
var MANUAL_SEARCH_EVENT_CAUSE = Object.freeze([
    'omniboxAnalytics',
    'userActionsSubmit',
    'omniboxFromLink',
    'searchboxAsYouType',
    'searchboxSubmit',
    'searchFromLink',
]);


// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/Strings.js
var Strings = __webpack_require__(26);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/UserActivity.js
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};







var MAIN_CLASS = 'coveo-user-activity';
var CELL_CLASS = 'coveo-cell';
var TITLE_CLASS = 'coveo-title';
var DATA_CLASS = 'coveo-data';
var ORIGIN_CLASS = 'coveo-footer';
var ACTIVITY_TITLE_SECTION = 'coveo-activity-title-section';
var ACTIVITY_TITLE_CLASS = 'coveo-activity-title';
var ACTIVIY_TIMESTAMP_CLASS = 'coveo-activity-timestamp';
var HEADER_CLASS = 'coveo-header';
var ACTIVITY_CLASS = 'coveo-activity';
var CLICK_EVENT_CLASS = 'coveo-click';
var SEARCH_EVENT_CLASS = 'coveo-search';
var CUSTOM_EVENT_CLASS = 'coveo-custom';
var VIEW_EVENT_CLASS = 'coveo-view';
var FOLDED_CLASS = 'coveo-folded';
var TEXT_CLASS = 'coveo-text';
var ICON_CLASS = 'coveo-icon';
var BUBBLE_CLASS = 'coveo-bubble';
var WIDTH_CUTOFF = 350;
var UserActivity_UserActivity = /** @class */ (function (_super) {
    __extends(UserActivity, _super);
    /**
     * Create an instance of the **UserActivity** class. Initialize is needed the **UserProfileModel** and fetch user actions related to the **UserId**.
     *
     * @param element Element on which to bind the component.
     * @param options Initialization options of the component.
     * @param bindings Bindings of the Search-UI environment.
     */
    function UserActivity(element, options, bindings) {
        var _this = _super.call(this, element, UserActivity.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, UserActivity, options);
        if (!_this.options.userId) {
            _this.disable();
            return _this;
        }
        _this.userProfileModel = Object(external_window_Coveo_["get"])(_this.root, UserProfileModel["a" /* UserProfileModel */]);
        _this.userProfileModel.getActions(_this.options.userId).then(function (actions) {
            _this.actions = actions.sort(function (a, b) { return a.timestamp.getTime() - b.timestamp.getTime(); });
            _this.foldedActions = _this.actions.filter(function (action) { return !_this.isUnfoldByDefault(action); });
            _this.render();
        });
        return _this;
    }
    UserActivity.prototype.isUnfoldByDefault = function (action) {
        var isCustom = action.type === UserProfilingEndpoint["a" /* UserActionType */].Custom;
        var isSearch = action.type === UserProfilingEndpoint["a" /* UserActionType */].Search;
        var isClick = action.type === UserProfilingEndpoint["a" /* UserActionType */].Click;
        var cause = (isCustom && action.raw.event_value) || (isSearch && action.raw.cause) || '';
        var useInclude = this.options.unfoldInclude && this.options.unfoldInclude.length > 0;
        var isExcluded = (isSearch || isCustom) && this.options.unfoldExclude.indexOf(cause) !== -1;
        var isIncluded = (isSearch || isCustom) && this.options.unfoldInclude.indexOf(cause) !== -1;
        return isClick || (useInclude && isIncluded) || (!useInclude && !isExcluded);
    };
    UserActivity.prototype.render = function () {
        var panel = document.createElement('div');
        panel.classList.add(MAIN_CLASS);
        var timestampSection = document.createElement('div');
        timestampSection.classList.add(HEADER_CLASS);
        this.buildTimestampSection().forEach(function (el) { return timestampSection.appendChild(el); });
        var activitySection = this.buildActivitySection();
        activitySection.classList.add(ACTIVITY_CLASS);
        panel.appendChild(timestampSection);
        panel.appendChild(activitySection);
        this.element.innerHTML = '';
        this.element.appendChild(panel);
    };
    UserActivity.prototype.buildActivitySection = function () {
        var _this = this;
        var list = document.createElement('ol');
        this.buildListItems(this.actions).forEach(function (listItem, index, array) {
            list.appendChild(listItem);
            if (index < array.length - 1) {
                list.appendChild(_this.buildBubble());
            }
        });
        return list;
    };
    UserActivity.prototype.buildBubble = function () {
        var li = document.createElement('li');
        li.classList.add(BUBBLE_CLASS);
        return li;
    };
    UserActivity.prototype.buildListItems = function (actions) {
        var _this = this;
        var nbUnfoldedActions = this.actions.length - this.foldedActions.length;
        return actions
            .reduce(function (acc, action) {
            var last = acc[acc.length - 1];
            if (_this.foldedActions.indexOf(action) !== -1 && nbUnfoldedActions > 0) {
                if (Array.isArray(last)) {
                    last.push(action);
                    return __spreadArrays(acc);
                }
                else {
                    return __spreadArrays(acc, [[action]]);
                }
            }
            else {
                return __spreadArrays(acc, [action]);
            }
        }, [])
            .map(function (item) {
            if (Array.isArray(item)) {
                return _this.buildFolded(item);
            }
            else {
                return _this.buildListItem(item);
            }
        });
    };
    UserActivity.prototype.buildListItem = function (action) {
        var li;
        switch (action.type) {
            case UserProfilingEndpoint["a" /* UserActionType */].Click:
                li = this.buildClickEvent(action);
                break;
            case UserProfilingEndpoint["a" /* UserActionType */].Search:
                li = this.buildSearchEvent(action);
                break;
            case UserProfilingEndpoint["a" /* UserActionType */].PageView:
                li = this.buildViewEvent(action);
                break;
            default:
            case UserProfilingEndpoint["a" /* UserActionType */].Custom:
                li = this.buildCustomEvent(action);
                break;
        }
        return li;
    };
    UserActivity.prototype.buildFolded = function (actions) {
        var _this = this;
        var li = document.createElement('li');
        li.classList.add(FOLDED_CLASS);
        var hr = document.createElement('hr');
        var span = document.createElement('span');
        span.classList.add(TEXT_CLASS);
        span.innerText = actions.length + " " + (actions.length > 1 ? Object(external_window_Coveo_["l"])(UserActivity.ID + "_other_events") : Object(external_window_Coveo_["l"])(UserActivity.ID + "_other_event"));
        hr.appendChild(span);
        li.addEventListener('click', function () {
            _this.foldedActions = _this.foldedActions.filter(function (action) { return actions.indexOf(action) === -1; });
            _this.render();
        });
        li.appendChild(hr);
        return li;
    };
    UserActivity.prototype.buildClickEvent = function (action) {
        var li = document.createElement('li');
        li.classList.add(CLICK_EVENT_CLASS);
        var dataElement = document.createElement('a');
        dataElement.classList.add(DATA_CLASS);
        dataElement.innerText = (action.document && action.document.title) || '';
        dataElement.href = (action.document && action.document.clickUri) || '';
        document.createAttributeNS('svg', 'svg');
        li.appendChild(this.buildTitleSection(action));
        if (action.document) {
            li.appendChild(dataElement);
        }
        li.appendChild(this.buildOriginElement(action));
        li.appendChild(this.buildIcon(icons["d" /* duplicate */]));
        return li;
    };
    UserActivity.prototype.buildSearchEvent = function (action) {
        var li = document.createElement('li');
        li.classList.add(SEARCH_EVENT_CLASS);
        li.appendChild(this.buildTitleSection(action));
        if (action.query) {
            var dataElement = document.createElement('div');
            dataElement.classList.add(DATA_CLASS);
            dataElement.innerText = action.query || '';
            li.appendChild(dataElement);
        }
        li.appendChild(this.buildOriginElement(action));
        li.appendChild(this.buildIcon(icons["e" /* search */]));
        return li;
    };
    UserActivity.prototype.buildViewEvent = function (action) {
        var li = document.createElement('li');
        li.classList.add(VIEW_EVENT_CLASS);
        var dataElement = document.createElement('div');
        dataElement.classList.add(DATA_CLASS);
        dataElement.innerText = action.raw.content_id_key + ": " + action.raw.content_id_value;
        li.appendChild(this.buildTitleSection(action));
        li.appendChild(dataElement);
        li.appendChild(this.buildOriginElement(action));
        li.appendChild(this.buildIcon(icons["g" /* view */]));
        return li;
    };
    UserActivity.prototype.buildCustomEvent = function (action) {
        var li = document.createElement('li');
        li.classList.add(CUSTOM_EVENT_CLASS);
        var titleElem = document.createElement('div');
        titleElem.classList.add(ACTIVITY_TITLE_CLASS);
        titleElem.innerText = "" + Object(external_window_Coveo_["l"])(action.raw.event_type || UserActivity.ID + "_custom");
        var titleSection = this.buildTitleSection(action);
        titleSection.querySelector("." + ACTIVITY_TITLE_CLASS).remove();
        titleSection.insertBefore(titleElem, titleSection.firstChild);
        var dataElement = document.createElement('div');
        dataElement.classList.add(DATA_CLASS);
        dataElement.innerText = action.raw.event_value || '';
        li.appendChild(titleSection);
        li.appendChild(dataElement);
        li.appendChild(this.buildOriginElement(action));
        li.appendChild(this.buildIcon(icons["c" /* dot */]));
        return li;
    };
    UserActivity.prototype.buildOriginElement = function (action) {
        var el = document.createElement('div');
        el.classList.add(ORIGIN_CLASS);
        el.innerText = action.raw.origin_level_1 || '';
        return el;
    };
    UserActivity.prototype.buildTimestampElement = function (action) {
        var el = document.createElement('div');
        el.classList.add(ACTIVIY_TIMESTAMP_CLASS);
        el.innerText = this.element.offsetWidth > WIDTH_CUTOFF ? formatDateAndTime(action.timestamp) : formatDateAndTimeShort(action.timestamp);
        return el;
    };
    UserActivity.prototype.buildTitleElement = function (action) {
        var title = this.isManualSubmitAction(action) ? 'query' : action.type.toLowerCase();
        var el = document.createElement('div');
        el.classList.add(ACTIVITY_TITLE_CLASS);
        el.innerText = Object(external_window_Coveo_["l"])(UserActivity.ID + "_" + title);
        return el;
    };
    UserActivity.prototype.buildTitleSection = function (action) {
        var titleSection = document.createElement('div');
        titleSection.classList.add(ACTIVITY_TITLE_SECTION);
        titleSection.appendChild(this.buildTitleElement(action));
        titleSection.appendChild(this.buildTimestampElement(action));
        return titleSection;
    };
    UserActivity.prototype.buildIcon = function (icon) {
        var el = document.createElement('div');
        el.classList.add(ICON_CLASS);
        el.innerHTML = icon;
        return el;
    };
    UserActivity.prototype.buildTimestampSection = function () {
        var startDate = this.actions[0];
        var endDate = this.actions[this.actions.length - 1];
        var duration = endDate.timestamp.getTime() - startDate.timestamp.getTime();
        return [
            this.buildTimestampCell({ title: Object(external_window_Coveo_["l"])(UserActivity.ID + "_start_date"), data: formatDate(startDate.timestamp) }),
            this.buildTimestampCell({ title: Object(external_window_Coveo_["l"])(UserActivity.ID + "_start_time"), data: formatTime(startDate.timestamp) }),
            this.buildTimestampCell({ title: Object(external_window_Coveo_["l"])(UserActivity.ID + "_duration"), data: formatTimeInterval(duration) }),
        ];
    };
    UserActivity.prototype.buildTimestampCell = function (_a) {
        var title = _a.title, data = _a.data;
        var cell = document.createElement('div');
        cell.classList.add(CELL_CLASS);
        var titleElement = document.createElement('div');
        titleElement.classList.add(TITLE_CLASS);
        titleElement.innerText = title;
        var dataElement = document.createElement('div');
        dataElement.classList.add(DATA_CLASS);
        dataElement.innerText = data;
        cell.appendChild(titleElement);
        cell.appendChild(dataElement);
        return cell;
    };
    /**
     * Dertermine if an action is a manual search submit.
     * A manual search submit is a Search event that has a query expression and that the cause is one of the above:
     * + **omniboxAnalytics**
     * + **userActionsSubmit**
     * + **omniboxFromLink**
     * + **searchboxAsYouType**
     * + **searchboxSubmit**
     * + **searchFromLink**
     * @param action Action that will be tested.
     */
    UserActivity.prototype.isManualSubmitAction = function (action) {
        return action.type === UserProfilingEndpoint["a" /* UserActionType */].Search && action.raw.query_expression && MANUAL_SEARCH_EVENT_CAUSE.indexOf(action.raw.cause) !== -1;
    };
    return UserActivity;
}(external_window_Coveo_["Component"]));

UserActivity_UserActivity.ID = 'UserActivity';
UserActivity_UserActivity.options = {
    userId: external_window_Coveo_["ComponentOptions"].buildStringOption({ required: true }),
    unfoldInclude: external_window_Coveo_["ComponentOptions"].buildListOption({
        defaultValue: [
            'didyoumeanAutomatic',
            'didyoumeanClick',
            'omniboxAnalytics',
            'omniboxFromLink',
            'searchboxSubmit',
            'searchFromLink',
            'userActionsSubmit',
        ],
        required: true,
    }),
    unfoldExclude: external_window_Coveo_["ComponentOptions"].buildListOption({
        defaultValue: [],
        required: true,
    }),
};
external_window_Coveo_["Initialization"].registerAutoCreateComponent(UserActivity_UserActivity);



/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ ViewedByCustomer_ViewedByCustomer; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/UserActions/UserActions.js + 1 modules
var UserActions = __webpack_require__(30);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/icons.js
var icons = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/translation.js
var translation = __webpack_require__(9);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/ViewedByCustomer/Strings.js

translation["b" /* Translation */].register(translation["a" /* Language */].English, {
    ViewedByCustomer_DefaultLabel: 'Viewed by Customer',
});


// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/ViewedByCustomer/ViewedByCustomer.js
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * The _ViewedByCustomer_  component allows your agents to see, within the Salesforce Lightning console, every result which the user clicked. It displays an icon and a label on each result, if already viewed by the customer who created the case (see [Coveo Component ViewedByCustomer](https://docs.coveo.com/en/3073/coveoforsalesforce/viewedbycustomercomponent)).
 * ```html
 * <div class="CoveoViewedByCustomer"></div>
 * ```
 */
var ViewedByCustomer_ViewedByCustomer = /** @class */ (function (_super) {
    __extends(ViewedByCustomer, _super);
    /**
     * Create an instance of {@link ViewedByCustomer}.
     * @param element Element on which to bind the component.
     * @param options Initialization options of the component.
     * @param bindings Bindings of the Search-UI environment.
     */
    function ViewedByCustomer(element, options, bindings, result) {
        var _this = _super.call(this, element, ViewedByCustomer.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        if (_this.root.getElementsByClassName(external_window_Coveo_["Component"].computeCssClassNameForType(UserActions["a" /* UserActions */].ID)).length === 0) {
            _this.logger.warn('The ViewedByCustomer component has been detected without a UserActions component. You may encounter issues with the former.');
        }
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, ViewedByCustomer, options);
        result = result ? result : _this.resolveResult();
        if (!result) {
            throw new Error('No result found on result component ViewedByCustomer.');
        }
        if (result.isUserActionView) {
            _this.render();
        }
        return _this;
    }
    ViewedByCustomer.prototype.render = function () {
        if (this.options.showIcon) {
            var iconElement = document.createElement('span');
            iconElement.classList.add(ViewedByCustomer.ICON_CLASS);
            iconElement.innerHTML = icons["f" /* user */];
            this.element.appendChild(iconElement);
        }
        var labelElement = document.createElement('span');
        labelElement.classList.add(ViewedByCustomer.LABEL_CLASS);
        labelElement.innerText = this.options.label;
        this.element.appendChild(labelElement);
    };
    /**
     * Generate a ViewedByCustomer in a preformated Dom ready to be inserted in a result
     * @param bindings bindings to be used by the {@link ViewedByCustomer}
     * @param result result to be used by the {@link ViewedByCustomer}
     */
    ViewedByCustomer.getViewedByCustomerResultRowDom = function (bindings, result) {
        var viewedByCustomerRow = document.createElement('div');
        viewedByCustomerRow.classList.add('coveo-result-row');
        var viewedByCustomerCell = document.createElement('div');
        viewedByCustomerCell.classList.add('coveo-result-cell');
        var viewedByCustomerElement = document.createElement('span');
        new ViewedByCustomer(viewedByCustomerElement, undefined, bindings, result);
        viewedByCustomerCell.appendChild(viewedByCustomerElement);
        viewedByCustomerRow.appendChild(viewedByCustomerCell);
        return viewedByCustomerRow;
    };
    return ViewedByCustomer;
}(external_window_Coveo_["Component"]));

/**
 * Unique Identifier used by the Search-UI.
 */
ViewedByCustomer_ViewedByCustomer.ID = 'ViewedByCustomer';
/**
 * Default options used by the component.
 */
ViewedByCustomer_ViewedByCustomer.options = {
    showIcon: external_window_Coveo_["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
    label: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: Object(external_window_Coveo_["l"])(ViewedByCustomer_ViewedByCustomer.ID + "_DefaultLabel") }),
};
// Internal CSS selectors.
ViewedByCustomer_ViewedByCustomer.ICON_CLASS = 'viewed-by-customer-icon';
ViewedByCustomer_ViewedByCustomer.LABEL_CLASS = 'viewed-by-customer-label';
external_window_Coveo_["Initialization"].registerAutoCreateComponent(ViewedByCustomer_ViewedByCustomer);



/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResultActionsPostToFeed; });
/* harmony import */ var _ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22);
/* harmony import */ var utils_Translation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _icon_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44);
/* harmony import */ var _icon_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_icon_svg__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _strings_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(45);
var _strings_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(45, 1);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/**
 * The _ResultActionsPostToFeed_ component is a Result Template component designed to work
 * with the _ResultActionsMenu_ Result Template component.
 *
 * Its main purpose is to insert the current result in a Salesforce Chatter "Post".
 *
 * ```html
 * <div class="CoveoResultActionsMenu">
 *  <div class="CoveoResultActionsPostToFeed"></div>
 * </div>
 * ```
 */
var ResultActionsPostToFeed = /** @class */ (function (_super) {
    __extends(ResultActionsPostToFeed, _super);
    function ResultActionsPostToFeed(element, options, bindings, result) {
        var _this = _super.call(this, element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].initComponentOptions(element, ResultActionsPostToFeed, options), bindings, result) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        // Build the target fields from the component options.
        _this.options.targetFields = {
            Body: {
                value: _this.options.body,
                insertType: _this.options.insertType,
            },
        };
        return _this;
    }
    ResultActionsPostToFeed.ID = 'ResultActionsPostToFeed';
    // The Salesforce quick action name for PostToFeed.
    ResultActionsPostToFeed.actionName = 'FeedItem.TextPost';
    /**
     * The possible options for _ResultActionsPostToFeed_
     * @componentOptions
     */
    ResultActionsPostToFeed.options = {
        quickActionAPI: modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* ResultQuickAction */ "a"].options.quickActionAPI,
        /**
         * Specifies the template that will be inserted in the "body" of the post.
         *
         * Default value is `<b>${title}</b> (${ClickUri})<br /><p><i>"${Excerpt}"</i></p>`.
         *
         * ```html
         * <div data-body='<b>${title}</b> (${ClickUri})<br /><p><i>"${Excerpt}"</i></p>'/>
         * ```
         */
        body: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({
            defaultValue: '<b>${title}</b> (${ClickUri})<br /><p><i>"${Excerpt}"</i></p>',
        }),
        /**
         * Specifies if the component should submit the post right away.
         *
         * Default value is `false`.
         *
         * ```html
         * <div data-auto-submit='true'/>
         * ```
         */
        autoSubmit: modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* ResultQuickAction */ "a"].options.autoSubmit,
        /**
         * Specifies how the component should insert the text in the post.
         * Possible values are `begin`, `end`, `cursor` and `replace`.
         *
         * Default value is `replace`.
         *
         * ```html
         * <div data-insert-type='cursor'/>
         * ```
         */
        insertType: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({ defaultValue: 'replace' }),
        actionName: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({ defaultValue: ResultActionsPostToFeed.actionName }),
        onSendActionEvent: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({ defaultValue: _ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_0__[/* ResultActionsEvents */ "a"].onPostToFeed }),
        icon: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({ defaultValue: _icon_svg__WEBPACK_IMPORTED_MODULE_4___default.a }),
        tooltip: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildCustomOption(function (tooltip) { return tooltip; }, { defaultFunction: function () { return Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["l"])('PostToFeed_tooltip'); } }),
    };
    return ResultActionsPostToFeed;
}(modules_search_ts__WEBPACK_IMPORTED_MODULE_2__[/* ResultQuickAction */ "a"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["Initialization"].registerAutoCreateComponent(ResultActionsPostToFeed);
// Load strings

utils_Translation__WEBPACK_IMPORTED_MODULE_3__[/* Translation */ "a"].register('en', _strings_json__WEBPACK_IMPORTED_MODULE_5___namespace);


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResultActionsSendEmail; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22);
/* harmony import */ var components_search_ui_ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var utils_Translation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _icon_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(46);
/* harmony import */ var _icon_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_icon_svg__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _strings_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(47);
var _strings_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(47, 1);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/**
 * The _ResultActionsSendEmail_ component is a Result Template component designed to work
 * with the _ResultActionsMenu_ Result Template component.
 *
 * Its main purpose is to insert the current result in a Salesforce "Email".
 *
 * ```html
 * <div class="CoveoResultActionsMenu">
 *  <div class="ResultActionsSendEmail"></div>
 * </div>
 * ```
 */
var ResultActionsSendEmail = /** @class */ (function (_super) {
    __extends(ResultActionsSendEmail, _super);
    function ResultActionsSendEmail(element, options, bindings, result) {
        var _this = _super.call(this, element, coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, ResultActionsSendEmail, options), bindings, result) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        // Set the action name to case default if in case and no custom action was specified.
        if (_this.options.actionName === ResultActionsSendEmail.actionName && _this.options.recordType === 'Case') {
            _this.options.actionName = ResultActionsSendEmail.caseActionName;
        }
        // Build the target fields from the component options.
        _this.options.targetFields = {
            HtmlBody: {
                value: _this.options.htmlBody,
                insertType: _this.options.insertType,
            },
        };
        return _this;
    }
    ResultActionsSendEmail.ID = 'ResultActionsSendEmail';
    // The Salesforce quick action name for SendEmail.
    ResultActionsSendEmail.actionName = 'SendEmail';
    ResultActionsSendEmail.caseActionName = 'Case.SendEmail';
    /**
     * The possible options for _ResultActionsSendEmail_
     * @componentOptions
     */
    ResultActionsSendEmail.options = {
        quickActionAPI: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function () { return null; }, { required: true }),
        /**
         * Specifies the template that will be inserted in the "htmlBody" of the Email.
         *
         * Default value is `<a href="${ClickUri}">${title}</a>.`.
         *
         * ```html
         * <div data-html-body='<a href="${ClickUri}">${title}</a>.'/>
         * ```
         */
        htmlBody: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: '<a href="${ClickUri}">${title}</a>.' }),
        /**
         * Specifies how the component should insert the text in the email.
         * Possible values are `begin`, `end`, `cursor` and `replace`.
         *
         * Default value is `replace`.
         *
         * ```html
         * <div data-insert-type='cursor'/>
         * ```
         */
        insertType: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: 'replace' }),
        actionName: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: ResultActionsSendEmail.actionName }),
        onSendActionEvent: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: components_search_ui_ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_2__[/* ResultActionsEvents */ "a"].onSendAsEmail }),
        icon: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: _icon_svg__WEBPACK_IMPORTED_MODULE_4___default.a }),
        tooltip: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function (tooltip) { return tooltip; }, { defaultFunction: function () { return Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('SendAsEmail_tooltip'); } }),
        recordType: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: 'Case' }),
    };
    return ResultActionsSendEmail;
}(modules_search_ts__WEBPACK_IMPORTED_MODULE_1__[/* ResultQuickAction */ "a"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(ResultActionsSendEmail);
// Load strings.

utils_Translation__WEBPACK_IMPORTED_MODULE_3__[/* Translation */ "a"].register('en', _strings_json__WEBPACK_IMPORTED_MODULE_5___namespace);


/***/ }),
/* 52 */,
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CreateArticleButton; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);
/* harmony import */ var _dependencies_coveo_styleguide_dist_svg_CoveoStyleGuideSvg_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20);
var _dependencies_coveo_styleguide_dist_svg_CoveoStyleGuideSvg_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(20, 1);
/* harmony import */ var _CreateArticleHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(24);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * The _CreateArticleButton_ component allows you to create a knowledge article from the current page.
 *
 * ```html
 * <button class='CoveoCreateArticleButton'></button>
 * ```
 */
var CreateArticleButton = /** @class */ (function (_super) {
    __extends(CreateArticleButton, _super);
    function CreateArticleButton(element, options, bindings, result) {
        var _this = _super.call(this, element, CreateArticleButton.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, CreateArticleButton, options);
        _this.createInnerButton();
        return _this;
    }
    Object.defineProperty(CreateArticleButton.prototype, "id", {
        get: function () {
            return CreateArticleButton.ID;
        },
        enumerable: true,
        configurable: true
    });
    CreateArticleButton.prototype.createInnerButton = function () {
        var _this = this;
        new coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_1__[/* ActionButton */ "a"](this.element, {
            tooltip: this.options.tooltip,
            icon: _dependencies_coveo_styleguide_dist_svg_CoveoStyleGuideSvg_json__WEBPACK_IMPORTED_MODULE_2__[/* edit */ "c"],
            click: function () { return _CreateArticleHelper__WEBPACK_IMPORTED_MODULE_3__[/* CreateArticleHelper */ "a"].createArticle(_this, false, _this.options.articleApiName); },
        }, this.bindings);
    };
    CreateArticleButton.ID = 'CreateArticleButton';
    CreateArticleButton.DEFAULT_ARTICLE_API_NAME = 'Knowledge__kav';
    /**
     * The available options for _CreateArticleButton_.
     * @componentOptions
     */
    CreateArticleButton.options = {
        /**
         * Specifies the button tooltip.
         *
         * Default is `Create a knowledge article`
         *
         * ```html
         * <button class='CoveoCreateArticleButton' data-tooltip='Create a knowledge article'></button>
         * ```
         */
        tooltip: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: 'Create a knowledge article' }),
        /**
         * Specifies the Article type to create. Use the API name.
         *
         * Default is `Knowledge__kav`
         *
         * ```html
         * <button class='CoveoCreateArticleButton' data-article-api-name='Topic__kav'></button>
         * ```
         */
        articleApiName: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: CreateArticleButton.DEFAULT_ARTICLE_API_NAME }),
        /**
         * Specifies whether to create the knowledge article in a subtab.
         * Setting this option to `false` opens in a primary tab instead.
         *
         * Default is `true`
         *
         * ```html
         * <button class='CoveoCreateArticleButton' data-open-in-subtab='true'></button>
         * ```
         */
        openInSubtab: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
        workspaceAPI: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function (s) { return null; }),
    };
    return CreateArticleButton;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(CreateArticleButton);


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResultActionsSendLiveAgent; });
/* harmony import */ var components_search_ui_ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var utils_Translation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(18);
/* harmony import */ var _icon_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38);
/* harmony import */ var _icon_svg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_icon_svg__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _strings_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(57);
var _strings_json__WEBPACK_IMPORTED_MODULE_7___namespace = /*#__PURE__*/__webpack_require__.t(57, 1);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};







/**
 * The _ResultActionsSendLiveAgent_ component is a Result Template component designed to work
 * with the _ResultActionsMenu_ Result Template component.
 *
 * Its main purpose is to insert the current result in a Salesforce Live Agent chat window.
 *
 * ```html
 * <div class="CoveoResultActionsMenu">
 *  <div class="CoveoResultActionsSendLiveAgent"></div>
 * </div>
 * ```
 */
var ResultActionsSendLiveAgent = /** @class */ (function (_super) {
    __extends(ResultActionsSendLiveAgent, _super);
    function ResultActionsSendLiveAgent(element, options, bindings, result) {
        var _this = _super.call(this, element, __assign(__assign({}, options), { tooltip: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["l"])('LiveAgent_tooltip'), icon: _icon_svg__WEBPACK_IMPORTED_MODULE_6___default.a }), bindings, result) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.options = __assign(__assign({}, coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].initComponentOptions(element, ResultActionsSendLiveAgent, options)), { tooltip: Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["l"])('LiveAgent_tooltip'), icon: _icon_svg__WEBPACK_IMPORTED_MODULE_6___default.a });
        // Refresh the component on tab focus
        _this.bind.onRootElement(components_search_ui_ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_0__[/* ResultActionsEvents */ "a"].onTabFocused, _this.checkActionExist.bind(_this));
        // In case somebody is trying to put that outside of the InsightPanel.
        if (!_this.options.conversationToolkit) {
            _this.logger.warn('You need to provide the Salesforce ConversationToolkit API for this component to work.');
        }
        else {
            /*
             * Detects if the component should initialize.
             * RecordId should be a LiveChatTranscript object and "getChatLog" should return something (live session).
             */
            if (_this.options.recordId && _this.options.recordId.substr(0, 3) === ResultActionsSendLiveAgent.LiveChatTranscriptObjectPrefix) {
                _this.checkActionExist();
            }
            else {
                _this.deactivate("Unsupported ID prefix " + _this.options.recordId.substr(0, 3));
            }
        }
        return _this;
    }
    /*
     * Detects if the component should initialize.
     * Checks that the action exists
     */
    ResultActionsSendLiveAgent.prototype.checkActionExist = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.options.conversationToolkit.getChatLog({ recordId: this.options.recordId })];
                    case 1:
                        result = _a.sent();
                        if (!result) {
                            throw new Error('Chat log action not found.');
                        }
                        this.init();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.logger.warn(error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ResultActionsSendLiveAgent.prototype.init = function () {
        this.bindEvent();
        _super.prototype.init.call(this);
    };
    ResultActionsSendLiveAgent.prototype.bindEvent = function () {
        this.bind.onRootElement(components_search_ui_ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_0__[/* ResultActionsEvents */ "a"].onChatEnded, this.handleChatEnded.bind(this));
    };
    ResultActionsSendLiveAgent.prototype.handleChatEnded = function () {
        this.logger.info('Chat ended, removing the component.');
        this.element.remove();
        /*
         * We have no way of validate afterward if the chat was ended.
         * (Salesforce let us access de log en send message event when the chat has ended)
         * At least those button will be hidden.
         */
        var ENDED_CHAT = 'coveo-chat-ended';
        if (!this.searchInterface.element.classList.contains(ENDED_CHAT)) {
            this.searchInterface.element.classList.add(ENDED_CHAT);
        }
    };
    ResultActionsSendLiveAgent.prototype.doAction = function () {
        var _this = this;
        var args = {
            recordId: this.options.recordId,
            message: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["StringUtils"].buildStringTemplateFromResult(this.options.text, this.result),
        };
        // This is used to allow clients to hook and edit the arg before sending to Salesforce.
        this.bind.trigger(Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["$$"])(this.root), components_search_ui_ResultActionsMenu_ResultActionsEvents__WEBPACK_IMPORTED_MODULE_0__[/* ResultActionsEvents */ "a"].onSendToLiveAgent, { result: this.result, args: args });
        this.usageAnalytics.logClickEvent(modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_2__[/* UserActionCause */ "a"].sendToLiveAgent, null, this.result, this.root);
        /**
         * In Spring 19 salesforce update, the arguments format for the *SendMessage* method has change from
         * ```typescript
         * interface arguments {
         *   recordId: string;
         *   message: string;
         * }
         * ```
         *
         * to
         *
         * ```typescript
         * interface ISendMessageArgs {
         *   recordId: string;
         *   message: {
         *     text: string;
         *   }
         * }
         * ```
         *
         * Because using the conversation toolkit api before spring 19 was a beta feature, they have the right to break it.
         * To support existing client that are using the live agent with a pre spring 19 salesforce org, we must offer the ability to route to the previous behaviors.
         */
        if (!this.options.useBetaConversationToolkit) {
            args = {
                recordId: args.recordId,
                message: {
                    text: args.message,
                },
            };
        }
        var SEND_LIVE_AGENT_ERROR_MESSAGE = 'An error occured while performing the desired action.';
        this.options.conversationToolkit.sendMessage(args).then(function (result) {
            if (result || _this.options.useBetaConversationToolkit)
                _this.logger.info('Action sent', args);
            else {
                utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceUtilities */ "c"].showToastError(SEND_LIVE_AGENT_ERROR_MESSAGE, 'Failed to send message', _this.logger);
            }
        }, function (error) { return utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceUtilities */ "c"].showToastError(SEND_LIVE_AGENT_ERROR_MESSAGE, error, _this.logger); });
    };
    ResultActionsSendLiveAgent.ID = 'ResultActionsSendLiveAgent';
    /**
     * The possible options for _ResultActionsSendLiveAgent_
     * @componentOptions
     */
    ResultActionsSendLiveAgent.options = {
        conversationToolkit: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildCustomOption(function () { return null; }, { required: true }),
        recordId: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({ defaultValue: null, required: true }),
        useBetaConversationToolkit: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        /**
         * Specifies the template that will be inserted in the "text" of the message.
         *
         * Default value is `${title} ${ClickUri}`.
         *
         * ```html
         * <div data-text='${title} ${ClickUri}'/>
         * ```
         */
        text: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildStringOption({
            defaultValue: '${title} ${ClickUri}',
        }),
    };
    ResultActionsSendLiveAgent.LiveChatTranscriptObjectPrefix = '570';
    return ResultActionsSendLiveAgent;
}(modules_search_ts__WEBPACK_IMPORTED_MODULE_5__[/* ResultAction */ "a"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["Initialization"].registerAutoCreateComponent(ResultActionsSendLiveAgent);
// Load strings

utils_Translation__WEBPACK_IMPORTED_MODULE_4__[/* Translation */ "a"].register('en', _strings_json__WEBPACK_IMPORTED_MODULE_7___namespace);


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ FullSearch_FullSearch; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/components/search-ui/FullSearch/ResponsiveFullSearch.ts


/**
 * ResponsiveFullSearch is responsible to display a responsive button
 * for the FullSearch.
 */
var ResponsiveFullSearch_ResponsiveFullSearch = /** @class */ (function () {
    /**
     * Constructor for ResponsiveFullSearch
     * @param root Root Component
     * @param ID Component identification
     */
    function ResponsiveFullSearch(root, ID) {
        this.root = root;
        this.ID = ID;
    }
    /**
     * Init the FullSearch Componenent to the ResponsiveComponentManager
     * @param root Root component
     * @param Component The full search componenet
     * @param options ResponsiveComponent options
     */
    ResponsiveFullSearch.init = function (root, Component, options) {
        external_window_Coveo_["ResponsiveComponentsManager"].register(ResponsiveFullSearch, Object(external_window_Coveo_["$$"])(root), FullSearch_FullSearch.ID, Component, options);
    };
    /**
     * Register the component to the ResponsiveFullSearch component.
     * @param component The component
     */
    ResponsiveFullSearch.prototype.registerComponent = function (component) {
        if (component.type !== 'FullSearch' || this.fullSearch === component) {
            return false;
        }
        this.fullSearch = component;
        this.buildDropDownHeader();
        return true;
    };
    /**
     * Handle resize events
     */
    ResponsiveFullSearch.prototype.handleResizeEvent = function () {
        var wrapper = Object(external_window_Coveo_["$$"])(this.root).find("." + external_window_Coveo_["ResponsiveComponentsManager"].DROPDOWN_HEADER_WRAPPER_CSS_CLASS);
        if (wrapper !== null) {
            Object(external_window_Coveo_["$$"])(wrapper).append(this.dropDownHeader.element.el);
        }
    };
    ResponsiveFullSearch.prototype.buildDropDownHeader = function () {
        var _this = this;
        var button = Object(external_window_Coveo_["$$"])('a');
        var buttonTitle = Object(external_window_Coveo_["$$"])('p');
        buttonTitle.text(this.fullSearch.options.title);
        button.append(buttonTitle.el);
        this.dropDownHeader = new external_window_Coveo_["ResponsiveDropdownHeader"]('full-search', Object(external_window_Coveo_["$$"])(button));
        button.on('click', function () {
            var dropdown = Object(external_window_Coveo_["$$"])('ol');
            dropdown.addClass('coveo-full-search-dropdown-content');
            _this.fullSearch.create();
        });
    };
    /**
     * As this component exposes a button this option must always return true.
     * The ResponsiveComponentManager will thus create a dropdown wrapper where the button will be inserted.
     */
    ResponsiveFullSearch.prototype.needDropdownWrapper = function () {
        return true;
    };
    return ResponsiveFullSearch;
}());


// EXTERNAL MODULE: ./src/components/search-ui/FullSearch/FullSearchHelper.ts
var FullSearchHelper = __webpack_require__(23);

// CONCATENATED MODULE: ./src/components/search-ui/FullSearch/FullSearch.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



/**
 * The _FullSearch_ component allows your users access to a full length Coveo search page inside the Lightning experience.
 *
 * ```html
 * 	<div class="CoveoFullSearch"></div>
 * ```
 */
var FullSearch_FullSearch = /** @class */ (function (_super) {
    __extends(FullSearch, _super);
    function FullSearch(element, options, bindings, result) {
        var _this = _super.call(this, element, FullSearch.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, FullSearch, options);
        external_window_Coveo_["Assert"].isNotNull(_this.options.workspaceAPI);
        if (_this.options.visible) {
            ResponsiveFullSearch_ResponsiveFullSearch.init(_this.root, _this, {});
        }
        return _this;
    }
    Object.defineProperty(FullSearch.prototype, "id", {
        get: function () {
            return FullSearch.ID;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the markup name for search-ui
     */
    FullSearch.getMarkup = function () {
        var markup = Coveo.$$('div');
        markup.addClass('CoveoFullSearch');
        return markup;
    };
    /**
     * Redirects to the "create" page for the desired Full Search Component Object.
     */
    FullSearch.prototype.create = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FullSearchHelper["a" /* FullSearchHelper */].openFullSearchPage(this)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FullSearch.ID = 'FullSearch';
    /**
     * The possible options for _FullSearch_
     * @componentOptions
     */
    FullSearch.options = {
        /**
         * Specifies the title of the FullSearch button.
         *
         *  Default is `Full Search`
         *
         *  ```html
         *    <div data-title='My Full Search' />
         *  ```
         *
         */
        title: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: 'Full Search' }),
        /**
         * Whether to open the new page in a subtab.
         *
         *  Default is `true`
         *
         *  ```html
         *    <div data-open-in-subtab='false' />
         *  ```
         *
         */
        openInSubtab: external_window_Coveo_["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
        /**
         * Specifies the name of the component to open when clicked
         *
         * 	Default is `CoveoV2__FullSearch`
         *
         *  ```html
         *    <div data-full-search-component='CoveoV2__FullSearch' />
         *  ```
         */
        fullSearchComponentName: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: 'CoveoV2__FullSearch' }),
        /**
         * Specifies the visibility of the component
         *
         *  Default is `true`
         *
         *  ```html
         *    <div data-visible='false'/>
         *  ```
         */
        visible: external_window_Coveo_["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
        pageState: external_window_Coveo_["ComponentOptions"].buildJsonOption({ required: true }),
        workspaceAPI: external_window_Coveo_["ComponentOptions"].buildCustomOption(function (s) { return null; }),
        navigator: external_window_Coveo_["ComponentOptions"].buildCustomOption(function (s) { return null; }),
    };
    return FullSearch;
}(external_window_Coveo_["Component"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(FullSearch_FullSearch);


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MetadataStore; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var modules_insightPanel_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);
/* harmony import */ var modules_insightPanel_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61);
/* harmony import */ var modules_insightPanel_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(55);
/* harmony import */ var modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59);
/* harmony import */ var modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(67);
/* harmony import */ var modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(53);
/* harmony import */ var coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(30);
/* harmony import */ var coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(75);
/* harmony import */ var modules_search_interfaceEditor_InterfaceEditorExtension__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(50);
/* harmony import */ var modules_search_interfaceEditor_InterfaceEditorExtension__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(51);
/* harmony import */ var modules_search_interfaceEditor_InterfaceEditorExtension__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(54);
var _a;





var getComponentSelector = function (component) { return coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"].computeSelectorForType(component.ID); };
var getNumberOf = function (node, selector) { return node.querySelectorAll(selector).length; };
var exist = function (node, selector) { return node.querySelector(selector) != null; };
var FACET_CSS_SELECTOR = [coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Facet"], coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["FacetRange"], coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["FacetSlider"], coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["DynamicFacet"], coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["DynamicFacetRange"], coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["DynamicHierarchicalFacet"]]
    .map(getComponentSelector)
    .join(', ');
var TAB_CSS_SELECTOR = getComponentSelector(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Tab"]);
var TEMPLATE_CSS_SELECTOR = '.result-template';
var BOX_ATTACH_TO_CASE_SELECTOR = getComponentSelector(modules_insightPanel_ts__WEBPACK_IMPORTED_MODULE_1__[/* BoxAttachToCase */ "a"]);
var BOX_CREATE_ARTICLE_SELECTOR = getComponentSelector(modules_insightPanel_ts__WEBPACK_IMPORTED_MODULE_2__[/* BoxCreateArticle */ "a"]) + ":not([data-hidden=\"true\"])";
var USER_ACTIONS_SELECTOR = getComponentSelector(coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_8__[/* UserActions */ "a"]);
var FULLSEARCH_SELECTOR = getComponentSelector(modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_4__[/* FullSearch */ "a"]);
var FULLSEARCH_BUTTON_SELECTOR = getComponentSelector(modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_5__[/* FullSearchButton */ "a"]);
var CREATE_ARTICLE_SELECTOR = getComponentSelector(modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_6__[/* CreateArticle */ "a"]);
var CREATE_ARTICLE_BUTTON_SELECTOR = getComponentSelector(modules_agentPanel_ts__WEBPACK_IMPORTED_MODULE_7__[/* CreateArticleButton */ "a"]);
var COPY_TO_CLIPBOARD_SELECTOR = getComponentSelector(coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_9__[/* CopyToClipboard */ "a"]);
var POST_TO_FEED_SELECTOR = getComponentSelector(modules_search_interfaceEditor_InterfaceEditorExtension__WEBPACK_IMPORTED_MODULE_10__[/* ResultActionsPostToFeed */ "a"]);
var SEND_EMAIL_SELECTOR = getComponentSelector(modules_search_interfaceEditor_InterfaceEditorExtension__WEBPACK_IMPORTED_MODULE_11__[/* ResultActionsSendEmail */ "a"]);
var ATTACH_TO_CASE_SELECTOR = getComponentSelector(modules_insightPanel_ts__WEBPACK_IMPORTED_MODULE_3__[/* AttachToCase */ "a"]);
var SEND_LIVE_AGENT_SELECTOR = getComponentSelector(modules_search_interfaceEditor_InterfaceEditorExtension__WEBPACK_IMPORTED_MODULE_12__[/* ResultActionsSendLiveAgent */ "a"]);
var SEARCH_INTERFACE_SELECTOR = getComponentSelector(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["SearchInterface"]);
/**
 * Metadata store use to store and analyze search interfaces.
 */
var MetadataStore = /** @class */ (function () {
    /**
     * Attach a event listener that add telemetry metadata to the first interfaceLoad event or the first input change event.
     * @param root The root of the search interface to analyze.
     */
    function MetadataStore(root) {
        var _this = this;
        this.root = root;
        this.parser = new DOMParser();
        this.logger = new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Logger"](this);
        this.store = new Map();
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(root).one(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["AnalyticsEvents"].changeAnalyticsCustomData, function (_, args) {
            if (!_this.isLandingEvent(args.actionCause)) {
                return;
            }
            _this.store.forEach(function (value, key) {
                args.metaObject[key] = "" + value;
            });
        });
    }
    MetadataStore.prototype.isLandingEvent = function (actionCause) {
        var isCaseCreation = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(this.root).hasClass('CoveoCaseCreationInterface');
        var isInterfaceLoad = actionCause === coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["analyticsActionCauseList"].interfaceLoad.name;
        var isSearchFromLink = actionCause === coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["analyticsActionCauseList"].searchFromLink.name;
        var isInputChange = actionCause === coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["analyticsActionCauseList"].caseCreationInputChange.name;
        return (isCaseCreation && isInputChange) || isInterfaceLoad || isSearchFromLink;
    };
    /**
     * Analyze a template to extract some metadata.
     *
     * @param root The root HTMLElement to analyze from.
     * @param metrics The metrics to measure.
     */
    MetadataStore.prototype.analyze = function (template, metrics) {
        var _this = this;
        metrics.forEach(function (metric) { var _a, _b; return _this.put(metric, (_b = (_a = MetadataStore.metricDefinitions[metric]) === null || _a === void 0 ? void 0 : _a.calculation) === null || _b === void 0 ? void 0 : _b.call(_a, template)); });
    };
    /**
     * Analyze a template string to extract some metadata.
     *
     * @param root The root HTMLElement to analyze from.
     * @param metrics The metrics to measure.
     */
    MetadataStore.prototype.analyzeString = function (template, metrics) {
        var _this = this;
        metrics.forEach(function (metric) { var _a, _b; return _this.put(metric, (_b = (_a = MetadataStore.metricDefinitions[metric]) === null || _a === void 0 ? void 0 : _a.calculation) === null || _b === void 0 ? void 0 : _b.call(_a, _this.buildDocument(template))); });
    };
    /**
     * Put a metadata key/value pair in the store.
     * @param key The metadata key.
     * @param value The metadata value.
     */
    MetadataStore.prototype.put = function (key, value) {
        var _a;
        if (this.doesMetricExist(key) && this.doesValueMatchType(key, value)) {
            if (typeof value === 'boolean') {
                this.store.set(key, value || ((_a = this.get(key)) !== null && _a !== void 0 ? _a : false));
            }
            else {
                this.store.set(key, value);
            }
        }
    };
    /**
     * Get a metadata key/value pair in the store.
     * @param key The metadata key.
     */
    MetadataStore.prototype.get = function (key) {
        return this.store.get(key);
    };
    MetadataStore.prototype.doesMetricExist = function (metric) {
        var result = MetadataStore.metricDefinitions[metric] != undefined;
        if (!result) {
            this.logger.error(metric, 'Metric does not exist.');
        }
        return result;
    };
    MetadataStore.prototype.doesValueMatchType = function (metric, value) {
        var _a;
        var metricType = (_a = MetadataStore.metricDefinitions[metric]) === null || _a === void 0 ? void 0 : _a.type;
        var result = typeof value === metricType;
        if (!result) {
            this.logger.warn(metric, value, "Value is not a '" + metricType + "'.");
        }
        return result;
    };
    MetadataStore.prototype.buildDocument = function (html) {
        return this.parser.parseFromString("<div>" + html + "</div>", 'application/xml');
    };
    MetadataStore.CLASSIC_METRICS = [
        "nb_of_facets" /* NbOfFacets */,
        "nb_of_tabs" /* NbOfTabs */,
        "nb_of_templates" /* NbOfTemplates */,
        "box_create_article_enabled" /* BoxCreateArticleEnabled */,
        "box_user_actions_enabled" /* BoxUserActionsEnabled */,
    ];
    MetadataStore.CLASSIC_TEMPLATE_METRICS = ["box_attach_to_case_enabled" /* BoxAttachToCaseEnabled */];
    MetadataStore.LIGHTNING_TEMPLATE_METRICS = [
        "copy_to_clipboard_enabled" /* CopyToClipboardEnabled */,
        "post_to_feed_enabled" /* PostToFeedEnabled */,
        "send_email_enabled" /* SendEmailEnabled */,
        "attach_to_case_enabled" /* AttachToCaseEnabled */,
        "send_live_agent_enabled" /* SendLiveAgent */,
    ];
    MetadataStore.LIGHTNING_PAGE_METRICS = [
        "nb_of_facets" /* NbOfFacets */,
        "nb_of_tabs" /* NbOfTabs */,
        "nb_of_templates" /* NbOfTemplates */,
        "fullsearch_enabled" /* FullSearchEnabled */,
        "create_article_enabled" /* CreateArticleEnabled */,
        "user_actions_enabled" /* UserActionsEnabled */,
        "agent_panel_design" /* AgentPanelDesign */,
    ];
    MetadataStore.LIGHTNING_CUSTOM_SCRIPT_METRIC = "is_custom_script_used" /* IsCustomScriptUsed */;
    MetadataStore.metricDefinitions = (_a = {},
        _a["nb_of_facets" /* NbOfFacets */] = { type: 'number', calculation: function (root) { return getNumberOf(root, FACET_CSS_SELECTOR); } },
        _a["nb_of_tabs" /* NbOfTabs */] = { type: 'number', calculation: function (root) { return getNumberOf(root, TAB_CSS_SELECTOR); } },
        _a["nb_of_templates" /* NbOfTemplates */] = { type: 'number', calculation: function (root) { return getNumberOf(root, TEMPLATE_CSS_SELECTOR); } },
        _a["box_attach_to_case_enabled" /* BoxAttachToCaseEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, BOX_ATTACH_TO_CASE_SELECTOR); } },
        _a["box_create_article_enabled" /* BoxCreateArticleEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, BOX_CREATE_ARTICLE_SELECTOR); } },
        _a["box_user_actions_enabled" /* BoxUserActionsEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, USER_ACTIONS_SELECTOR); } },
        _a["is_custom_script_used" /* IsCustomScriptUsed */] = { type: 'boolean' },
        _a["fullsearch_enabled" /* FullSearchEnabled */] = {
            type: 'boolean',
            calculation: function (root) { return exist(root, FULLSEARCH_SELECTOR) || exist(root, FULLSEARCH_BUTTON_SELECTOR); },
        },
        _a["create_article_enabled" /* CreateArticleEnabled */] = {
            type: 'boolean',
            calculation: function (root) { return exist(root, CREATE_ARTICLE_SELECTOR) || exist(root, CREATE_ARTICLE_BUTTON_SELECTOR); },
        },
        _a["user_actions_enabled" /* UserActionsEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, USER_ACTIONS_SELECTOR); } },
        _a["copy_to_clipboard_enabled" /* CopyToClipboardEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, COPY_TO_CLIPBOARD_SELECTOR); } },
        _a["post_to_feed_enabled" /* PostToFeedEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, POST_TO_FEED_SELECTOR); } },
        _a["send_email_enabled" /* SendEmailEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, SEND_EMAIL_SELECTOR); } },
        _a["attach_to_case_enabled" /* AttachToCaseEnabled */] = { type: 'boolean', calculation: function (root) { return exist(root, ATTACH_TO_CASE_SELECTOR); } },
        _a["send_live_agent_enabled" /* SendLiveAgent */] = { type: 'boolean', calculation: function (root) { return exist(root, SEND_LIVE_AGENT_SELECTOR); } },
        _a["agent_panel_design" /* AgentPanelDesign */] = {
            type: 'string',
            calculation: function (root) {
                var _a;
                return ((_a = (root instanceof HTMLElement ? root : root.querySelector(SEARCH_INTERFACE_SELECTOR))) === null || _a === void 0 ? void 0 : _a.getAttribute('data-sf-design')) ||
                    'design undefined';
            },
        },
        _a);
    return MetadataStore;
}());



/***/ }),
/* 57 */
/***/ (function(module) {

module.exports = JSON.parse("{\"ResultActionsSendLiveAgent_text\":{\"en\":\"Text\"}}");

/***/ }),
/* 58 */,
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FullSearchButton; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _FullSearchHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _dependencies_coveo_styleguide_dist_svg_CoveoStyleGuideSvg_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20);
var _dependencies_coveo_styleguide_dist_svg_CoveoStyleGuideSvg_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(20, 1);
/* harmony import */ var coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(36);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * The _FullSearchButton_ component allows to open a full length Coveo search page inside the Lightning experience.
 *
 * ```html
 *   <button class='CoveoFullSearchButton'></button>
 * ```
 */
var FullSearchButton = /** @class */ (function (_super) {
    __extends(FullSearchButton, _super);
    function FullSearchButton(element, options, bindings, result) {
        var _this = _super.call(this, element, FullSearchButton.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, FullSearchButton, options);
        _this.createInnerButton();
        return _this;
    }
    Object.defineProperty(FullSearchButton.prototype, "id", {
        get: function () {
            return FullSearchButton.ID;
        },
        enumerable: true,
        configurable: true
    });
    FullSearchButton.prototype.createInnerButton = function () {
        var _this = this;
        new coveo_search_ui_extensions__WEBPACK_IMPORTED_MODULE_3__[/* ActionButton */ "a"](this.element, {
            tooltip: this.options.tooltip,
            icon: _dependencies_coveo_styleguide_dist_svg_CoveoStyleGuideSvg_json__WEBPACK_IMPORTED_MODULE_2__[/* external */ "d"],
            click: function () { return _FullSearchHelper__WEBPACK_IMPORTED_MODULE_1__[/* FullSearchHelper */ "a"].openFullSearchPage(_this); },
        }, this.bindings);
    };
    FullSearchButton.ID = 'FullSearchButton';
    /**
     * The possible options for _FullSearchButton_
     * @componentOptions
     */
    FullSearchButton.options = {
        /**
         * Specifies the tooltip to display with the button.
         *
         * Default is: `Open search in a new tab`
         *
         * ```html
         *   <button class='CoveoFullSearchButton' data-tooltip='Open search in a new tab'></button>
         * ```
         */
        tooltip: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: 'Open search in a new tab' }),
        /**
         * Whether to open the full search in a subtab.
         *
         * Default is: `true`
         *
         * ```html
         *  <button class='CoveoFullSearchButton' data-open-in-subtab='true'></button>
         * ```
         */
        openInSubtab: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
        /**
         * Specifies the name of the component to open when clicked
         *
         * 	Default is: `CoveoV2__FullSearch`
         *
         *  ```html
         *    <button class='CoveoFullSearchButton' data-full-search-component='CoveoV2__FullSearch'></button>
         *  ```
         */
        fullSearchComponentName: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: 'CoveoV2__FullSearch' }),
        pageState: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildJsonOption({ required: true }),
        workspaceAPI: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function (s) { return null; }),
        navigator: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function (s) { return null; }),
    };
    return FullSearchButton;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(FullSearchButton);


/***/ }),
/* 60 */,
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BoxCreateArticle; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _SalesforceContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* istanbul ignore file */




/**
 * The _BoxCreateArticle_ component allows the use of the Create Article button in the Coveo Insight Panel (see [Adding a Create Article Button to the Insight Panel](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=243)).
 *
 * Use this component inside the `coveo-box-settings` div.
 *
 * ```html
 * <div class="coveo-box-settings">
 *     <a class="CoveoBoxCreateArticle" target="_blank">
 *     </a>
 *     ...
 * </div>
 * ```
 */
var BoxCreateArticle = /** @class */ (function (_super) {
    __extends(BoxCreateArticle, _super);
    function BoxCreateArticle(element, options, bindings) {
        var _this = _super.call(this, element, BoxCreateArticle.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.createArticlePage = '/knowledge/publishing/articleEdit.apexp';
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].initComponentOptions(element, BoxCreateArticle, options);
        if (bindings.isWaitingForRecord) {
            _this.logger.info('Disabling component : No record found', _this);
            jquery__WEBPACK_IMPORTED_MODULE_0__(_this.element).remove();
            return _this;
        }
        if (Object(_SalesforceContext__WEBPACK_IMPORTED_MODULE_2__[/* getSalesforceContext */ "a"])().knowledgeArticleInfos.isKnowledgeEnabled) {
            if (_this.options.articleTypeFilter.length == 0)
                _this.articleTypes = Object(_SalesforceContext__WEBPACK_IMPORTED_MODULE_2__[/* getSalesforceContext */ "a"])().knowledgeArticleInfos.types;
            else
                _this.articleTypes = Object(_SalesforceContext__WEBPACK_IMPORTED_MODULE_2__[/* getSalesforceContext */ "a"])().knowledgeArticleInfos.types.filter(function (type) {
                    return _.contains(_this.options.articleTypeFilter, type.type);
                });
            _this.renderElement();
        }
        else {
            jquery__WEBPACK_IMPORTED_MODULE_0__(_this.element).remove();
        }
        return _this;
    }
    BoxCreateArticle.prototype.bindAction = function (element, articleType) {
        var _this = this;
        this.bindAnalyticsEvent(element);
        if (utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceUtilities */ "c"].isInSalesforceConsole()) {
            element.click(function (e) {
                e.preventDefault();
                utils_SalesforceUtils__WEBPACK_IMPORTED_MODULE_3__[/* SalesforceUtilities */ "c"].focusOrOpenTab(_this.buildHref(articleType), Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["l"])('BoxCreateArticle'), _this.options.openInPrimaryTab);
            });
        }
    };
    BoxCreateArticle.prototype.bindAnalyticsEvent = function (element) {
        var _this = this;
        element.click(function () {
            _this.bindings.usageAnalytics.logCustomEvent({ name: 'createArticle', type: 'box' }, {}, _this.element);
        });
    };
    BoxCreateArticle.prototype.renderElement = function () {
        var _this = this;
        var title = jquery__WEBPACK_IMPORTED_MODULE_0__('<span>').text(Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["l"])('BoxCreateArticle')).appendTo(this.element);
        var icon = jquery__WEBPACK_IMPORTED_MODULE_0__('<span class="coveo-icon coveo-sprites-checkbox-more-values"></span>').appendTo(this.element);
        if (this.articleTypes.length == 0) {
            jquery__WEBPACK_IMPORTED_MODULE_0__(this.element).addClass('coveo-box-create-article-disabled');
            jquery__WEBPACK_IMPORTED_MODULE_0__(this.element).click(function (e) {
                e.preventDefault();
                _this.logger.error('No ArticleTypes provided');
            });
            return;
        }
        if (this.articleTypes.length == 1) {
            jquery__WEBPACK_IMPORTED_MODULE_0__(this.element).attr('href', this.buildHref(this.articleTypes[0].type));
            this.bindAction(jquery__WEBPACK_IMPORTED_MODULE_0__(this.element), this.articleTypes[0].type);
        }
        else {
            var container_1 = jquery__WEBPACK_IMPORTED_MODULE_0__('<div class="coveo-box-create-article-container"></div>').appendTo(this.element);
            var closeTimeout_1;
            jquery__WEBPACK_IMPORTED_MODULE_0__(this.element).mouseenter(function () {
                if (closeTimeout_1) {
                    clearTimeout(closeTimeout_1);
                }
                container_1.addClass('coveo-box-create-article-container-open');
            });
            jquery__WEBPACK_IMPORTED_MODULE_0__(this.element).mouseleave(function () {
                closeTimeout_1 = setTimeout(function () {
                    container_1.removeClass('coveo-box-create-article-container-open');
                }, 100);
            });
            _.each(this.articleTypes, function (articleType, key) {
                var el = jquery__WEBPACK_IMPORTED_MODULE_0__('<a class="coveo-box-create-article-container-link" target="_blank">')
                    .text(articleType.label)
                    .attr('href', _this.buildHref(articleType.type))
                    .appendTo(container_1);
                _this.bindAction(el, articleType.type);
            });
            var leftValue = (jquery__WEBPACK_IMPORTED_MODULE_0__(this.element).width() + 5 - container_1.width()) / 2;
            container_1.css('left', leftValue);
        }
        if (this.options.hidden) {
            jquery__WEBPACK_IMPORTED_MODULE_0__(this.element).addClass('coveo-hidden');
        }
    };
    BoxCreateArticle.prototype.buildHref = function (articleType) {
        return (this.createArticlePage +
            '?retURL=' +
            Object(_SalesforceContext__WEBPACK_IMPORTED_MODULE_2__[/* getSalesforceContext */ "a"])().record.id +
            '&sourceId=' +
            Object(_SalesforceContext__WEBPACK_IMPORTED_MODULE_2__[/* getSalesforceContext */ "a"])().record.id +
            '&sfdc.override=1&type=' +
            articleType);
    };
    /**
     * Changes the page to redirect to when selecting the create article button.
     *
     * By default, the component redirects to `/knowledge/publishing/articleEdit.apexp`.
     *
     * @param page The redirect page URL­.
     *
     * ```js
     * $('.CoveoBoxCreateArticle').coveo('setCreateArticlePage', '/knowledge/publishing/articleEdit.apexp')
     * ```
     */
    BoxCreateArticle.prototype.setCreateArticlePage = function (page) {
        this.createArticlePage = page;
    };
    BoxCreateArticle.ID = 'BoxCreateArticle';
    /**
     * The possible options for BoxCreateArticle
     * @componentOptions
     */
    BoxCreateArticle.options = {
        /**
         * Specifies the Knowledge Article types to offer as options when creating an article.
         *
         * By default, all the available Knowledge Article types are displayed.
         *
         * ```html
         * <a class="CoveoBoxCreateArticle" data-article-type-filter="knowledge__kav,troubleshooting__kav"></a>
         * ```
         */
        articleTypeFilter: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildListOption({ defaultValue: [] }),
        /**
         * Specifies if the component should be hidden from the display.
         *
         * Default value is `true`.
         *
         * ```html
         * <a class="CoveoBoxCreateArticle" data-hidden="true"></a>
         * ```
         */
        hidden: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
        /**
         * Whether to open the created article in a primary tab or, when set to false, to open it in a sub tab.
         *
         * Default value is `true`.
         *
         * ```html
         * <a class="CoveoBoxCreateArticle" data-open-in-primary-tab="false"></a>
         * ```
         */
        openInPrimaryTab: coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
    };
    return BoxCreateArticle;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["Initialization"].registerAutoCreateComponent(BoxCreateArticle);


/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BoxAttachToCase; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var modules_attachToCase_ts_AttachToCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);
/* harmony import */ var modules_common_ts_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(25);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* istanbul ignore file */



/**
 * The _BoxAttachToCase_ component allows you to attach a result to the current Salesforce object. This component normally renders itself inside the {@link BoxResultAction} Component.
 *
 * **Note:**
 * > Your Salesforce users must have `Attached Result` object permissions to be able to use this component (see [Granting Access to Attach to Case Users](http://www.coveo.com/go?dest=cloudhelp&lcid=9&context=159)).
 */
var BoxAttachToCase = /** @class */ (function (_super) {
    __extends(BoxAttachToCase, _super);
    function BoxAttachToCase(element, options, bindings, result) {
        var _this = _super.call(this, element, options, bindings, result) || this;
        _this.element = element;
        _this.options = options;
        _this.result = result;
        $(element).removeClass(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"].computeCssClassNameForType(modules_attachToCase_ts_AttachToCase__WEBPACK_IMPORTED_MODULE_1__[/* AttachToCase */ "a"].ID));
        return _this;
    }
    BoxAttachToCase.getMarkup = function () {
        return $('<div class="CoveoBoxAttachToCase"></div>');
    };
    BoxAttachToCase.prototype.getTitle = function (displayedInline) {
        this.displayedInline = displayedInline;
        this.renderButton();
        if (this.buttonElement != null) {
            return this.buttonElement;
        }
    };
    BoxAttachToCase.prototype.renderButton = function () {
        var _this = this;
        $(this.element).empty();
        this.buttonElement = Object(modules_common_ts_Utils__WEBPACK_IMPORTED_MODULE_2__[/* parseHTML */ "a"])('<div class="coveo-box-attachToCase-view-in-menu"></div>')[0];
        this.textElement = Object(modules_common_ts_Utils__WEBPACK_IMPORTED_MODULE_2__[/* parseHTML */ "a"])('<div class="coveo-caption"></div>')[0];
        this.buttonElement.appendChild(this.textElement);
        this.iconElement = $('<div class="coveo-icon"></div>');
        this.buttonElement.appendChild(this.iconElement[0]);
        Coveo.$$(this.buttonElement).on('click', function () { return _this.handleClick(); });
        this.updateButton();
    };
    BoxAttachToCase.prototype.updateButton = function (sendEvent) {
        if (sendEvent === void 0) { sendEvent = true; }
        this.iconElement.removeClass();
        if (this.loading) {
            this.iconElement.addClass('coveo-icon coveo-attach-to-case-loading');
        }
        else {
            this.iconElement.addClass('coveo-icon coveo-sprites-attach');
        }
        if (this.displayedInline && !this.loading) {
            if (this.isAttached()) {
                this.iconElement.removeClass('coveo-sprites-attach');
                this.iconElement.addClass('coveo-sprites-attached');
            }
            else {
                this.iconElement.removeClass('coveo-sprites-attached');
                this.iconElement.addClass('coveo-sprites-attach');
            }
            this.textElement.innerHTML = '';
        }
        else if (!this.displayedInline) {
            this.textElement.innerText = this.isAttached() ? Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Detach') : Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["l"])('Attach');
            this.iconElement.removeClass('coveo-sprites-attach');
            this.iconElement.removeClass('coveo-sprites-attached');
        }
        if (sendEvent) {
            this.sendStateChangedEvent();
        }
    };
    BoxAttachToCase.ID = 'BoxAttachToCase';
    return BoxAttachToCase;
}(modules_attachToCase_ts_AttachToCase__WEBPACK_IMPORTED_MODULE_1__[/* AttachToCase */ "a"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(BoxAttachToCase);


/***/ }),
/* 63 */,
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChatterThumbnail; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The _ChatterThumbnail_ component is used in result templates to display the Chatter avatar of users.
 *
 * It is included by default in the User result template.
 *
 * ```html
 * <span class="CoveoChatterThumbnail"></span>
 * ```
 */
var ChatterThumbnail = /** @class */ (function (_super) {
    __extends(ChatterThumbnail, _super);
    function ChatterThumbnail(element, options, bindings, result) {
        var _this = _super.call(this, element, ChatterThumbnail.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, ChatterThumbnail, options);
        _this.result = _this.result || _this.resolveResult();
        coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Assert"].exists(_this.result);
        var thumbnailDiv = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])('div'); // Create a div container
        var img = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])('img'); // Create the image to hold the thumbnail
        img.el.style.minWidth = _this.options.width;
        img.el.style.minHeight = _this.options.height;
        img.el.style.maxWidth = _this.options.width;
        img.el.style.maxHeight = _this.options.height;
        img.addClass(ChatterThumbnail.IMG_CLASS);
        thumbnailDiv.append(img.el);
        if (_this.getPhotoUrl()) {
            // If the user doesn't have access to the image or something bad occured.
            img.el.onerror = function () {
                _this.setDefaultImage(img.el);
            };
            img.setAttribute('src', _this.getPhotoUrl());
        }
        else {
            _this.setDefaultImage(img.el);
        }
        // Add the image to the element
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(_this.element).append(thumbnailDiv.el);
        return _this;
    }
    ChatterThumbnail.prototype.setDefaultImage = function (el) {
        var placeholder = Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])('span');
        placeholder.addClass(ChatterThumbnail.USER_SVG_CLASS);
        placeholder.addClass(ChatterThumbnail.THUMBNAIL_PLACEHOLDER_CLASS);
        el.parentElement.appendChild(placeholder.el);
        Object(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["$$"])(el).remove();
    };
    ChatterThumbnail.prototype.getPhotoUrl = function () {
        // Get the smallphotourl (index default field) or sfcreatedbysmallphotourl (express default field)
        return this.result.raw.sfsmallphotourl || this.result.raw.sfcreatedbysmallphotourl || undefined;
    };
    ChatterThumbnail.USER_SVG_CLASS = 'coveo-filetype-salesforce-standard-post';
    ChatterThumbnail.THUMBNAIL_PLACEHOLDER_CLASS = 'coveo-chatter-thumbnail-placeholder';
    ChatterThumbnail.IMG_CLASS = 'coveo-chatter-thumbnail-img';
    ChatterThumbnail.ID = 'ChatterThumbnail';
    /**
     * The possible options for the ChatterThumbnail
     * @componentOptions
     */
    ChatterThumbnail.options = {
        /**
         * Specifies the width of the thumbnail.
         *
         * Defaut value is `45px`.
         *
         * ```html
         * <span width='45px'></span>
         * ```
         */
        width: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: '45px' }),
        /**
         * Specifies the height of the thumbnail.
         *
         * Default value is `45px`.
         *
         * ```html
         * <span height='45px'></span>
         * ```
         */
        height: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildStringOption({ defaultValue: '45px' }),
    };
    return ChatterThumbnail;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerComponentFields(ChatterThumbnail.ID, ['sfsmallphotourl', 'sfcreatedbysmallphotourl']);
coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(ChatterThumbnail);


/***/ }),
/* 65 */,
/* 66 */,
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ CreateArticle_CreateArticle; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/components/search-ui/CreateArticle/ResponsiveCreateArticle.ts


/**
 * ResponsiveCreateArticle is responsible to display a responsive button
 * for the CreateArticle.
 */
var ResponsiveCreateArticle_ResponsiveCreateArticle = /** @class */ (function () {
    function ResponsiveCreateArticle(root, ID) {
        this.root = root;
        this.ID = ID;
        this.createArticles = {};
        this.dropdownHeader = [];
    }
    /**
     * Init the CreateArticle component to the ResponsiveComponentManager.
     * @param root Root component
     * @param component The CreateArticle component
     * @param options ResponsiveComponent options
     */
    ResponsiveCreateArticle.init = function (root, component, options) {
        external_window_Coveo_["ResponsiveComponentsManager"].register(ResponsiveCreateArticle, Object(external_window_Coveo_["$$"])(root), CreateArticle_CreateArticle.ID, component, options);
    };
    /**
     * Register the component to the ResponsiveCreateArticle component.
     * @param accept The component
     */
    ResponsiveCreateArticle.prototype.registerComponent = function (component) {
        var COMPONENT_ID = component.options && component.options.title ? component.options.title.trim() : '';
        if (component instanceof CreateArticle_CreateArticle && !this.createArticles[COMPONENT_ID]) {
            this.createArticles[COMPONENT_ID] = component;
            this.buildDropdownHeader(this.createArticles[COMPONENT_ID]);
            return true;
        }
        return false;
    };
    /**
     * Handle resize events.
     */
    ResponsiveCreateArticle.prototype.handleResizeEvent = function () {
        var wrapper = Object(external_window_Coveo_["$$"])(this.root).find("." + external_window_Coveo_["ResponsiveComponentsManager"].DROPDOWN_HEADER_WRAPPER_CSS_CLASS);
        if (wrapper != null && this.dropdownHeader != null) {
            this.dropdownHeader.map(function (x) { return Object(external_window_Coveo_["$$"])(wrapper).append(x.element.el); });
        }
    };
    /**
     * Builds the dropdown button when required.
     * The button will not have a dropdown if there's only 1 article type.
     */
    ResponsiveCreateArticle.prototype.buildDropdownHeader = function (component) {
        var button = Object(external_window_Coveo_["$$"])('a');
        var buttonTitle = Object(external_window_Coveo_["$$"])('p');
        buttonTitle.text(component.options.title);
        button.append(buttonTitle.el);
        var dropdownHeader = new external_window_Coveo_["ResponsiveDropdownHeader"]('create-article', Object(external_window_Coveo_["$$"])(button));
        this.dropdownHeader.push(dropdownHeader);
        button.on('click', function () {
            var objectTypes = component.options.objectTypes;
            // Only 1 article, nothing special to do.
            if (objectTypes.length == 1) {
                component.create(objectTypes[0].apiName);
                return;
            }
            var dropdown = Object(external_window_Coveo_["$$"])('ol');
            dropdownHeader.element.append(dropdown.el);
            // For each article type, create a link and a handler.
            dropdown.addClass('coveo-create-article-dropdown-content');
            objectTypes.forEach(function (type) {
                var ELEM = Object(external_window_Coveo_["$$"])('li');
                var ELEM_LINK = Object(external_window_Coveo_["$$"])('a');
                ELEM.append(ELEM_LINK.el);
                ELEM_LINK.text(type.name);
                ELEM.on('click', function (e) {
                    e.stopPropagation();
                    component.create(type.apiName);
                    dropdown.remove();
                });
                dropdown.el.appendChild(ELEM.el);
            });
            // To hide the popup when we leave without click.
            dropdown.on('mouseleave', function () {
                dropdown.remove();
            });
        });
    };
    return ResponsiveCreateArticle;
}());


// EXTERNAL MODULE: ./src/components/search-ui/CreateArticle/CreateArticleHelper.ts
var CreateArticleHelper = __webpack_require__(24);

// CONCATENATED MODULE: ./src/components/search-ui/CreateArticle/CreateArticle.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



/**
 * The _CreateArticle_ component allows you to create an Article from the current page using Salesforce.
 *
 * ```html
 * <div class="CoveoCreateArticle"></div>
 * ```
 *
 * You can also specify multiple type of Article to create using the `articleTypes` property.
 *
 * ```javascript
 *  Coveo.option(root, {
 *    CreateArticle: {
 *      articleTypes: [
 *          {name: "Knowledge", apiName: "Knowledge__kav"},
 *          {name: "Documentation", apiName: "Documentation__kav"}
 *      ]
 *    }
 *  })
 * ```
 */
var CreateArticle_CreateArticle = /** @class */ (function (_super) {
    __extends(CreateArticle, _super);
    function CreateArticle(element, options, bindings, result) {
        var _this = _super.call(this, element, CreateArticle.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, CreateArticle, options);
        external_window_Coveo_["Assert"].isNotNull(_this.options.workspaceAPI);
        external_window_Coveo_["Assert"].isLargerThan(0, _this.options.objectTypes.length);
        ResponsiveCreateArticle_ResponsiveCreateArticle.init(_this.root, _this, {});
        return _this;
    }
    Object.defineProperty(CreateArticle.prototype, "id", {
        get: function () {
            return CreateArticle.ID;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Redirects to the "create" page for the desired KB Object.
     * @param apiName API Name of the KB Object.
     */
    CreateArticle.prototype.create = function (apiName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, CreateArticleHelper["a" /* CreateArticleHelper */].createArticle(this, this.options.useDefault, apiName)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CreateArticle.ID = 'CreateArticle';
    /**
     * The possible options for _CreateArticle_
     * @componentOptions
     */
    CreateArticle.options = {
        /**
         * Specifies the title of the CreateArticle button.
         *
         * Default is `Create Article`
         *
         * ```html
         *   <div data-title='New Article' />
         *  ```
         */
        title: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: 'Create Article' }),
        /**
         * Whether to open the new page in a subtab.
         *
         * Default is `true`
         *
         * ```html
         *   <div data-open-in-subtab='true' />
         *  ```
         */
        openInSubtab: external_window_Coveo_["ComponentOptions"].buildBooleanOption({ defaultValue: true }),
        /**
         * Whether to use the default article type.
         *
         * Default is `false`
         *
         * ```html
         *   <div data-use-default='true' />
         *  ```
         */
        useDefault: external_window_Coveo_["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        /**
         * Specifies the list of objects that the component can create.
         *
         * Default is `[{ "name": "Knowledge", "apiName": "Knowledge__kav" }]`
         *
         * ```html
         *   <div data-object-types="[{ &#x22;name&#x22;: &#x22;Knowledge&#x22;, &#x22;apiName&#x22;: &#x22;Knowledge__kav&#x22; }]" />
         *  ```
         */
        objectTypes: external_window_Coveo_["ComponentOptions"].buildCustomOption(function (s) { return JSON.parse(s); }, {
            defaultValue: [{ name: 'Knowledge', apiName: 'Knowledge__kav' }],
        }),
        workspaceAPI: external_window_Coveo_["ComponentOptions"].buildCustomOption(function (s) { return null; }),
    };
    return CreateArticle;
}(external_window_Coveo_["Component"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(CreateArticle_CreateArticle);


/***/ }),
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Environment; });
/**
 * Indirection class for environment reference like `window.location`.
 */
var Environment = /** @class */ (function () {
    function Environment() {
    }
    /**
     * Reset all reference to their default value.
     */
    Environment.reset = function () {
        Environment.location = window.location;
    };
    /**
     * Reference the current location.
     * Default: `window.location`.
     */
    Environment.location = window.location;
    return Environment;
}());



/***/ }),
/* 72 */,
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CommunityStateManager; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_Community__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


// Specific search term that is considered only made by the Standalone Searchbox.
var SSB_SIGNAL = '@uri';
/**
 * The _CommunityStateManager_ component is used to connect your Lightning search component to the Coveo Standalone Searchbox (see [Including the Standalone Searchbox in Your Community](https://developers.coveo.com/x/lRwvAg)).
 *
 * This component is used in a Lightning search page, in the `coveo-search-section`, as such:
 *
 * ```html
 * <div class="coveo-search-section">
 *   <div class="CoveoCommunityStateManager"></div>
 * </div>
 * ```
 */
var CommunityStateManager = /** @class */ (function (_super) {
    __extends(CommunityStateManager, _super);
    /*
     * This class is used to handle the q part of the state and inject it inside que query "Expression".
     */
    function CommunityStateManager(element, options, bindings) {
        var _this = _super.call(this, element, CommunityStateManager.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, CommunityStateManager, options);
        _this.bind.onRootElement(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["QueryEvents"].buildingQuery, function (args) { return _this.handleBuildingQuery(args); });
        return _this;
    }
    CommunityStateManager.prototype.handleBuildingQuery = function (args) {
        var salesforceQuery = this.getSalesforceQuery();
        if (salesforceQuery === SSB_SIGNAL || salesforceQuery === '') {
            new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["QueryboxQueryParameters"](this.options).addParameters(args.queryBuilder, this.queryStateModel.get('q'));
        }
        else {
            new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["QueryboxQueryParameters"](this.options).addParameters(args.queryBuilder, salesforceQuery);
        }
    };
    CommunityStateManager.prototype.getSalesforceQuery = function () {
        /**
         * In the builder *special* domain, the default query may be a query like "Example Search Term".
         */
        if (utils_Community__WEBPACK_IMPORTED_MODULE_1__[/* Community */ "a"].isExampleSearchTerm()) {
            return SSB_SIGNAL;
        }
        return utils_Community__WEBPACK_IMPORTED_MODULE_1__[/* Community */ "a"].salesforceQuery;
    };
    CommunityStateManager.ID = 'CommunityStateManager';
    /**
     * The option for the CommunityStateManager component
     * @componentOptions
     */
    CommunityStateManager.options = {
        /**
         * Performs the same function as the Querybox option of the same name (see [Querybox - enableLowercaseOperators](https://coveo.github.io/search-ui/components/querybox.html#options.enablelowercaseoperators)).
         *
         * ```html
         * <div data-enable-lowercase-operators="false"></div>
         * ```
         */
        enableLowercaseOperators: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Querybox"].options.enableLowercaseOperators,
        /**
         * Performs the same function as the Querybox option of the same name (see [Querybox - enablePartialMatch](https://coveo.github.io/search-ui/components/querybox.html#options.enablepartialmatch)).
         *
         * ```html
         * <div data-enable-partial-match="false"></div>
         * ```
         */
        enablePartialMatch: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Querybox"].options.enablePartialMatch,
        /**
         * Performs the same function as the Querybox option of the same name (see [Querybox - enableQuerySyntax](https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax)).
         *
         * ```html
         * <div data-enable-query-syntax="true"></div>
         * ```
         */
        enableQuerySyntax: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Querybox"].options.enableQuerySyntax,
        /**
         * Performs the same function as the Querybox option of the same name (see [Querybox - enableQuestionMarks](https://coveo.github.io/search-ui/components/querybox.html#options.enablequestionmarks)).
         *
         * ```html
         * <div data-enable-question-marks="false"></div>
         * ```
         */
        enableQuestionMarks: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Querybox"].options.enableQuestionMarks,
        /**
         * Performs the same function as the Querybox option of the same name (see [Querybox - enableWildcards](https://coveo.github.io/search-ui/components/querybox.html#options.enablewildcards)).
         *
         * ```html
         * <div data-enable-wildcards="false"></div>
         * ```
         */
        enableWildcards: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Querybox"].options.enableWildcards,
        /**
         * Performs the same function as the Querybox option of the same name (see [Querybox - partialMatchThreshold](https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold)).
         *
         * This feature is only available to Coveo for Salesforce Pro and Enterprise users.
         *
         * ```html
         * <div data-partial-match-keywords="5"></div>
         * ```
         */
        partialMatchKeywords: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Querybox"].options.partialMatchKeywords,
        /**
         * Performs the same function as the Querybox option of the same name (see [Querybox - partialMatchThreshold](https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold)).
         *
         * ```html
         * <div data-partial-match-threshold="50%"></div>
         * ```
         */
        partialMatchThreshold: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Querybox"].options.partialMatchThreshold,
    };
    return CommunityStateManager;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Component"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(CommunityStateManager);


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Community; });
/* harmony import */ var _Environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

// Regex that test if whether or not an url correspond to a builder or a preview.
var BUILDER_OR_PREVIEW = /(--(preview|live)|(live|site)preview|\.preview\.)/;
// Query made by default inside the salesforce builder.
var SALESFORCE_EXAMPLE_QUERY = 'Example search term';
/**
 * Helper class for lightning community related utils.
 */
var Community = /** @class */ (function () {
    function Community() {
    }
    Object.defineProperty(Community, "defaultSearchExpression", {
        /**
         * Query made by default inside the salesforce builder.
         */
        get: function () {
            return 'Example search term';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Community, "salesforceQuery", {
        /**
         * The query part of the search page url.
         */
        get: function () {
            return decodeURIComponent(_Environment__WEBPACK_IMPORTED_MODULE_0__[/* Environment */ "a"].location.pathname.split(/\/(global-)?search\//)[2] || '');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Tell whether or not we are on the salesforce Example search term page.
     */
    Community.isExampleSearchTerm = function () {
        return Community.isInBuilderOrPreview() && Community.salesforceQuery === SALESFORCE_EXAMPLE_QUERY;
    };
    /**
     * Tell whether or not the url is a Community builder or a Community preview.
     */
    Community.isInBuilderOrPreview = function () {
        return BUILDER_OR_PREVIEW.test(_Environment__WEBPACK_IMPORTED_MODULE_0__[/* Environment */ "a"].location.origin);
    };
    return Community;
}());



/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ CopyToClipboard_CopyToClipboard; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/ResultAction/ResultAction.js
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The base class for all ResultAction components.
 * Its main responsibility is handling the visual elements of the Result Action.
 */
var ResultAction_ResultAction = /** @class */ (function (_super) {
    __extends(ResultAction, _super);
    /**
     * Construct a ResultAction component.
     * @param element The HTML element bound to this component.
     * @param options The options that can be provided to this component.
     * @param bindings The bindings, or environment within which this component exists.
     * @param queryResult The result of the query in which this resultAction exists.
     */
    function ResultAction(element, options, bindings, queryResult) {
        var _this = _super.call(this, element, ResultAction.ID, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.queryResult = queryResult;
        _this.isInitialized = false;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, ResultAction, options);
        _this.queryResult = _this.queryResult || _this.resolveResult();
        // Hide until initialized.
        Object(external_window_Coveo_["$$"])(_this.element).addClass('coveo-hidden');
        _this.bind.on(_this.element, 'click', function () { return _this.doAction(); });
        return _this;
    }
    /**
     * Initializes the component if it is not already initialized.
     */
    ResultAction.prototype.init = function () {
        if (!this.isInitialized) {
            this.show();
            this.isInitialized = true;
        }
        else {
            this.logger.debug('Attempted to initialize ResultAction that was already initialized.');
        }
    };
    /**
     * Deactivate the component if it is initialized.
     * @param e The reason for the deactivation.
     */
    ResultAction.prototype.deactivate = function (e) {
        Object(external_window_Coveo_["$$"])(this.element).remove();
        this.logger.warn(e);
        this.isInitialized = false;
    };
    /**
     * Make the result action button visible.
     */
    ResultAction.prototype.show = function () {
        Object(external_window_Coveo_["$$"])(this.element).removeClass('coveo-hidden');
        if (this.options.icon) {
            var icon = document.createElement('span');
            icon.innerHTML = this.options.icon;
            icon.className = 'coveo-icon';
            this.element.appendChild(icon);
        }
        if (this.options.tooltip) {
            var tooltip = document.createElement('span');
            tooltip.innerText = this.options.tooltip;
            tooltip.className = 'coveo-caption-for-icon';
            this.element.appendChild(tooltip);
        }
    };
    return ResultAction;
}(external_window_Coveo_["Component"]));

ResultAction_ResultAction.ID = 'ResultAction';
/**
 * The possible options for _ResultAction_.
 * @componentOptions
 */
ResultAction_ResultAction.options = {
    /**
     * See {@link IResultActionOptions.icon}
     * Optional. You may instead provide the icon by appending it as a child element.
     */
    icon: external_window_Coveo_["ComponentOptions"].buildStringOption(),
    /**
     * See {@link IResultActionOptions.tooltip}
     * Optional. If no tooltip is provided, the tooltip popup will not appear.
     */
    tooltip: external_window_Coveo_["ComponentOptions"].buildStringOption(),
};


// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/icons.js
var icons = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/utils/translation.js
var translation = __webpack_require__(9);

// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/CopyToClipboard/Strings.js

translation["b" /* Translation */].register(translation["a" /* Language */].English, {
    CopyToClipboard_copy: 'Copy',
    CopyToClipboard_copied: 'Copied!',
});


// CONCATENATED MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/CopyToClipboard/CopyToClipboard.js
var CopyToClipboard_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




var CopyToClipboard_CopyToClipboard = /** @class */ (function (_super) {
    CopyToClipboard_extends(CopyToClipboard, _super);
    /**
     * Construct a ResultAction component.
     * @param element The HTML element bound to this component.
     * @param options The options that can be provided to this component.
     * @param bindings The bindings, or environment within which this component exists.
     * @param result The result of the query in which this resultAction exists.
     */
    function CopyToClipboard(element, options, bindings, result) {
        var _this = _super.call(this, element, external_window_Coveo_["ComponentOptions"].initComponentOptions(element, CopyToClipboard, options), bindings, result) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        _super.prototype.init.call(_this);
        return _this;
    }
    CopyToClipboard.prototype.doAction = function () {
        this.usageAnalytics.logClickEvent({ name: 'copyToClipboard', type: 'resultAction' }, {}, this.result, this.element);
        this.copyToClipboard(external_window_Coveo_["StringUtils"].buildStringTemplateFromResult(this.options.template, this.result));
    };
    CopyToClipboard.prototype.copyToClipboard = function (text) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(navigator && navigator.clipboard && navigator.clipboard.writeText)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, navigator.clipboard.writeText(text)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        this.logger.error('Copy to clipboard failed.', text, err_1);
                        this.copyToClipboardFallback(text);
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        this.copyToClipboardFallback(text);
                        _a.label = 6;
                    case 6:
                        this.setToolipText(this.options.successTooltip);
                        this.refreshTooltip();
                        return [2 /*return*/];
                }
            });
        });
    };
    CopyToClipboard.prototype.refreshTooltip = function () {
        var _this = this;
        setTimeout(function () { return _this.setToolipText(_this.options.tooltip); }, 500);
    };
    CopyToClipboard.prototype.setToolipText = function (text) {
        var tooltipElement = this.element.querySelector('.coveo-caption-for-icon');
        if (tooltipElement && text) {
            tooltipElement.innerText = text;
        }
    };
    /**
     * Sadly that's the only way of doing in in IE11 and in lockerservice.
     */
    CopyToClipboard.prototype.copyToClipboardFallback = function (text) {
        var el = document.createElement('textarea');
        el.value = text;
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
    };
    return CopyToClipboard;
}(ResultAction_ResultAction));

CopyToClipboard_CopyToClipboard.ID = 'CopyToClipboard';
/**
 * The possible options for _ResultAction_.
 * @componentOptions
 */
CopyToClipboard_CopyToClipboard.options = {
    icon: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: icons["b" /* copy */] }),
    tooltip: external_window_Coveo_["ComponentOptions"].buildCustomOption(function (tooltip) { return tooltip; }, { defaultFunction: function () { return Object(external_window_Coveo_["l"])('CopyToClipboard_copy'); } }),
    successTooltip: external_window_Coveo_["ComponentOptions"].buildCustomOption(function (tooltip) { return tooltip; }, { defaultFunction: function () { return Object(external_window_Coveo_["l"])('CopyToClipboard_copied'); } }),
    template: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: '${title}\n${clickUri}' }),
};
external_window_Coveo_["Initialization"].registerComponentFields(CopyToClipboard_CopyToClipboard.ID, ['title', 'clickUri']);
external_window_Coveo_["Initialization"].registerAutoCreateComponent(CopyToClipboard_CopyToClipboard);



/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AttachedResultsTab; });
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);
/* harmony import */ var modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var modules_search_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var AttachedResultsTab = /** @class */ (function (_super) {
    __extends(AttachedResultsTab, _super);
    function AttachedResultsTab(element, options, bindings) {
        var _this = _super.call(this, element, options, bindings) || this;
        _this.element = element;
        _this.options = options;
        _this.options = coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].initComponentOptions(element, AttachedResultsTab, options);
        $(_this.root).on(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["QueryEvents"].doneBuildingQuery, $.proxy(_this.handleDoneBuildingQueryForAttachedResults, _this));
        _this.attachToCaseEndpoint = _this.options.attachToCaseEndpoint();
        _this.bind.on(window, modules_common_ts_UserActionEvents__WEBPACK_IMPORTED_MODULE_2__[/* UserActionEvents */ "b"].attachedResultChange, function (args) {
            return _this.handleAttachedResultChangeEvent(args);
        });
        return _this;
    }
    AttachedResultsTab.prototype.setAttachToCaseEndpoint = function (endpoint) {
        if (endpoint != null) {
            this.attachToCaseEndpoint = endpoint;
        }
    };
    AttachedResultsTab.prototype.handleAttachedResultChangeEvent = function (args) {
        if (modules_search_ts__WEBPACK_IMPORTED_MODULE_3__[/* Id */ "a"].equal(this.attachToCaseEndpoint.caseId, args.caseId)) {
            var data = this.attachToCaseEndpoint.data;
            data.attachedResults = args.attachedResults;
        }
    };
    AttachedResultsTab.prototype.handleDoneBuildingQueryForAttachedResults = function (e, args) {
        var _a;
        if (!this.disabled && this.isSelected() && ((_a = this.attachToCaseEndpoint) === null || _a === void 0 ? void 0 : _a.data)) {
            var data = this.attachToCaseEndpoint.data;
            var expressionBuilder = new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ExpressionBuilder"]();
            expressionBuilder.add(_AttachToCaseUtils__WEBPACK_IMPORTED_MODULE_1__[/* getExpressions */ "b"](data.attachedResults));
            if (this.options.expression) {
                expressionBuilder.add(this.options.expression);
            }
            /*
             * We need to clean the constant and advanced expression in
             * order to remove the context and other customizations
             * that would prevent this component from working.
             */
            if (this.options.constant) {
                args.queryBuilder.constantExpression = expressionBuilder;
                args.queryBuilder.advancedExpression = new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ExpressionBuilder"]();
            }
            else {
                args.queryBuilder.constantExpression = new coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ExpressionBuilder"]();
                args.queryBuilder.advancedExpression = expressionBuilder;
            }
        }
    };
    AttachedResultsTab.ID = 'AttachedResultsTab';
    /**
     * The possible options for AttachedResultsTab
     * @componentOptions
     */
    AttachedResultsTab.options = {
        attachToCaseEndpoint: coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["ComponentOptions"].buildCustomOption(function () { return window['attachToCaseEndpoint']; }, {
            defaultFunction: function () { return function () { return window['attachToCaseEndpoint']; }; },
        }),
    };
    return AttachedResultsTab;
}(coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Tab"]));

coveo_search_ui__WEBPACK_IMPORTED_MODULE_0__["Initialization"].registerAutoCreateComponent(AttachedResultsTab);


/***/ }),
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ ProductMedia_ProductMedia; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// EXTERNAL MODULE: ./src/utils/SalesforceUtils.ts
var SalesforceUtils = __webpack_require__(2);

// CONCATENATED MODULE: ./src/components/search-ui/ProductMedia/StaticResourceCache.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * The StaticResourceCache object is a singleton instance for batching calls to resolve paths to Static Resources.
 * The results are kept in memory to speed up subsequent requests.
 */
var StaticResourceCache = /** @class */ (function () {
    function StaticResourceCache() {
        this.resourcesToGet = new Set([]);
        this.resourceUris = new Object();
        this.delay = 10;
        /**
         * Callback function to be passed to RemoteAction.
         * Resolves the deferred promise once the call returns successfully and cache is updated.
         * @param resolve
         * @param reject
         * @param result The result returned from the RemoteAction
         * @param event The event returned from the RemoteAction
         */
        this.callback = function (result, event) {
            var cache = StaticResourceCache.Instance;
            if (!event.status) {
                cache.activeDeferred.reject(event.message);
            }
            for (var key in result) {
                cache.updateUri(key, result[key]);
            }
            cache.activeDeferred.resolve();
        };
    }
    /**
     * Launches RemoteAction invocation query to resolve static resource Uris on timeout.
     * If another query comes in before timeout, timeout is reset.
     */
    StaticResourceCache.prototype.resolveResourceUris = function () {
        var _this = this;
        if (!this.activeDeferred) {
            this.activeDeferred = $.Deferred();
            this.activeDeferred.catch(function (e) {
                throw e;
            });
        }
        if (this.activeTimer) {
            window.clearTimeout(this.activeTimer);
        }
        this.activeTimer = window.setTimeout(function () {
            window.clearTimeout(_this.activeTimer);
            _this.activeTimer = null;
            var resourceArray = [];
            _this.resourcesToGet.forEach(function (entry) {
                resourceArray.push(entry);
            });
            _this.resolver(resourceArray.join(';'), function (result, event) {
                _this.callback(result, event);
            });
        }, this.delay);
    };
    Object.defineProperty(StaticResourceCache.prototype, "Resolver", {
        /**
         * Returns the set resolver function.
         */
        get: function () {
            return this.resolver;
        },
        /**
         * Sets the RemoteAction caller function to be used.
         * @param newResolver func The remote to be called to invoke RemoteAction resource Uri resolution.
         */
        set: function (newResolver) {
            this.resolver = newResolver;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the URI to the satic resource if in cache or triggers Uri resolution timer.
     * @param resourceName string The name of the resource for which we want the Uri.
     */
    StaticResourceCache.prototype.getResourceUri = function (resourceName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.resourceUris[resourceName] !== undefined) {
                            return [2 /*return*/, this.resourceUris[resourceName]];
                        }
                        if (this.resolver === undefined) {
                            throw new Error('Resolver is undefined.');
                        }
                        this.resourcesToGet.add(resourceName);
                        this.resolveResourceUris();
                        return [4 /*yield*/, this.activeDeferred.promise()];
                    case 1:
                        _a.sent();
                        this.resourcesToGet.delete(resourceName);
                        return [2 /*return*/, this.resourceUris[resourceName]];
                }
            });
        });
    };
    /**
     * Updates resource URI cache with new value.
     * @param resourceName string The name of the resource for which we want to set the Uri.
     * @param resourceUri string The URI to set for the given resource.
     */
    StaticResourceCache.prototype.updateUri = function (resourceName, resourceUri) {
        this.resourceUris[resourceName] = resourceUri;
    };
    /**
     * Deletes the singleton instance
     */
    StaticResourceCache.delete = function () {
        this._instance = undefined;
    };
    Object.defineProperty(StaticResourceCache, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    return StaticResourceCache;
}());


// CONCATENATED MODULE: ./src/components/search-ui/ProductMedia/ProductMedia.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ProductMedia_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ProductMedia_generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var MediaSource;
(function (MediaSource) {
    MediaSource["staticResource"] = "Static Resource";
    MediaSource["uri"] = "URI";
})(MediaSource || (MediaSource = {}));
/**
 * The `Product Media` component is used to display a product media image in a result template.
 *
 * ```html
 * <div class='CoveoProductMedia' data-media-type='Product Image' data-width='70px' data-height='70px'></div>
 * ```
 * @isresulttemplatecomponent
 */
var ProductMedia_ProductMedia = /** @class */ (function (_super) {
    __extends(ProductMedia, _super);
    /**
     * Creates a new `ProductMedia` component.
     * @param element The HTMLElement on which to instantiate the component.
     * @param options The options for the `ProductMedia` component.
     * @param bindings The bindings that the component requires to function normally.
     */
    function ProductMedia(element, options, bindings, result) {
        var _this = _super.call(this, element, ProductMedia.ID) || this;
        _this.element = element;
        _this.options = options;
        _this.bindings = bindings;
        _this.result = result;
        options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, ProductMedia, options);
        result = result ? result : _this.resolveResult();
        external_window_Coveo_["Assert"].exists(result);
        _this.render();
        return _this;
    }
    ProductMedia.prototype.render = function () {
        return ProductMedia_awaiter(this, void 0, void 0, function () {
            var img, _a, _b, _c;
            return ProductMedia_generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = external_window_Coveo_["$$"];
                        _b = ['img'];
                        _c = {};
                        return [4 /*yield*/, this.imageURI()];
                    case 1:
                        img = _a.apply(void 0, _b.concat([(_c.src = _d.sent(), _c)]));
                        img.el.style.height = this.options.height;
                        img.el.style.width = this.options.width;
                        this.element.appendChild(img.el);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns the path to the specified static resource asset.
     * @param resourceName Name of the static resource.
     * @param itemPath Path of the asset.
     */
    ProductMedia.prototype.resolveStaticResourcePath = function (resourceName, itemPath) {
        return ProductMedia_awaiter(this, void 0, void 0, function () {
            var cache, resourceUri;
            var _this = this;
            return ProductMedia_generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (SalesforceUtils["c" /* SalesforceUtilities */].isInLightning()) {
                            return [2 /*return*/, $A.get("$Resource." + resourceName) + ("/" + itemPath)];
                        }
                        cache = StaticResourceCache.Instance;
                        if (cache.Resolver === undefined) {
                            if (this.options.staticResourceResolver === undefined) {
                                this.logger.warn('Static Resource paths could not be resolved.');
                                return [2 /*return*/, ''];
                            }
                            cache.Resolver = this.options.staticResourceResolver;
                        }
                        return [4 /*yield*/, cache.getResourceUri(resourceName).catch(function (e) {
                                _this.logger.error(e);
                            })];
                    case 1:
                        resourceUri = _a.sent();
                        return [2 /*return*/, resourceUri ? resourceUri + ("/" + itemPath) : ''];
                }
            });
        });
    };
    Object.defineProperty(ProductMedia.prototype, "productMediaFields", {
        /**
         * Parses and splits the required CC Product fields
         */
        get: function () {
            var productMediaFields = {
                types: this.result.raw.sfmediatype || [],
                sources: this.result.raw.sfmediasource || [],
                paths: this.result.raw.sfmediafilepath || [],
                resourceNames: this.result.raw.sfmediastaticresourcename || [],
                uris: this.result.raw.sfmediauri || [],
            };
            return productMediaFields;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the path to the image to be displayed.
     */
    ProductMedia.prototype.imageURI = function () {
        return ProductMedia_awaiter(this, void 0, void 0, function () {
            var mediaFields, index, _a;
            return ProductMedia_generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mediaFields = this.productMediaFields;
                        index = mediaFields.types.indexOf(this.options.mediaType) || 0;
                        if (mediaFields.sources.length <= index) {
                            return [2 /*return*/, ''];
                        }
                        _a = mediaFields.sources[index];
                        switch (_a) {
                            case MediaSource.staticResource: return [3 /*break*/, 1];
                            case MediaSource.uri: return [3 /*break*/, 4];
                        }
                        return [3 /*break*/, 5];
                    case 1:
                        if (!(mediaFields.resourceNames.length > index && mediaFields.paths.length > index)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.resolveStaticResourcePath(mediaFields.resourceNames[index], mediaFields.paths[index])];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3: return [2 /*return*/, ''];
                    case 4: return [2 /*return*/, mediaFields.uris.length > index ? mediaFields.uris[index] : ''];
                    case 5: return [2 /*return*/, ''];
                }
            });
        });
    };
    ProductMedia.ID = 'ProductMedia';
    /**
     * @componentOptions
     */
    ProductMedia.options = {
        /**
         * The type of media resource to display.
         * <br><br>
         * The component uses this field value to build and set the value of the `src` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.
         */
        mediaType: external_window_Coveo_["ComponentOptions"].buildStringOption({ required: true }),
        /**
         * The width of the image.
         * <br><br>
         * The component uses this field value to set the `width` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.
         * <br><br>
         * Requires standard CSS syntax and units.
         */
        width: external_window_Coveo_["ComponentOptions"].buildStringOption({ required: true }),
        /**
         * The height of the image.
         * <br><br>
         * The component uses this field value to set the `height` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.
         * <br><br>
         * Requires standard CSS syntax and units.
         */
        height: external_window_Coveo_["ComponentOptions"].buildStringOption({ required: true }),
        /**
         * The function used resolve the path to the static resource image.
         */
        staticResourceResolver: external_window_Coveo_["ComponentOptions"].buildCustomOption(function () { return String.toString; }),
    };
    return ProductMedia;
}(external_window_Coveo_["Component"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(ProductMedia_ProductMedia);
external_window_Coveo_["Initialization"].registerComponentFields(ProductMedia_ProductMedia.ID, [
    'sfmediatype',
    'sfmediasource',
    'sfmediafilepath',
    'sfmediastaticresourcename',
    'sfmediauri',
]);


/***/ }),
/* 85 */,
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ SalesforceQuickview_SalesforceQuickview; });

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/components/search-ui/SalesforceQuickview/ts/SalesforceQuickviewModal.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/*
 * LockerService compliant version of the Quickview component.
 */
var SalesforceQuickviewModal_SalesforceQuickviewModal = /** @class */ (function (_super) {
    __extends(SalesforceQuickviewModal, _super);
    /*
     * SalesforceQuickviewModal constructor.
     * Build an iframe with an html view of the document.
     *
     * @param element The element on which the component will render.
     * @param options The options of the component.
     * @param bindings The component bindings.
     * @param result The current result.
     */
    function SalesforceQuickviewModal(element, options, bindings, result) {
        var _this = _super.call(this, element, SalesforceQuickviewModal.ID, bindings) || this;
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, SalesforceQuickviewModal, options);
        _this.result = result || _this.resolveResult();
        _this.buildIFrame();
        return _this;
    }
    // Build the iframe that will show the document preview.
    SalesforceQuickviewModal.prototype.buildIFrame = function () {
        var iframe = document.createElement('iframe');
        var callOptions = {
            queryObject: this.queryController.getLastQuery(),
        };
        if (this.options.useAdvancedQuickview) {
            iframe.src = decodeURIComponent(this.options.quickviewUrl) + "?documentID=" + encodeURIComponent(this.result.uniqueId) + "&queryString=" + encodeURIComponent(callOptions.queryObject.q) + "&searchToken=" + encodeURIComponent(this.queryController.getEndpoint().options.accessToken);
        }
        else {
            iframe.src = this.queryController.getEndpoint().getViewAsHtmlUri(this.result.uniqueId, callOptions);
        }
        this.element.appendChild(iframe);
    };
    SalesforceQuickviewModal.ID = 'SalesforceQuickviewModal';
    SalesforceQuickviewModal.options = {
        useAdvancedQuickview: external_window_Coveo_["ComponentOptions"].buildBooleanOption({ defaultValue: false }),
        quickviewUrl: external_window_Coveo_["ComponentOptions"].buildStringOption({ defaultValue: '', depend: 'useAdvancedQuickview' }),
    };
    return SalesforceQuickviewModal;
}(external_window_Coveo_["Component"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(SalesforceQuickviewModal_SalesforceQuickviewModal);

// CONCATENATED MODULE: ./src/components/search-ui/SalesforceQuickview/ts/SalesforceQuickviewDefaultTemplate.ts
var SalesforceQuickviewDefaultTemplate_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/*
 * Default template for the SalesforceQuickview component.
 */
var SalesforceQuickviewDefaultTemplate_SalesforceDefaultQuickviewTemplate = /** @class */ (function (_super) {
    SalesforceQuickviewDefaultTemplate_extends(SalesforceDefaultQuickviewTemplate, _super);
    /**
     * The SalesforceDefaultQuickviewTemplate class constructor.
     * @param options {ISalesforceQuickviewModalOptions} - the options to use to pass on the {@link SalesforceQuickviewModal}.
     */
    function SalesforceDefaultQuickviewTemplate(options) {
        var _this = _super.call(this) || this;
        _this.useAdvancedQuickview = options.useAdvancedQuickview;
        _this.quickviewURL = options.quickviewUrl;
        return _this;
    }
    /**
     * Override of the instantiateToString method of the Template class.
     *
     * @param queryResult  The current result in the result list.
     */
    SalesforceDefaultQuickviewTemplate.prototype.instantiateToString = function (queryResult) {
        return "<div class=\"coveo-quick-view-full-height\">\n      <div class=\"" + external_window_Coveo_["Component"].computeCssClassName(SalesforceQuickviewModal_SalesforceQuickviewModal) + "\"" + this.computeOptionsString() + " style=\"height: 100%;\">\n      </div>\n    </div>";
    };
    SalesforceDefaultQuickviewTemplate.prototype.computeOptionsString = function () {
        var optionsString = '';
        // If the 'old' quickview is used, no data-*** options are given.
        if (!this.useAdvancedQuickview) {
            return optionsString;
        }
        optionsString += ' data-use-advanced-quickview=true';
        if (this.quickviewURL) {
            optionsString += " data-quickview-url=\"" + this.quickviewURL + "\"";
        }
        return optionsString;
    };
    return SalesforceDefaultQuickviewTemplate;
}(external_window_Coveo_["Template"]));


// CONCATENATED MODULE: ./src/components/search-ui/SalesforceQuickview/ts/SalesforceAdvancedQuickview.ts
var SalesforceAdvancedQuickview_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * A Locker-friendly Quickview.
 */
var SalesforceAdvancedQuickview = /** @class */ (function (_super) {
    SalesforceAdvancedQuickview_extends(SalesforceAdvancedQuickview, _super);
    function SalesforceAdvancedQuickview(element, options, bindings, result) {
        return _super.call(this, element, options, bindings, result) || this;
    }
    /**
     * Opens the `Quickview` modal box and override some of its style.
     */
    SalesforceAdvancedQuickview.prototype.open = function () {
        var _this = this;
        var openPromise = _super.prototype.open.call(this);
        if (openPromise) {
            return openPromise.then(function () {
                if (_this.options.useAdvancedQuickview) {
                    var modalElement = document.getElementsByClassName('coveo-modal-container')[0];
                    if (modalElement) {
                        modalElement.className = modalElement.className + " salesforce-quickview-modal-container";
                    }
                }
            });
        }
    };
    return SalesforceAdvancedQuickview;
}(external_window_Coveo_["Quickview"]));


// EXTERNAL MODULE: ./src/components/search-ui/SalesforceQuickview/strings.json
var strings = __webpack_require__(110);
var strings_namespaceObject = /*#__PURE__*/__webpack_require__.t(strings, 2);

// EXTERNAL MODULE: ./src/utils/Translation.ts
var Translation = __webpack_require__(6);

// CONCATENATED MODULE: ./src/components/search-ui/SalesforceQuickview/ts/SalesforceQuickview.ts
var SalesforceQuickview_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * The _SalesforceQuickview_ component inherits from the Quickview component, and thus provides all the same options(see [Coveo Component Quickview](https://coveo.github.io/search-ui/components/quickview.html)).
 *
 * It is made to support LockerService (see [What is LockerService?](https://developer.salesforce.com/docs/atlas.en-us.212.0.lightning.meta/lightning/security_code.htm)).
 *
 * ```html
 * <div class='CoveoSalesforceQuickView'></div>
 * ```
 */
var SalesforceQuickview_SalesforceQuickview = /** @class */ (function (_super) {
    SalesforceQuickview_extends(SalesforceQuickview, _super);
    /*
     * SalesforceQuickview constructor.
     *
     * @param element The element on which the component will render.
     * @param options The options of the component.
     * @param bindings The component bindings.
     * @param result The current result.
     */
    function SalesforceQuickview(element, options, bindings, result) {
        var _this = _super.call(this, element, SalesforceQuickview.ID, bindings) || this;
        // Search-ui component boilerplate for component option and result initialisation.
        _this.options = external_window_Coveo_["ComponentOptions"].initComponentOptions(element, SalesforceQuickview, options);
        _this.result = result || _this.resolveResult();
        // Override the contentTemplate option if no template exist.
        if (!_this.options.contentTemplate) {
            _this.options.contentTemplate = new SalesforceQuickviewDefaultTemplate_SalesforceDefaultQuickviewTemplate(options);
        }
        if (typeof result.hasHtmlVersion == 'undefined' || result.hasHtmlVersion || _this.options.alwaysShow) {
            // Spawn the appropriate Quickview
            if (_this.options.useAdvancedQuickview) {
                new SalesforceAdvancedQuickview(element, _this.options, bindings, _this.result);
            }
            else {
                new external_window_Coveo_["Quickview"](element, _this.options, bindings, _this.result);
            }
        }
        else {
            Object(external_window_Coveo_["$$"])(element).remove();
        }
        return _this;
    }
    SalesforceQuickview.ID = 'SalesforceQuickview';
    SalesforceQuickview.options = {
        /**
         * Whether the Quickview Component is customizable.
         */
        useAdvancedQuickview: external_window_Coveo_["ComponentOptions"].buildBooleanOption({
            defaultValue: false,
        }),
        /**
         * To show a customized preview.
         */
        quickviewUrl: external_window_Coveo_["ComponentOptions"].buildStringOption({
            depend: 'useAdvancedQuickview',
            defaultFunction: function () { return ''; },
        }),
    };
    return SalesforceQuickview;
}(external_window_Coveo_["Component"]));

external_window_Coveo_["Initialization"].registerAutoCreateComponent(SalesforceQuickview_SalesforceQuickview);
external_window_Coveo_["Initialization"].registerComponentFields('SalesforceQuickview', ['date']);
// Load strings and format 'description' ones for the tooltips.


Translation["a" /* Translation */].merge('en', strings_namespaceObject);
/**
 * The SalesforceQuickview 'extends' the options of the Quickview, so it needs to be copied.
 * This vary depending of its the tooltips or the label of the options.
 * @param from a RegExp to match the quickview options keys in the local.
 * @param to the SalesforceQuickview string to replace the matched RegExp.
 */
function stringFixer(from, to) {
    Object.keys(String['locales']['en'])
        .filter(function (key) { return from.test(key); })
        .forEach(function (key) {
        String['locales']['en'][key.replace(from, to).toLowerCase()] = String['locales']['en'][key];
    });
}
// Duplicate the strings from QuickView with _salesforcequickview as a prefix. (Labels)
stringFixer(new RegExp(/^_quickview./), SalesforceQuickview_SalesforceQuickview.ID + "_");
// Duplicate the strings from QuickView with SalesforceQuicview as a prefix. (Tooltips)
stringFixer(new RegExp(/^Quickview_/), SalesforceQuickview_SalesforceQuickview.ID + "_");


/***/ }),
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "SalesforceQuickviewNode", function() { return /* reexport */ SalesforceQuickviewNode_SalesforceQuickviewNode; });
__webpack_require__.d(__webpack_exports__, "SalesforceResultLinkNode", function() { return /* reexport */ SalesforceResultLinkNode["a" /* SalesforceResultLinkNode */]; });
__webpack_require__.d(__webpack_exports__, "ViewedByCustomerNode", function() { return /* reexport */ ViewedByCustomerNode_ViewedByCustomerNode; });
__webpack_require__.d(__webpack_exports__, "ChatterThumbnailNode", function() { return /* reexport */ ChatterThumbnailNode_ChatterThumbnailNode; });
__webpack_require__.d(__webpack_exports__, "SalesforceThumbnailNode", function() { return /* reexport */ SalesforceThumbnailNode["a" /* SalesforceThumbnailNode */]; });
__webpack_require__.d(__webpack_exports__, "AttachToCaseNode", function() { return /* reexport */ AttachToCaseNode["a" /* AttachToCaseNode */]; });
__webpack_require__.d(__webpack_exports__, "CommunityStateManagerNode", function() { return /* reexport */ CommunityStateManagerNode_CommunityStateManagerNode; });
__webpack_require__.d(__webpack_exports__, "ResultActionsPostToFeedNode", function() { return /* reexport */ ResultActionsPostToFeedNode_ResultActionsPostToFeedNode; });
__webpack_require__.d(__webpack_exports__, "ResultQuickActionNode", function() { return /* reexport */ ResultQuickActionNode_ResultQuickActionNode; });
__webpack_require__.d(__webpack_exports__, "ResultActionsSendEmailNode", function() { return /* reexport */ ResultActionsSendEmailNode_ResultActionsSendEmailNode; });
__webpack_require__.d(__webpack_exports__, "ResultActionsSendLiveAgentNode", function() { return /* reexport */ ResultActionsSendLiveAgentNode_ResultActionsSendLiveAgentNode; });
__webpack_require__.d(__webpack_exports__, "ProductMediaNode", function() { return /* reexport */ ProductMediaNode_ProductMediaNode; });
__webpack_require__.d(__webpack_exports__, "AttachToCase", function() { return /* reexport */ ts["AttachToCase"]; });
__webpack_require__.d(__webpack_exports__, "LOAD_EVENT_NAME", function() { return /* reexport */ ts["LOAD_EVENT_NAME"]; });
__webpack_require__.d(__webpack_exports__, "CHANGE_EVENT_NAME", function() { return /* reexport */ ts["CHANGE_EVENT_NAME"]; });
__webpack_require__.d(__webpack_exports__, "AttachedResultsFilter", function() { return /* reexport */ ts["AttachedResultsFilter"]; });
__webpack_require__.d(__webpack_exports__, "AttachedResultsTab", function() { return /* reexport */ ts["AttachedResultsTab"]; });
__webpack_require__.d(__webpack_exports__, "MetadataStore", function() { return /* reexport */ ts["MetadataStore"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceThumbnail", function() { return /* reexport */ ts["SalesforceThumbnail"]; });
__webpack_require__.d(__webpack_exports__, "ChatterThumbnail", function() { return /* reexport */ ts["ChatterThumbnail"]; });
__webpack_require__.d(__webpack_exports__, "InsightQuerySummary", function() { return /* reexport */ ts["InsightQuerySummary"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceEnvironment", function() { return /* reexport */ ts["SalesforceEnvironment"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceComponent", function() { return /* reexport */ ts["SalesforceComponent"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceAdaptiveResultLink", function() { return /* reexport */ ts["SalesforceAdaptiveResultLink"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceResultLink", function() { return /* reexport */ ts["SalesforceResultLink"]; });
__webpack_require__.d(__webpack_exports__, "ConsoleResultLink", function() { return /* reexport */ ts["ConsoleResultLink"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceQuickview", function() { return /* reexport */ ts["SalesforceQuickview"]; });
__webpack_require__.d(__webpack_exports__, "ResultAction", function() { return /* reexport */ ts["ResultAction"]; });
__webpack_require__.d(__webpack_exports__, "ResultQuickAction", function() { return /* reexport */ ts["ResultQuickAction"]; });
__webpack_require__.d(__webpack_exports__, "ResultActionsSendEmail", function() { return /* reexport */ ts["ResultActionsSendEmail"]; });
__webpack_require__.d(__webpack_exports__, "ResultActionsPostToFeed", function() { return /* reexport */ ts["ResultActionsPostToFeed"]; });
__webpack_require__.d(__webpack_exports__, "ResultActionsSendLiveAgent", function() { return /* reexport */ ts["ResultActionsSendLiveAgent"]; });
__webpack_require__.d(__webpack_exports__, "ProductMedia", function() { return /* reexport */ ts["ProductMedia"]; });
__webpack_require__.d(__webpack_exports__, "AugmentedResultList", function() { return /* reexport */ ts["AugmentedResultList"]; });
__webpack_require__.d(__webpack_exports__, "ResultActionsEvents", function() { return /* reexport */ ts["ResultActionsEvents"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceFields", function() { return /* reexport */ ts["SalesforceFields"]; });
__webpack_require__.d(__webpack_exports__, "SalesforceUtilities", function() { return /* reexport */ ts["SalesforceUtilities"]; });
__webpack_require__.d(__webpack_exports__, "Id", function() { return /* reexport */ ts["Id"]; });

// EXTERNAL MODULE: ./src/modules/common/interfaceEditor/generatedDoc.ts
var generatedDoc = __webpack_require__(112);

// EXTERNAL MODULE: external "Coveo"
var external_Coveo_ = __webpack_require__(3);

// EXTERNAL MODULE: external "window.Coveo"
var external_window_Coveo_ = __webpack_require__(0);

// EXTERNAL MODULE: ./src/components/search-ui/SalesforceQuickview/ts/SalesforceQuickview.ts + 3 modules
var SalesforceQuickview = __webpack_require__(86);

// CONCATENATED MODULE: ./src/components/search-ui/SalesforceQuickview/ts/SalesforceQuickviewNode.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/*
 * Interface editor node for the Quickview
 */
var SalesforceQuickviewNode_SalesforceQuickviewNode = /** @class */ (function (_super) {
    __extends(SalesforceQuickviewNode, _super);
    /*
     * Build a SalesforceQuickviewNode instance after a node have been matched.
     * @param node The matched node.
     * @param parser The parser instance.
     */
    function SalesforceQuickviewNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    /*
     * Test if the passed node is a SalesforceQuickview.
     * @param node Tested node.
     */
    SalesforceQuickviewNode.match = function (node) {
        return $(node).hasClass(external_window_Coveo_["Component"].computeCssClassNameForType(SalesforceQuickview["a" /* SalesforceQuickview */].ID));
    };
    /*
     * The priority of the match
     */
    SalesforceQuickviewNode.priority = external_Coveo_["InterfaceEditor"].ComponentNode.priority + 1;
    return SalesforceQuickviewNode;
}(external_Coveo_["InterfaceEditor"].ComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Basic.push(SalesforceQuickview["a" /* SalesforceQuickview */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(SalesforceQuickviewNode_SalesforceQuickviewNode);

// EXTERNAL MODULE: ./src/components/search-ui/SalesforceResultLink/SalesforceResultLinkNode.ts
var SalesforceResultLinkNode = __webpack_require__(107);

// EXTERNAL MODULE: ./node_modules/coveo-search-ui-extensions/bin/es6/components/ViewedByCustomer/ViewedByCustomer.js + 1 modules
var ViewedByCustomer = __webpack_require__(49);

// CONCATENATED MODULE: ./src/components/search-ui/ViewedByCustomer/ViewedByCustomerNode.ts
var ViewedByCustomerNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Interface Editor node for the Viewed by Customer.
 */
var ViewedByCustomerNode_ViewedByCustomerNode = /** @class */ (function (_super) {
    ViewedByCustomerNode_extends(ViewedByCustomerNode, _super);
    /**
     * Build a ViewedByCustomerNode instance after a node have been matched.
     * @param node The matched node.
     * @param parser The parser instance.
     */
    function ViewedByCustomerNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    /**
     * Test if the passed node is a ViewedByCustomer.
     * @param node Tested node.
     */
    ViewedByCustomerNode.match = function (node) {
        return $(node).hasClass(external_window_Coveo_["Component"].computeCssClassNameForType(ViewedByCustomer["a" /* ViewedByCustomer */].ID));
    };
    /**
     * The priority of the match.
     */
    ViewedByCustomerNode.priority = external_Coveo_["InterfaceEditor"].ResultComponentNode.priority + 1;
    return ViewedByCustomerNode;
}(external_Coveo_["InterfaceEditor"].ResultComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Basic.push(ViewedByCustomer["a" /* ViewedByCustomer */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(ViewedByCustomerNode_ViewedByCustomerNode);

// EXTERNAL MODULE: ./src/components/search-ui/Thumbnail/ChatterThumbnail.ts
var ChatterThumbnail = __webpack_require__(64);

// CONCATENATED MODULE: ./src/components/search-ui/Thumbnail/ChatterThumbnailNode.ts
var ChatterThumbnailNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ChatterThumbnailNode_ChatterThumbnailNode = /** @class */ (function (_super) {
    ChatterThumbnailNode_extends(ChatterThumbnailNode, _super);
    function ChatterThumbnailNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    ChatterThumbnailNode.match = function (node) {
        if (node && node.classList && node.classList.contains) {
            return node.classList.contains(external_window_Coveo_["Component"].computeCssClassNameForType(ChatterThumbnail["a" /* ChatterThumbnail */].ID));
        }
        return false;
    };
    ChatterThumbnailNode.priority = external_Coveo_["InterfaceEditor"].ComponentNode.priority + 1;
    return ChatterThumbnailNode;
}(external_Coveo_["InterfaceEditor"].ComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Advanced.push(ChatterThumbnail["a" /* ChatterThumbnail */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(ChatterThumbnailNode_ChatterThumbnailNode);

// EXTERNAL MODULE: ./src/components/search-ui/Thumbnail/SalesforceThumbnailNode.ts
var SalesforceThumbnailNode = __webpack_require__(127);

// EXTERNAL MODULE: ./src/modules/attachToCase/ts/AttachToCaseNode.ts
var AttachToCaseNode = __webpack_require__(128);

// EXTERNAL MODULE: ./src/modules/standaloneSearchbox/ts/CommunityStateManager.ts
var CommunityStateManager = __webpack_require__(73);

// CONCATENATED MODULE: ./src/modules/standaloneSearchbox/interfaceEditor/CommunityStateManagerNode.ts
var CommunityStateManagerNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var CommunityStateManagerNode_CommunityStateManagerNode = /** @class */ (function (_super) {
    CommunityStateManagerNode_extends(CommunityStateManagerNode, _super);
    function CommunityStateManagerNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isHidden = true;
        return _this;
    }
    CommunityStateManagerNode.match = function (node) {
        return $(node).hasClass(external_window_Coveo_["Component"].computeCssClassNameForType(CommunityStateManager["a" /* CommunityStateManager */].ID));
    };
    CommunityStateManagerNode.prototype.isBasic = function () {
        return true;
    };
    CommunityStateManagerNode.prototype.getName = function () {
        return 'Standalone Searchbox Options';
    };
    Object.defineProperty(CommunityStateManagerNode.prototype, "hiddenOptionKeys", {
        get: function () {
            return ['enableQuerySyntax'];
        },
        enumerable: true,
        configurable: true
    });
    CommunityStateManagerNode.priority = external_Coveo_["InterfaceEditor"].ComponentNode.priority + 1;
    return CommunityStateManagerNode;
}(external_Coveo_["InterfaceEditor"].ComponentNode));

external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(CommunityStateManagerNode_CommunityStateManagerNode, CommunityStateManager["a" /* CommunityStateManager */].ID);

// EXTERNAL MODULE: ./src/components/search-ui/ResultActionsPostToFeed/ResultActionsPostToFeed.ts
var ResultActionsPostToFeed = __webpack_require__(50);

// CONCATENATED MODULE: ./src/components/search-ui/ResultActionsPostToFeed/ResultActionsPostToFeedNode.ts
var ResultActionsPostToFeedNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/*
 * Interface editor node for the Quickview
 */
var ResultActionsPostToFeedNode_ResultActionsPostToFeedNode = /** @class */ (function (_super) {
    ResultActionsPostToFeedNode_extends(ResultActionsPostToFeedNode, _super);
    /*
     * Build a ResultActionsPostToFeedNode instance after a node have been matched.
     * @param node The matched node.
     * @param parser The parser instance.
     */
    function ResultActionsPostToFeedNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    /*
     * Test if the passed node is a ResultActionsPostToFeed.
     * @param node Tested node.
     */
    ResultActionsPostToFeedNode.match = function (node) {
        return $(node).hasClass(external_window_Coveo_["Component"].computeCssClassNameForType(ResultActionsPostToFeed["a" /* ResultActionsPostToFeed */].ID));
    };
    Object.defineProperty(ResultActionsPostToFeedNode.prototype, "hiddenOptionKeys", {
        /**
         * Get the properties that we don't want to front in the interface editor.
         */
        get: function () {
            return ['quickActionAPI', 'actionName', 'onSendActionEvent', 'icon', 'tooltip'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultActionsPostToFeedNode.prototype, "displayedOptionKeys", {
        /**
         * Get the properties that we want to display in the interface editor.
         */
        get: function () {
            var _this = this;
            return Object.keys(ResultActionsPostToFeed["a" /* ResultActionsPostToFeed */].options).filter(function (option) { return !_this.hiddenOptionKeys.includes(option); });
        },
        enumerable: true,
        configurable: true
    });
    /*
     * The priority of the match
     */
    ResultActionsPostToFeedNode.priority = external_Coveo_["InterfaceEditor"].ResultComponentNode.priority + 1;
    return ResultActionsPostToFeedNode;
}(external_Coveo_["InterfaceEditor"].ResultComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Advanced.push(ResultActionsPostToFeed["a" /* ResultActionsPostToFeed */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(ResultActionsPostToFeedNode_ResultActionsPostToFeedNode);

// EXTERNAL MODULE: ./src/components/search-ui/ResultQuickAction/ResultQuickAction.ts
var ResultQuickAction = __webpack_require__(22);

// CONCATENATED MODULE: ./src/components/search-ui/ResultQuickAction/ResultQuickActionNode.ts
var ResultQuickActionNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Interface editor node for the ResultQuickAction.
 */
var ResultQuickActionNode_ResultQuickActionNode = /** @class */ (function (_super) {
    ResultQuickActionNode_extends(ResultQuickActionNode, _super);
    /**
     * Build a ResultQuickActionNode instance after a node has been matched.
     * @param node The matched node.
     * @param parser The parser instance.
     */
    function ResultQuickActionNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    /**
     * Test if the passed node is a ResultQuickAction.
     * @param node Tested node.
     */
    ResultQuickActionNode.match = function (node) {
        return node.classList && node.classList.contains(external_window_Coveo_["Component"].computeCssClassNameForType(ResultQuickAction["a" /* ResultQuickAction */].ID));
    };
    Object.defineProperty(ResultQuickActionNode.prototype, "hiddenOptionKeys", {
        /**
         * Get the properties that we don't want to front in the interface editor.
         */
        get: function () {
            return ['quickActionAPI'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultQuickActionNode.prototype, "displayedOptionKeys", {
        /**
         * Get the properties that we want to display in the interface editor.
         */
        get: function () {
            var _this = this;
            return Object.keys(ResultQuickAction["a" /* ResultQuickAction */].options).filter(function (option) { return !_this.hiddenOptionKeys.includes(option); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The priority of the match.
     */
    ResultQuickActionNode.priority = external_Coveo_["InterfaceEditor"].ResultComponentNode.priority + 1;
    return ResultQuickActionNode;
}(external_Coveo_["InterfaceEditor"].ResultComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Advanced.push(ResultQuickAction["a" /* ResultQuickAction */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(ResultQuickActionNode_ResultQuickActionNode);

// EXTERNAL MODULE: ./src/components/search-ui/ResultActionsSendEmail/ResultActionsSendEmail.ts
var ResultActionsSendEmail = __webpack_require__(51);

// CONCATENATED MODULE: ./src/components/search-ui/ResultActionsSendEmail/ResultActionsSendEmailNode.ts
var ResultActionsSendEmailNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/*
 * Interface editor node for the Quickview
 */
var ResultActionsSendEmailNode_ResultActionsSendEmailNode = /** @class */ (function (_super) {
    ResultActionsSendEmailNode_extends(ResultActionsSendEmailNode, _super);
    /*
     * Build a ResultActionsSendEmailNode instance after a node have been matched.
     * @param node The matched node.
     * @param parser The parser instance.
     */
    function ResultActionsSendEmailNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    /*
     * Test if the passed node is a ResultActionsSendEmail.
     * @param node Tested node.
     */
    ResultActionsSendEmailNode.match = function (node) {
        return $(node).hasClass(external_window_Coveo_["Component"].computeCssClassNameForType(ResultActionsSendEmail["a" /* ResultActionsSendEmail */].ID));
    };
    Object.defineProperty(ResultActionsSendEmailNode.prototype, "hiddenOptionKeys", {
        /**
         * Get the properties that we don't want to front in the interface editor.
         */
        get: function () {
            return ['quickActionAPI', 'onSendActionEvent', 'actionName', 'icon', 'tooltip', 'recordType'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultActionsSendEmailNode.prototype, "displayedOptionKeys", {
        /**
         * Get the properties that we want to display in the interface editor.
         */
        get: function () {
            var _this = this;
            return Object.keys(ResultActionsSendEmail["a" /* ResultActionsSendEmail */].options).filter(function (option) { return !_this.hiddenOptionKeys.includes(option); });
        },
        enumerable: true,
        configurable: true
    });
    /*
     * The priority of the match
     */
    ResultActionsSendEmailNode.priority = external_Coveo_["InterfaceEditor"].ResultComponentNode.priority + 1;
    return ResultActionsSendEmailNode;
}(external_Coveo_["InterfaceEditor"].ResultComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Advanced.push(ResultActionsSendEmail["a" /* ResultActionsSendEmail */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(ResultActionsSendEmailNode_ResultActionsSendEmailNode);

// EXTERNAL MODULE: ./src/components/search-ui/ResultActionsSendLiveAgent/ResultActionsSendLiveAgent.ts
var ResultActionsSendLiveAgent = __webpack_require__(54);

// CONCATENATED MODULE: ./src/components/search-ui/ResultActionsSendLiveAgent/ResultActionsSendLiveAgentNode.ts
var ResultActionsSendLiveAgentNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/*
 * Interface editor node for the Quickview
 */
var ResultActionsSendLiveAgentNode_ResultActionsSendLiveAgentNode = /** @class */ (function (_super) {
    ResultActionsSendLiveAgentNode_extends(ResultActionsSendLiveAgentNode, _super);
    /*
     * Build a ResultActionsSendLiveAgentNode instance after a node have been matched.
     * @param node The matched node.
     * @param parser The parser instance.
     */
    function ResultActionsSendLiveAgentNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    /*
     * Test if the passed node is a ResultActionsSendLiveAgent.
     * @param node Tested node.
     */
    ResultActionsSendLiveAgentNode.match = function (node) {
        return $(node).hasClass(external_window_Coveo_["Component"].computeCssClassNameForType(ResultActionsSendLiveAgent["a" /* ResultActionsSendLiveAgent */].ID));
    };
    Object.defineProperty(ResultActionsSendLiveAgentNode.prototype, "hiddenOptionKeys", {
        /**
         * Get the properties that we don't want to front in the interface editor.
         */
        get: function () {
            return ['conversationToolkit', 'recordId', 'useBetaConversationToolkit'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultActionsSendLiveAgentNode.prototype, "displayedOptionKeys", {
        /**
         * Get the properties that we want to display in the interface editor.
         */
        get: function () {
            var _this = this;
            return Object.keys(ResultActionsSendLiveAgent["a" /* ResultActionsSendLiveAgent */].options).filter(function (option) { return !_this.hiddenOptionKeys.includes(option); });
        },
        enumerable: true,
        configurable: true
    });
    /*
     * The priority of the match
     */
    ResultActionsSendLiveAgentNode.priority = external_Coveo_["InterfaceEditor"].ResultComponentNode.priority + 1;
    return ResultActionsSendLiveAgentNode;
}(external_Coveo_["InterfaceEditor"].ResultComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Advanced.push(ResultActionsSendLiveAgent["a" /* ResultActionsSendLiveAgent */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(ResultActionsSendLiveAgentNode_ResultActionsSendLiveAgentNode);

// EXTERNAL MODULE: ./src/components/search-ui/ProductMedia/ProductMedia.ts + 1 modules
var ProductMedia = __webpack_require__(84);

// CONCATENATED MODULE: ./src/components/search-ui/ProductMedia/ProductMediaNode.ts
var ProductMediaNode_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Interface Editor node for the ProductMedia component.
 */
var ProductMediaNode_ProductMediaNode = /** @class */ (function (_super) {
    ProductMediaNode_extends(ProductMediaNode, _super);
    /**
     * Build a ProductMediaNode instance after a node have been matched.
     * @param node The matched node.
     * @param parser The parser instance.
     */
    function ProductMediaNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    /**
     * Test if the passed node is a ProductMedia.
     * @param node Tested node.
     */
    ProductMediaNode.match = function (node) {
        return $(node).hasClass(external_window_Coveo_["Component"].computeCssClassNameForType(ProductMedia["a" /* ProductMedia */].ID));
    };
    Object.defineProperty(ProductMediaNode.prototype, "hiddenOptionKeys", {
        /**
         * Get the properties that we don't want to front in the interface editor.
         */
        get: function () {
            return ['staticResourceResolver'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProductMediaNode.prototype, "displayedOptionKeys", {
        /**
         * Get the properties that we want to display in the interface editor.
         */
        get: function () {
            var _this = this;
            return Object.keys(ProductMedia["a" /* ProductMedia */].options).filter(function (option) { return !_this.hiddenOptionKeys.includes(option); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The priority of the match.
     */
    ProductMediaNode.priority = external_Coveo_["InterfaceEditor"].ResultComponentNode.priority + 1;
    return ProductMediaNode;
}(external_Coveo_["InterfaceEditor"].ResultComponentNode));

external_Coveo_["InterfaceEditor"].ResultComponentNode.resultComponents.Basic.push(ProductMedia["a" /* ProductMedia */].ID);
external_Coveo_["InterfaceEditor"].Parser.addNodeMatcher(ProductMediaNode_ProductMediaNode);

// EXTERNAL MODULE: ./src/modules/search/ts/index.ts + 3 modules
var ts = __webpack_require__(13);

// CONCATENATED MODULE: ./src/modules/search/interfaceEditor/InterfaceEditorExtension.ts














// Loads our generated documentations in order to be accessible by tooltips
Object(generatedDoc["a" /* loadGeneratedDoc */])();


/***/ }),
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesforceResultLinkNode; });
/* harmony import */ var coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _SalesforceResultLink__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var SalesforceResultLinkNode = /** @class */ (function (_super) {
    __extends(SalesforceResultLinkNode, _super);
    function SalesforceResultLinkNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    SalesforceResultLinkNode.match = function (node) {
        return $(node).hasClass(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["Component"].computeCssClassNameForType(_SalesforceResultLink__WEBPACK_IMPORTED_MODULE_2__[/* SalesforceResultLink */ "a"].ID));
    };
    Object.defineProperty(SalesforceResultLinkNode.prototype, "hiddenOptionKeys", {
        // Properties we don't want to front in the interface editor.
        get: function () {
            return ['titleTemplate', 'onClick'];
        },
        enumerable: true,
        configurable: true
    });
    SalesforceResultLinkNode.priority = coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].ResultComponentNode.priority + 1;
    return SalesforceResultLinkNode;
}(coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].ResultComponentNode));

coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].ResultComponentNode.resultComponents.Basic.push(_SalesforceResultLink__WEBPACK_IMPORTED_MODULE_2__[/* SalesforceResultLink */ "a"].ID);
coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].Parser.addNodeMatcher(SalesforceResultLinkNode);


/***/ }),
/* 108 */,
/* 109 */,
/* 110 */
/***/ (function(module) {

module.exports = JSON.parse("{\"SalesforceQuickview_useAdvancedQuickview\":{\"en\":\"Use Advanced Quickview\"},\"SalesforceQuickview_quickviewUrl\":{\"en\":\"Custom Quickview Page URL\"}}");

/***/ }),
/* 111 */
/***/ (function(module) {

module.exports = JSON.parse("{\"CommunityStateManager_placeholder\":{\"en\":\"Placeholder\"},\"CommunityStateManager_inline\":{\"en\":\"Show Omnibox results inline\"},\"CommunityStateManager_addSearchButton\":{\"en\":\"Include search button\"},\"CommunityStateManager_enableFieldAddon\":{\"en\":\"Enable field addon\"},\"CommunityStateManager_enableSimpleFieldAddon\":{\"en\":\"Enable simple field addon\"},\"CommunityStateManager_listOfFields\":{\"en\":\"List of fields\"},\"CommunityStateManager_enableTopQueryAddon\":{\"en\":\"Enable top query addon\"},\"CommunityStateManager_enableQuerySuggestAddon\":{\"en\":\"Enable Coveo Machine Learning query suggestions addon\"},\"CommunityStateManager_enableQueryExtensionAddon\":{\"en\":\"Enable query extension addon\"},\"CommunityStateManager_activateOmnibox\":{\"en\":\"Activate Omnibox\"},\"CommunityStateManager_autoFocus\":{\"en\":\"Auto focus\"},\"CommunityStateManager_disableQuerySyntax\":{\"en\":\"Disable query syntax\"},\"CommunityStateManager_enableLowercaseOperators\":{\"en\":\"Enable lowercase operators\"},\"CommunityStateManager_enablePartialMatch\":{\"en\":\"Enable partial match\"},\"CommunityStateManager_enableQuerySyntax\":{\"en\":\"Enable query syntax\"},\"CommunityStateManager_enableOmnibox\":{\"en\":\"Enable Omnibox\"},\"CommunityStateManager_enableQuestionMarks\":{\"en\":\"Enable question marks\"},\"CommunityStateManager_enableSearchAsYouType\":{\"en\":\"Enable search as you type\"},\"CommunityStateManager_enableWildcards\":{\"en\":\"Enable wildcards\"},\"CommunityStateManager_partialMatchKeywords\":{\"en\":\"Partial match query threshold\"},\"CommunityStateManager_partialMatchThreshold\":{\"en\":\"Partial match result threshold\"},\"CommunityStateManager_searchAsYouTypeDelay\":{\"en\":\"Search as you type delay\"},\"CommunityStateManager_omniboxDelay\":{\"en\":\"Omnibox delay\"},\"CommunityStateManager_omniboxTimeout\":{\"en\":\"Omnibox timeout\"},\"CommunityStateManager_omniboxChangeLimit\":{\"en\":\"Omnibox change limit\"},\"CommunityStateManager_omniboxMinimumLetters\":{\"en\":\"Omnibox minimum letters\"},\"CommunityStateManager_triggerQueryOnClear\":{\"en\":\"Trigger new query on clear\"},\"Attached_tooltip\":{\"en\":\"Detach\"},\"Attach_tooltip\":{\"en\":\"Attach\"},\"SendAsEmail_tooltip\":{\"en\":\"Send as Email\"},\"PostToFeed_tooltip\":{\"en\":\"Post to Feed\"},\"LiveAgent_tooltip\":{\"en\":\"Send to Chat\"}}");

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return loadGeneratedDoc; });
/* harmony import */ var _bin_docgen_docgen_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(113);
var _bin_docgen_docgen_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(113, 1);

/**
 * Loads our generated documentations into locales
 */
function loadGeneratedDoc() {
    String['locale'] = 'en';
    _bin_docgen_docgen_json__WEBPACK_IMPORTED_MODULE_0__.forEach(function (obj) {
        // Uses the Interface Editor format for loading tooltips
        var key = '_' +
            obj.name
                .replace(/[\s-]+/g, '')
                .replace(/\.options\./g, '.')
                .replace(/_+/g, '.')
                .toLowerCase();
        // Ensures that English locales exists
        String['locales'] = String['locales'] || {};
        String['locales']['en'] = String['locales']['en'] || {};
        // Adding the tooltip from our documentation in English's locales
        String['locales']['en'][key] = obj.comment;
    });
    String['toLocaleString'].call(this, { en: String['locales']['en'] });
}


/***/ }),
/* 113 */
/***/ (function(module) {

module.exports = JSON.parse("[{\"name\":\"AttachToCase\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>AttachToCase</em> component is a Result Templates component that allows you to link a result to a Salesforce case.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>When wanting to attach Knowledge articles, ensure that the <code>sfkbid</code>, <code>sfkbversionnumber</code> (legacy), <code>sfversionnumber</code> (express), and <code>sflanguage</code> fields are properly populated on the article\\n(see <a href=\\\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=285\\\">Add/Edit Mapping</a> for Cloud V2 and <a href=\\\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=190\\\">Managing Fields for a Source</a> for Cloud V1).</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoAttachToCase\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for AttachToCase</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AttachToCase.options.displayText\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should include the Attach/Detach text.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-display-text</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"AttachToCase.options.displayTooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should include the Attach/Detach tooltip.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-display-tooltip</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"AttachToCase.options.readonly\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should be in read only mode. When in read only mode, you cannot Attach or Detach results.\\nThe default value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-readonly</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"AttachToCase.options.recordType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specified the current record type.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Case\"}},{\"name\":\"AttachToCase.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList\",\"notSupportedIn\":\"\",\"comment\":\"<p>The AugmentedResultList component allows you to add some custom data to results retrieved from the coveo index.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>AugmentedResultList</em>.</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.options.fetchAugmentData\",\"notSupportedIn\":\"\",\"comment\":\"<p>The function used to fetch extra result information.\\nDefault value is &quot;@sfid&quot;.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.options.matchingFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>The function to use to determine a match between augment data and query results.\\nDefault function will match results based on &quot;@sfid&quot;.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"AugmentedResultList.options.matchingIdField\",\"notSupportedIn\":\"\",\"comment\":\"<p>The field to be used as matching ID between augment data and query results.</p>\\n\",\"type\":\"IFieldOption\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"AugmentedResultList.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>AugmentedResultList</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Box\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>Box</em> component represents the container that includes all the other <code>box</code> components.\\nIt inherits from a <a href=\\\"https://coveo.github.io/search-ui/components/searchinterface.html\\\">SearchInterface Component</a> and supports all of its options.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBox'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Box.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Box.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Box.responsiveComponents\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows to get and set the different breakpoints for mobile and tablet devices.\\nThis is useful, amongst other, for Facet, Tab and ResultList</p>\\n\",\"type\":\"ResponsiveComponents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Box.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Box.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for Box</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Box.options.enableAutomaticResponsiveMode\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the component should automatically adapt to the screen size.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-automatic-reponsive-mode</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"Box.options.enableBoxStateHistory\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if you wish to save and reload the <code>Box</code> state when the page is closed and reopened.\\nThis saves the current state of the current tab that is selected.</p>\\n<p>If set to <code>false</code>, the tab reverts to the default one on each page load.</p>\\n<p>If set to <code>true</code>, each time you reload the page, the last tab that you selected will be automatically selected.</p>\\n<p>Default value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-box-state-history</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Box.options.excerptLength\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the length (in characters) of the result text (excerpt) to display.\\nDefault value is <code>80</code>.</p>\\n<p>Minimum value is <code>0</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-excerpt-length</span>=<span class=\\\"hljs-string\\\">\\\"80\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"80\"}},{\"name\":\"Box.options.resultsPerPage\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the number of results you want per page.\\nDefault value is <code>20</code>.</p>\\n<p>Minimum value is <code>0</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-results-per-page</span>=<span class=\\\"hljs-string\\\">\\\"20\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"20\"}},{\"name\":\"Box.options.useLocalStorageForBoxState\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if you wish to use the local storage to save the box state. This means that the query state is only loaded on page load.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-local-storage-for-box-state</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Box.options.withAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the box should automatically include an <code>analytics</code> component.\\nIf you already have one on the page, then it is not added twice. However, setting it to <code>false</code> removes it from the page on initialization.</p>\\n<p>Default value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-with-analytics</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Box.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new SearchInterface. Initialize various singletons for the interface (e.g., usage analytics, query\\ncontroller, state model, etc.). Binds events related to the query.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxBody</em> component takes care of appending a <a href=\\\"https://coveo.github.io/search-ui/components/resultlist.html\\\">ResultList Component</a> and ensuring the correct CSS styles are applied so that infinite scrolling works properly.\\nBy default, the <em>ResultList</em> component is initialized with the following option:</p>\\n<pre><code><span class=\\\"hljs-attr\\\">enableInfiniteScroll:</span> <span class=\\\"hljs-literal\\\">true</span><span class=\\\"hljs-string\\\">;</span>\\n</code></pre><p>When you wish to modify other options on the <em>ResultList</em> component, when initializing the framework, add the following code.</p>\\n<p>Remember to change <code>#MyBox</code> with the id of your <code>CoveoBoxBody</code> component, and <code>20</code> with the page size you wish to modify.</p>\\n<pre><code class=\\\"lang-js\\\">$(<span class=\\\"hljs-string\\\">'#MyBox'</span>).coveo(<span class=\\\"hljs-string\\\">'initBox'</span>, {\\n    <span class=\\\"hljs-attr\\\">BoxBody</span> : {\\n        <span class=\\\"hljs-attr\\\">infiniteScrollPageSize</span> : <span class=\\\"hljs-number\\\">20</span>\\n    }\\n})\\n</code></pre>\\n<p>Use this component on your page this way:</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxBody'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for boxBody</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.autoSelectFieldsToInclude\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the <code>ResultList</code> should scan its result templates to discover which fields it must request to\\nbe able to render all results.\\nSetting this option to <code>true</code> ensures that the Coveo Search API does not return fields that are unnecessary for\\nthe UI to function.</p>\\n<p>Default value is <code>false</code>, which means that for each result, the Coveo Search API returns all available fields\\n(unless you specify a list of values in the <code>fieldsToInclude</code> option,\\nin which case the Coveo Search API only returns those fields, if they are available).</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Many interfaces created with the JavaScript Search Interface Editor explicitly set this option to <code>true</code>.</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-auto-select-fields-to-include</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.enableInfiniteScroll\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the component should automatically load more results when the user has reached the bottom of the result list.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-enable-infinite-scroll</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxBody.options.enableInfiniteScrollWaitingAnimation\",\"notSupportedIn\":\"\",\"comment\":\"<p>When the <code>enableInfiniteScroll</code> option is <code>true</code>, specifies\\nwhether to display the <code>waitingAnimation</code> while fetching additional\\nresults.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-enable-infinite-scroll-waiting-animation</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.fieldsToInclude\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a list of fields to include in the query results.\\nIf you set the <code>autoSelectFieldsToInclude</code> option to\\n<code>true</code>, the Coveo Search API returns the fields you specify for this option (if those fields are available) in\\naddition to the fields which the <code>ResultList</code> automatically requests.</p>\\n<p>Otherwise, the Coveo Search API only returns the fields you specify for this option (if those fields are\\navailable), unless you leave this option undefined, in which case the Coveo Search API returns all available\\nfields.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-fields-to-include</span>=<span class=\\\"hljs-string\\\">\\\"@myFirstField,@mySecondField,@myNthField\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"Object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.infiniteScrollContainer\",\"notSupportedIn\":\"\",\"comment\":\"<p>When the <code>enableInfiniteScroll</code> option is <code>true</code>, specifies the\\nelement that triggers fetching additional results when the end user scrolls down to its bottom.\\nYou can change the container by specifying its selector (e.g.,\\n<code>data-infinite-scroll-container-selector=&#39;#someCssSelector&#39;</code>).</p>\\n<p>By default, the framework uses the first vertically scrollable parent element it finds, starting from the\\n<code>ResultList</code> element itself. A vertically scrollable element is an element whose CSS <code>overflow-y</code> attribute is\\n<code>scroll</code>.</p>\\n<p>This implies that if the framework cannot find a scrollable parent, it uses the <code>window</code> itself as a scrollable\\ncontainer.</p>\\n<p>This heuristic is not perfect, for technical reasons. There are always some corner case CSS combination which the\\nframework will not be able to correctly detect as &#39;scrollable&#39;.</p>\\n<p>It is highly recommended that you manually set this option if you wish something else than the <code>window</code> to be the\\nscrollable element.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-infinite-scroll-container</span>=<span class=\\\"hljs-string\\\">\\\"myElement\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.infiniteScrollPageSize\",\"notSupportedIn\":\"\",\"comment\":\"<p>If the <code>enableInfiniteScroll</code> option is <code>true</code>, specifies the\\nnumber of additional results to fetch when the user scrolls down to the bottom of the\\n<code>infiniteScrollContainer</code>.\\nDefault value is <code>10</code>. Minimum value is <code>1</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-infinite-scroll-page-size</span>=<span class=\\\"hljs-string\\\">\\\"10\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.resultContainer\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the element inside which to insert the rendered result templates.\\nPerforming a new query clears the content of this element.</p>\\n<p>You can change the container by specifying its selector (e.g.,\\n<code>data-result-container-selector=&#39;#someCssSelector&#39;</code>).</p>\\n<p>If you do not specify a value for this option, a <code>div</code> element will be dynamically created and appended to the result\\nlist. This element will then be used as a result container.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-result-container</span>=<span class=\\\"hljs-string\\\">\\\"myElement\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.waitAnimation\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the type of animation to display while waiting for a query to return.\\nThe possible values are:</p>\\n<ul>\\n<li><code>fade</code>: Fades out the current list of results while the query is executing.</li>\\n<li><code>spinner</code>: Shows a spinning animation while the query is executing.</li>\\n<li><code>none</code>: Use no animation during queries.</li>\\n</ul>\\n<p>See also the <code>waitAnimationContainer</code> option.</p>\\n<p>Default value is <code>none</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-wait-animation</span>=<span class=\\\"hljs-string\\\">\\\"none\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.options.waitAnimationContainer\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the element inside which to display the <code>waitAnimation</code>.\\nYou can change this by specifying a CSS selector (e.g.,\\n<code>data-wait-animation-container-selector=&#39;#someCssSelector&#39;</code>).</p>\\n<p>Default value is the value of the <code>resultContainer</code> option.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxBody\\\"</span> <span class=\\\"hljs-attr\\\">data-wait-animation-container</span>=<span class=\\\"hljs-string\\\">\\\"myElement\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxBody.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxCreateArticle</em> component allows the use of the Create Article button in the Coveo Insight Panel (see <a href=\\\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=243\\\">Adding a Create Article Button to the Insight Panel</a>).\\nUse this component inside the <code>coveo-box-settings</code> div.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"coveo-box-settings\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxCreateArticle\\\"</span> <span class=\\\"hljs-attr\\\">target</span>=<span class=\\\"hljs-string\\\">\\\"_blank\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n    ...\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for BoxCreateArticle</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.options.articleTypeFilter\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the Knowledge Article types to offer as options when creating an article.\\nBy default, all the available Knowledge Article types are displayed.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxCreateArticle\\\"</span> <span class=\\\"hljs-attr\\\">data-article-type-filter</span>=<span class=\\\"hljs-string\\\">\\\"knowledge__kav,troubleshooting__kav\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"Object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCreateArticle.options.hidden\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should be hidden from the display.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxCreateArticle\\\"</span> <span class=\\\"hljs-attr\\\">data-hidden</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxCreateArticle.options.openInPrimaryTab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to open the created article in a primary tab or, when set to false, to open it in a sub tab.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxCreateArticle\\\"</span> <span class=\\\"hljs-attr\\\">data-open-in-primary-tab</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxCreateArticle.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxCurrentSort</em> component is only meant as a utility to set the title on its BoxPopup Component container.\\nWhenever the current sort changes, for instance when a user clicks on a new <a href=\\\"https://coveo.github.io/search-ui/components/sort.html\\\">Sort Component</a>, this component takes care of setting a new title on the BoxPopup Component.\\nThis component must be included inside a BoxPopup component.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxPopup'</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxCurrentSort'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"coveo-sort-section\\\"</span>&gt;</span>\\n        [[sorts]]\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentSort.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxCurrentTab</em> component is only meant as a utility to set the title on its BoxPopup Component container.\\nWhenever the current tab changes, for instance when a user clicks on a new <a href=\\\"https://coveo.github.io/search-ui/components/tab.html\\\">Tab Component</a>, this component takes care of setting a new title on the BoxPopup Component.\\nThis component must be included inside a BoxPopup component.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxPopup'</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxCurrentTab'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"coveo-tab-section\\\"</span>&gt;</span>\\n        [[sorts]]\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxCurrentTab.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxEditLink</em> component provides a clickable button that expands the current interface to another page that contains the Interface Editor.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxEditLink'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for BoxEditLink</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.options.icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the icon that the component should use.\\nDefault value is <code>coveo-sprites-box-settings</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">data-icon</span>=<span class=\\\"hljs-string\\\">'coveo-sprites-box-settings'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"coveo\"}},{\"name\":\"BoxEditLink.options.text\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the text to display alongside the icon.\\nDefault value is the localized string for <code>GoToEdition</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">data-text</span>=<span class=\\\"hljs-string\\\">'My text'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"GoToEdition\"}},{\"name\":\"BoxEditLink.options.uri\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the URI of the page that hosts the Interface Editor.\\nThis option is normally already set for you when you include the Box Visualforce Component.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">data-uri</span>=<span class=\\\"hljs-string\\\">'/apex/InterfaceEditor'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxEditLink.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxExpandLink</em> component takes care of creating a clickable link that expands to a full search interface page.\\nIt also takes care of sending the current state of the Box component to the full search interface so that you get the same (or a similar) result set when the full search page loads.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxExpandLink\\\"</span> <span class=\\\"hljs-attr\\\">target</span>=<span class=\\\"hljs-string\\\">\\\"_blank\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for BoxExpandLink</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.options.hd\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the description to display when the full search page loads with a context filter.\\nDefault value is the localized string for <code>Context</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-hd</span>=<span class=\\\"hljs-string\\\">'Context'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Context\"}},{\"name\":\"BoxExpandLink.options.icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the CSS class of the icon to display on the expand button.\\nDefault value is <code>coveo-icon coveo-sprites-box-icon_external</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-icon</span>=<span class=\\\"hljs-string\\\">'custom-icon'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"coveo\"}},{\"name\":\"BoxExpandLink.options.targetTab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the <code>id</code> of the <code>Tab</code> component to load in the full search page when the user expands the box.\\nDefault value is <code>undefined</code>, and the component uses the current <code>Tab</code> component as its <code>targetTab</code> when the user expands the box to a full search page.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-target-tab</span>=<span class=\\\"hljs-string\\\">'SomeTabId'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.options.text\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the text content to add inside the icon HTML element.\\nDefault value is the localized string for <code>GoToFullSearch</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-text</span>=<span class=\\\"hljs-string\\\">'Go To Full Search'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"GoToFullSearch\"}},{\"name\":\"BoxExpandLink.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the title to display in the tab or sub tab that opens inside the Salesforce console when the user clicks the component to expand the <code>Box</code>.\\nDefault value is the localized string for <code>Coveo Search</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">'Search Page'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Coveo\"}},{\"name\":\"BoxExpandLink.options.toPrimaryTab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to open the full search page as a primary or as a sub tab inside the Salesforce console.\\nDefault value is <code>true</code>.</p>\\n<p>Setting this option to <code>false</code> makes the full search page open as a sub tab inside the Salesforce console.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-to-primary-tab</span>=<span class=\\\"hljs-string\\\">'false'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxExpandLink.options.uri\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the URI of the full search page to load when the user expands the <code>Box</code>.\\nMost of the time, you do not have to specify a value manually for this option. The Box Visualforce Component already takes care of setting this option correctly.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-uri</span>=<span class=\\\"hljs-string\\\">'https://mysalesforce.na15.visual.force.com/apex/CoveoSearch'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxExpandLink.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxHeader</em> component takes care of instantiating a <code>Searchbox</code> component with preconfigured options and a placeholder (see <a href=\\\"https://coveo.github.io/search-ui/components/searchbox.html\\\">Coveo Searchbox Component</a>).\\nOptionally, this component can also display a <strong>Remove context</strong> checkbox. You should normally place this component at the top of your box.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxHeader'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for BoxHeader</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxHeader.options.allowNonContextualSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>When <code>includeSearchbox</code> is <code>true</code>, specifies whether to display a <strong>Remove context</strong> checkbox when the end user starts typing in the search box.\\nWhen checked, this checkbox removes the part of the query expression that was added by the query components.</p>\\n<p><strong>Example:</strong></p>\\n<blockquote>\\n<p>When a user opens a case about a <code>Power Generator</code>, items related to the <code>Power Generator</code> are shown. When the user starts typing the search box while <code>allowNonContextualSearch</code> is <code>true</code>, a checkbox will appear to allow them to disable the query and show items outside of the <code>Power Generator</code> scope.</p>\\n</blockquote>\\n<p>Default is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-allow-non-contextual-search</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxHeader.options.enableSearchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>When the <code>includeSearchbox</code> option is enabled, activates the search-as-you-type feature for the search box.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-search-as-you-type</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxHeader.options.includeSearchbox\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to initialize a Searchbox component.\\nDefault value is <code>true</code>.</p>\\n<p>When this option is set to <code>true</code>, the component initializes a Searchbox component with the <code>enableSearchAsYouType</code> and <code>searchAsYouTypeDelay</code> options.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-include-search-box</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxHeader.options.includeSettings\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to include the settings icon, which is usually to the right of the search box.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-include-settings</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxHeader.options.placeholder\",\"notSupportedIn\":\"\",\"comment\":\"<p>When <code>includeSearchbox</code> is <code>true</code>, specifies the placeholder to set in the <code>Searchbox</code>.\\nDefault value is the localized string for <code>Search</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-placeholder</span>=<span class=\\\"hljs-string\\\">'Enter your query here'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Search\"}},{\"name\":\"BoxHeader.options.searchAsYouTypeDelay\",\"notSupportedIn\":\"\",\"comment\":\"<p>When the <code>includeSearchbox</code> and <code>enableSearchAsYouType</code> options are enabled, specifies the amount of time, in miliseconds, before refreshing the query based on what the user has typed.\\nMinimum value is <code>0</code>.</p>\\n<p>Default value is <code>300</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-search-as-you-type-delay</span>=<span class=\\\"hljs-string\\\">\\\"300\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"300\"}},{\"name\":\"BoxHeader.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxPopup</em> component is only a container inside of which you can drop any other content or component.\\nSince the Box component is designed to be included in the Salesforce console sidebar with a limited amount of space, it might be useful to add section that can be hidden or shown when the user clicks on them.</p>\\n<p>The HTML content inside the <code>BoxPopup</code> div is used to determine what is shown or hidden when the panel is opened and closed.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxPopup'</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'coveo-facet-column'</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoFacet'</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">'@myfirstfacet'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoFacet'</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">'@mysecondfacet'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoFacet'</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">'@mythirdfacet'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for BoxPopup</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.options.fullHeight\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the popup should open with the fully available height of the page.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-full-height</span>=<span class=\\\"hljs-string\\\">'false'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxPopup.options.fullWidth\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the popup should open with the fully available width of the page.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-full-width</span>=<span class=\\\"hljs-string\\\">'false'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxPopup.options.hidden\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the component should be hidden.\\nDefaut value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-hidden</span>=<span class=\\\"hljs-string\\\">'false'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxPopup.options.icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the CSS class used for your icon.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-icon</span>=<span class=\\\"hljs-string\\\">'custom-icon-class'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPopup.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the static title to display.\\nDefault value is <code>Click here to open</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Since this component exposes methods to set its title, it is possible that other components contained inside this container dynamically set it.</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">'Click here to open'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Click\"}},{\"name\":\"BoxPopup.options.withAnimation\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the popup should open with an animation.\\nThe animation is completely CSS based. To modify the animation itself, modify the CSS rules that apply to the relevant elements.</p>\\n<p>Default value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-with-animation</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxPopup.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxQuerySome</em> component is used to automatically include Salesforce fields to the query of an Insight Panel.\\nBy default, the fields are included in the advanced query (see <a href=\\\"https://developers.coveo.com/x/P4CpAQ#ProfilingaQuery-AdvancedExpression\\\">Advanced Expression</a>).\\nThis component is included in the default Insight Panel to include the case subject.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxQuerySome\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxQuerySummary</em> component inherits from the <code>QuerySummary</code> component (see <a href=\\\"https://coveo.github.io/search-ui/components/querysummary.html\\\">Coveo QuerySummary Component</a>).\\nIts only added functionality is to display the range of currently displayed results when the result list is using infinite scrolling.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxQuerySummary'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySummary.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxResultAction</em> component displays a small actionable button inside each result. When clicked, this button displays other sub components in a menu, such as the <code>BoxQuickview</code> Component.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>For more information on how to implement your own custom actions inside this component, see <a href=\\\"https://developers.coveo.com/x/mAYvAg\\\">Creating Custom Actions for an Insight Panel or a Custom Box</a>.</p>\\n</blockquote>\\n<p>This component is intended to be included inside a <code>BoxBody</code> <a href=\\\"https://coveo.github.io/search-ui/components/resultlist.html\\\">ResultList Component</a>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxResultAction'</span>&gt;</span>\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Include other components here, such as the BoxQuickView or BoxAttachToCase components --&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The available options for BoxResultAction</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxResultAction.options.displayInline\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies that components contained inside the <code>ResultAction</code> component should instead be displayed inline, and not inside a clickable menu.\\nSetting this option to <code>true</code> also displays icons to identify the actions.</p>\\n<p>Default value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxResultAction'</span> <span class=\\\"hljs-attr\\\">data-display-inline</span>=<span class=\\\"hljs-string\\\">'false'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxResultAction.options.menuDelay\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the delay, in milliseconds, before the menu disappears when the user&#39;s mouse leaves the menu icon.\\nMinimum value is <code>0</code>.</p>\\n<p>Default value is <code>300</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxResultAction'</span> <span class=\\\"hljs-attr\\\">data-menu-delay</span>=<span class=\\\"hljs-string\\\">'300'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"300\"}},{\"name\":\"BoxResultAction.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>Cancel</em> component adds a button to cancel the case creation.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoCancel'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for Cancel</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Cancel.options.redirectUrl\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies where to redirect the user once the case has been canceled.\\nThis option is empty by default.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-redirect-url</span>=<span class=\\\"hljs-string\\\">'http://www.coveo.com'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"Cancel.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the text to display on the button.\\nThe default value is <code>Cancel</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">'Cancel'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Cancel\"}},{\"name\":\"Cancel.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>CaseCreation</em> component creates a form that allows Salesforce users to submit a case.\\nThe form automatically searches for solutions while the user is filling form parameters.\\nTo work, this component needs to interact with other components that contain the necessary information to create the case.\\n<strong>Warning:</strong></p>\\n<blockquote>\\n<p>A <em>CaseCreation</em> component must be present on the page for the form to work.</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoCaseCreation'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for CaseCreation</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseCreation.options.openLinkInNewWindow\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to open the link that the component creates in a new window.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-open-link-in-new-window</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"CaseCreation.options.searchDelay\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the delay (in milliseconds) before triggering a new query when the end user types new text inside a <a href=\\\"https://developers.coveo.com/x/bgKwAQ\\\">Field</a> component.\\nDefault value is <code>500</code>.</p>\\n<p>Minimum value is <code>0</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-search-delay</span>=<span class=\\\"hljs-string\\\">'500'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"500\"}},{\"name\":\"CaseCreation.options.searchSort\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies how to sort the results.\\nDefault value is <code>relevancy</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>For more information on the way sorting works, see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$sort\\\">Standard Query Extensions - $sort</a>.\\nThe <code>fielddescending</code> and <code>fieldascending</code> sorts are unavailable for this component.</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-search-sort</span>=<span class=\\\"hljs-string\\\">'relevancy'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"relevancy\"}},{\"name\":\"CaseCreation.options.searchType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies to return only a certain type of results (see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$type\\\">Standard Query Extensions - $type</a>).\\nDefault value is the empty string.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-search-type</span>=<span class=\\\"hljs-string\\\">'Account'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"CaseCreation.options.sendCaseDataToAnalytic\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the component should send case-related metadata when logging case creation events in the Coveo Usage Analytics service.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-send-case-data-to-analytic</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"CaseCreation.options.someBest\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an absolute or relative (percentage) value indicating the number of best keywords that the query must match (see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$some\\\">Standard Query Extensions - $some</a>).\\nKeywords that occur less frequently in the index are considered better than those that are very common.</p>\\n<p>Specifying a value for this option is only useful if the <code>useSomeQRE</code> option is <code>true</code>.</p>\\n<p>Default value is an empty string.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-some-q-r-e</span>=<span class=\\\"hljs-string\\\">'true'</span> <span class=\\\"hljs-attr\\\">data-some-best</span>=<span class=\\\"hljs-string\\\">'50%'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-some-q-r-e</span>=<span class=\\\"hljs-string\\\">'true'</span> <span class=\\\"hljs-attr\\\">data-some-best</span>=<span class=\\\"hljs-string\\\">'2'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"CaseCreation.options.someMatch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an absolute or relative (percentage) value indicating the minimum number of keywords that the query must match (see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$some\\\">Standard Query Extensions - $some</a>).\\nSpecifying a value for this options is only useful if the <code>useSomeQRE</code> option is <code>true</code>.</p>\\n<p>Default value is the string <code>1</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-some-q-r-e</span>=<span class=\\\"hljs-string\\\">'true'</span> <span class=\\\"hljs-attr\\\">data-some-match</span>=<span class=\\\"hljs-string\\\">'50%'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n<p><br /></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-some-q-r-e</span>=<span class=\\\"hljs-string\\\">'true'</span> <span class=\\\"hljs-attr\\\">data-some-match</span>=<span class=\\\"hljs-string\\\">'5'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"1\"}},{\"name\":\"CaseCreation.options.someMaximum\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the maximum number of keywords to use (see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$some\\\">Standard Query Extensions - $some</a>).\\nIf the query contains a larger number of keywords, remaining keywords are simply ignored.</p>\\n<p>Specifying a value for this options is only useful if the <code>useSomeQRE</code> option is <code>true</code>.</p>\\n<p>Default vlaue is <code>300</code>.</p>\\n<p>Minimum value is <code>0</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-some-q-r-e</span>=<span class=\\\"hljs-string\\\">'true'</span> <span class=\\\"hljs-attr\\\">data-some-maximum</span>=<span class=\\\"hljs-string\\\">'100'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"300\"}},{\"name\":\"CaseCreation.options.useDefaultRule\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to use the Assignment Rules (see <a href=\\\"https://help.salesforce.com/articleView?id=creating_assignment_rules.htm&amp;type=0\\\">Set Up Assignment Rules</a>).\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-default-rule</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"CaseCreation.options.useSomeQRE\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to generate the query using the <code>$some</code> query extension instead of Coveo™ Machine Learning (see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$some\\\">Standard Query Extensions - $some</a>).\\nSetting this option to <code>true</code> effectively disables Coveo Machine Learning for this component.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-some-q-r-e</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"CaseCreation.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>ChatterThumbnail</em> component is used in result templates to display the Chatter avatar of users.\\nIt is included by default in the User result template.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoChatterThumbnail\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for the ChatterThumbnail</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ChatterThumbnail.options.height\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the height of the thumbnail.\\nDefault value is <code>45px</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">height</span>=<span class=\\\"hljs-string\\\">'45px'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"45px\"}},{\"name\":\"ChatterThumbnail.options.width\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the width of the thumbnail.\\nDefaut value is <code>45px</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">width</span>=<span class=\\\"hljs-string\\\">'45px'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"45px\"}},{\"name\":\"ChatterThumbnail.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>CommunityStateManager</em> component is used to connect your Lightning search component to the Coveo Standalone Searchbox (see <a href=\\\"https://developers.coveo.com/x/lRwvAg\\\">Including the Standalone Searchbox in Your Community</a>).\\nThis component is used in a Lightning search page, in the <code>coveo-search-section</code>, as such:</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"coveo-search-section\\\"</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoCommunityStateManager\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The option for the CommunityStateManager component</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options.enableLowercaseOperators\",\"notSupportedIn\":\"\",\"comment\":\"<p>Performs the same function as the Querybox option of the same name (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.enablelowercaseoperators\\\">Querybox - enableLowercaseOperators</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-lowercase-operators</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options.enablePartialMatch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Performs the same function as the Querybox option of the same name (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.enablepartialmatch\\\">Querybox - enablePartialMatch</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-partial-match</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options.enableQuerySyntax\",\"notSupportedIn\":\"\",\"comment\":\"<p>Performs the same function as the Querybox option of the same name (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\\\">Querybox - enableQuerySyntax</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-query-syntax</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options.enableQuestionMarks\",\"notSupportedIn\":\"\",\"comment\":\"<p>Performs the same function as the Querybox option of the same name (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequestionmarks\\\">Querybox - enableQuestionMarks</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-question-marks</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options.enableWildcards\",\"notSupportedIn\":\"\",\"comment\":\"<p>Performs the same function as the Querybox option of the same name (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.enablewildcards\\\">Querybox - enableWildcards</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-wildcards</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options.partialMatchKeywords\",\"notSupportedIn\":\"\",\"comment\":\"<p>Performs the same function as the Querybox option of the same name (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold\\\">Querybox - partialMatchThreshold</a>).\\nThis feature is only available to Coveo for Salesforce Pro and Enterprise users.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-partial-match-keywords</span>=<span class=\\\"hljs-string\\\">\\\"5\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.options.partialMatchThreshold\",\"notSupportedIn\":\"\",\"comment\":\"<p>Performs the same function as the Querybox option of the same name (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold\\\">Querybox - partialMatchThreshold</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-partial-match-threshold</span>=<span class=\\\"hljs-string\\\">\\\"50%\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CommunityStateManager.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>CreateArticle</em> component allows you to create an Article from the current page using Salesforce.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoCreateArticle\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n<p>You can also specify multiple type of Article to create using the <code>articleTypes</code> property.</p>\\n<pre><code class=\\\"lang-javascript\\\"> Coveo.option(root, {\\n   <span class=\\\"hljs-attr\\\">CreateArticle</span>: {\\n     <span class=\\\"hljs-attr\\\">articleTypes</span>: [\\n         {<span class=\\\"hljs-attr\\\">name</span>: <span class=\\\"hljs-string\\\">\\\"Knowledge\\\"</span>, <span class=\\\"hljs-attr\\\">apiName</span>: <span class=\\\"hljs-string\\\">\\\"Knowledge__kav\\\"</span>},\\n         {<span class=\\\"hljs-attr\\\">name</span>: <span class=\\\"hljs-string\\\">\\\"Documentation\\\"</span>, <span class=\\\"hljs-attr\\\">apiName</span>: <span class=\\\"hljs-string\\\">\\\"Documentation__kav\\\"</span>}\\n     ]\\n   }\\n })\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>CreateArticle</em></p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.options.objectTypes\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the list of objects that the component can create.\\nDefault is <code>[{ &quot;name&quot;: &quot;Knowledge&quot;, &quot;apiName&quot;: &quot;Knowledge__kav&quot; }]</code></p>\\n<pre><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-object-types</span>=<span class=\\\"hljs-string\\\">\\\"[{ &amp;#x22;name&amp;#x22;: &amp;#x22;Knowledge&amp;#x22;, &amp;#x22;apiName&amp;#x22;: &amp;#x22;Knowledge__kav&amp;#x22; }]\\\"</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"Object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticle.options.openInSubtab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to open the new page in a subtab.\\nDefault is <code>true</code></p>\\n<pre><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-open-in-subtab</span>=<span class=\\\"hljs-string\\\">'true'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"CreateArticle.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the title of the CreateArticle button.\\nDefault is <code>Create Article</code></p>\\n<pre><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">'New Article'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Create\"}},{\"name\":\"CreateArticle.options.useDefault\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to use the default article type.\\nDefault is <code>false</code></p>\\n<pre><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-default</span>=<span class=\\\"hljs-string\\\">'true'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"CreateArticle.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>CreateArticleButton</em> component allows you to create a knowledge article from the current page.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoCreateArticleButton'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The available options for <em>CreateArticleButton</em>.</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CreateArticleButton.options.articleApiName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the Article type to create. Use the API name.\\nDefault is <code>Knowledge__kav</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoCreateArticleButton'</span> <span class=\\\"hljs-attr\\\">data-article-api-name</span>=<span class=\\\"hljs-string\\\">'Topic__kav'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"CreateArticleButton\"}},{\"name\":\"CreateArticleButton.options.openInSubtab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to create the knowledge article in a subtab.\\nSetting this option to <code>false</code> opens in a primary tab instead.\\nDefault is <code>true</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoCreateArticleButton'</span> <span class=\\\"hljs-attr\\\">data-open-in-subtab</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"CreateArticleButton.options.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the button tooltip.\\nDefault is <code>Create a knowledge article</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoCreateArticleButton'</span> <span class=\\\"hljs-attr\\\">data-tooltip</span>=<span class=\\\"hljs-string\\\">'Create a knowledge article'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Create\"}},{\"name\":\"CreateArticleButton.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>FullSearch</em> component allows your users access to a full length Coveo search page inside the Lightning experience.</p>\\n<pre><code class=\\\"lang-html\\\">    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoFullSearch\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>FullSearch</em></p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearch.options.fullSearchComponentName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of the component to open when clicked\\n    Default is <code>CoveoV2__FullSearch</code></p>\\n<pre><code class=\\\"lang-html\\\">   <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-full-search-component</span>=<span class=\\\"hljs-string\\\">'CoveoV2__FullSearch'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"CoveoV2\"}},{\"name\":\"FullSearch.options.openInSubtab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to open the new page in a subtab.\\n Default is <code>true</code></p>\\n<pre><code class=\\\"lang-html\\\">   <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-open-in-subtab</span>=<span class=\\\"hljs-string\\\">'false'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"FullSearch.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the title of the FullSearch button.\\n Default is <code>Full Search</code></p>\\n<pre><code class=\\\"lang-html\\\">   <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">'My Full Search'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Full\"}},{\"name\":\"FullSearch.options.visible\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the visibility of the component\\n Default is <code>true</code></p>\\n<pre><code class=\\\"lang-html\\\">   <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-visible</span>=<span class=\\\"hljs-string\\\">'false'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"FullSearch.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>FullSearchButton</em> component allows to open a full length Coveo search page inside the Lightning experience.</p>\\n<pre><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoFullSearchButton'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>FullSearchButton</em></p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchButton.options.fullSearchComponentName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of the component to open when clicked\\n    Default is: <code>CoveoV2__FullSearch</code></p>\\n<pre><code class=\\\"lang-html\\\">   <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoFullSearchButton'</span> <span class=\\\"hljs-attr\\\">data-full-search-component</span>=<span class=\\\"hljs-string\\\">'CoveoV2__FullSearch'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"CoveoV2\"}},{\"name\":\"FullSearchButton.options.openInSubtab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to open the full search in a subtab.\\nDefault is: <code>true</code></p>\\n<pre><code class=\\\"lang-html\\\"> <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoFullSearchButton'</span> <span class=\\\"hljs-attr\\\">data-open-in-subtab</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"FullSearchButton.options.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the tooltip to display with the button.\\nDefault is: <code>Open search in a new tab</code></p>\\n<pre><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoFullSearchButton'</span> <span class=\\\"hljs-attr\\\">data-tooltip</span>=<span class=\\\"hljs-string\\\">'Open search in a new tab'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Open\"}},{\"name\":\"FullSearchButton.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>input</em> component is used by the Field and the Picklist components.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Input.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>InsightQuerySummary</em> component is a composite component that displays a title or a query summary depending whether a user query is performed.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoInsightQuerySummary'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.SummaryGroupClass\",\"notSupportedIn\":\"\",\"comment\":\"<p>The CSS class name representing the elements of the summary group.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.TitleGroupClass\",\"notSupportedIn\":\"\",\"comment\":\"<p>The CSS class name representing the elements of the title group.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"InsightQuerySummary.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Product Media</code> component is used to display a product media image in a result template.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoProductMedia'</span> <span class=\\\"hljs-attr\\\">data-media-type</span>=<span class=\\\"hljs-string\\\">'Product Image'</span> <span class=\\\"hljs-attr\\\">data-width</span>=<span class=\\\"hljs-string\\\">'70px'</span> <span class=\\\"hljs-attr\\\">data-height</span>=<span class=\\\"hljs-string\\\">'70px'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.options.height\",\"notSupportedIn\":\"\",\"comment\":\"<p>The height of the image.\\n<br><br>\\nThe component uses this field value to set the <code>height</code> attribute of the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\\\"><code>img</code></a> HTML tag it generates.\\n<br><br>\\nRequires standard CSS syntax and units.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"required\":\"true\"}},{\"name\":\"ProductMedia.options.mediaType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The type of media resource to display.\\n<br><br>\\nThe component uses this field value to build and set the value of the <code>src</code> attribute of the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\\\"><code>img</code></a> HTML tag it generates.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"required\":\"true\"}},{\"name\":\"ProductMedia.options.staticResourceResolver\",\"notSupportedIn\":\"\",\"comment\":\"<p>The function used resolve the path to the static resource image.</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMedia.options.width\",\"notSupportedIn\":\"\",\"comment\":\"<p>The width of the image.\\n<br><br>\\nThe component uses this field value to set the <code>width</code> attribute of the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\\\"><code>img</code></a> HTML tag it generates.\\n<br><br>\\nRequires standard CSS syntax and units.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"required\":\"true\"}},{\"name\":\"ProductMedia.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ProductMedia</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction\",\"notSupportedIn\":\"\",\"comment\":\"<p>The base class for all ResultAction components.\\nIts main responsibility is handling the visual elements of the Result Action.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>ResultAction</em>.</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.options.icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>See IResultActionOptions.icon\\nOptional. You may instead provide the icon by appending it as a child element.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.options.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>See IResultActionOptions.tooltip\\nOptional. If no tooltip is provided, the tooltip popup will not appear.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultAction.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Construct a ResultAction component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>SalesforceAdaptiveResultLink</em> is a factory component that chooses which of the <em>ConsoleResultLink</em>, <em>SalesforceResultLink</em>, or the <em>ResultLink</em> should be used in a given context. The Salesforce environment, the hosting component, and the location of the search result are all taken into consideration to render the component that is best suited to open the result.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoSalesforceAdaptiveResultLink'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdaptiveResultLink.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>SalesforceQuickview</em> component inherits from the Quickview component, and thus provides all the same options(see <a href=\\\"https://coveo.github.io/search-ui/components/quickview.html\\\">Coveo Component Quickview</a>).\\nIt is made to support LockerService (see <a href=\\\"https://developer.salesforce.com/docs/atlas.en-us.212.0.lightning.meta/lightning/security_code.htm\\\">What is LockerService?</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoSalesforceQuickView'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickview.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>SalesforceThumbnail</em> component is used in result templates to display a thumbnail preview for Salesforce content documents.\\nIt is included by default in the Document result template.</p>\\n<p><strong>NOTE:</strong></p>\\n<blockquote>\\n<p>Objects without attachments may fail to render a preview. You should only use it for Salesforce Content documents.</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoSalesforceThumbnail\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for the Salesforce Thumbnail</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceThumbnail.options.height\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the height of the thumbnail.\\nDefault is <code>auto</code>, meaning that it scales with the given width.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">data-height</span>=<span class=\\\"hljs-string\\\">'auto'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"auto\"}},{\"name\":\"SalesforceThumbnail.options.width\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the width of the thumbnail.\\nDefault value is <code>120px</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">data-width</span>=<span class=\\\"hljs-string\\\">'120px'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"120px\"}},{\"name\":\"SalesforceThumbnail.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>Submit</em> component adds a button to submit a case.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoSubmit\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for submit</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Submit.options.redirectUrl\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies where to redirect the user once the case has been submitted.\\nBy default, this option redirects to the newly created case page.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-redirect-url</span>=<span class=\\\"hljs-string\\\">'http://www.coveo.com'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"Submit.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the text to display on the button.\\nDefault value is <code>Submit</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">\\\"Submit\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Submit\"}},{\"name\":\"Submit.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>UserActions</em> component allows your agents to see the actions performed by the end-user before or after the creation of a case within the Salesforce console.\\nThe component takes the information from the Coveo Usage Analytics events performed during the visit in which the case was created,\\nas seen from the Visit Browser page of the Coveo Cloud Administration Console (see <a href=\\\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=138\\\">Reviewing User Visits With the Visit Browser</a>).</p>\\n<p>You can configure which events the component displays.</p>\\n<p>The component typically appears in a tab of the Insight Panel, but can also be included as a standalone component in a Visualforce page (see <a href=\\\"https://developers.coveo.com/x/J4CpAQ\\\">Implementing the UserActions Component</a>).</p>\\n<p>In an Insight Panel, the component would look like this:</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBoxPopup\\\"</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">\\\"User actions\\\"</span> <span class=\\\"hljs-attr\\\">data-full-width</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span> <span class=\\\"hljs-attr\\\">data-full-height</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span> <span class=\\\"hljs-attr\\\">data-icon</span>=<span class=\\\"hljs-string\\\">\\\"coveo-sprites-tab-people\\\"</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoUserActions\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n<p>To add the UserActions component as a standalone component, you need to add the UserActions Visualforce Component in your Visualforce page (see <a href=\\\"https://developers.coveo.com/x/TICpAQ\\\">UserActions Visualforce Component</a>).</p>\\n<p>You also need to create a custom handler to open/close the component, or you can simply use the <code>showButton</code> property.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoUserActions\\\"</span> <span class=\\\"hljs-attr\\\">data-bind-on-box</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span> <span class=\\\"hljs-attr\\\">data-show-button</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The available options for UserAction</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActions.options.enableBindOnBox\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should listen to the <code>onPopupOpen</code> event fired by the closest <code>BoxPopup</code> component to open itself.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoUserActions\\\"</span> <span class=\\\"hljs-attr\\\">data-enable-bind-on-box</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"UserActions.options.filters\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies which events the <code>UserActions</code> component should display.\\nYou typically want to include only events that are manually performed by the end-users, including appropriate custom events, and omitting the ones that are generated automatically by the components.</p>\\n<p>These typically are the <code>Click</code>, <code>Search</code>, and <code>Custom</code> dimension causes (see <a href=\\\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=106\\\">Usage Analytics Dimensions</a>).</p>\\n\",\"type\":\"Object\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"UserActions\"}},{\"name\":\"UserActions.options.showButton\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should render a button to open/close itself.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoUserActions\\\"</span> <span class=\\\"hljs-attr\\\">data-show-button</span>=<span class=\\\"hljs-string\\\">\\\"true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"UserActions.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>UserActionsButton</em> component allows you to display a panel showing a summary of a user session and detailed user actions information.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoUserActionsButton'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The available options for <em>UserActionsButton</em>.</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.options.activateTooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the button tooltip displayed to activate the user actions.\\nDefault is <code>Open user actions</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoUserActionsButton'</span> <span class=\\\"hljs-attr\\\">data-activate-tooltip</span>=<span class=\\\"hljs-string\\\">'Open user actions'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.options.activityLabel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the title of the panel activity section.\\nDefault is <code>User&#39;s Recent Activity</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoUserActionsButton'</span> <span class=\\\"hljs-attr\\\">data-activity-label</span>=<span class=\\\"hljs-string\\\">\\\"User's Recent Activity\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.options.deactivateTooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the button tooltip displayed to deactivate the user actions.\\nDefault is <code>Close user actions</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoUserActionsButton'</span> <span class=\\\"hljs-attr\\\">data-deactivate-tooltip</span>=<span class=\\\"hljs-string\\\">'Close user actions'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.options.summaryLabel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the title of the panel summary section.\\nDefault is <code>Session Summary</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoUserActionsButton'</span> <span class=\\\"hljs-attr\\\">data-summary-label</span>=<span class=\\\"hljs-string\\\">'Session Summary'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"UserActionsButton.options.viewedByCustomer\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the <em>ViewedByCustomer</em> component should appear on results consulted by the user specified in <code>userId</code>.\\nDefault value is <code>true</code></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoUserActionsButton'</span> <span class=\\\"hljs-attr\\\">data-viewed-by-customer</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"UserActionsButton.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>ViewedByCustomer</em>  component allows your agents to see, within the Salesforce Lightning console, every result which the user clicked. It displays an icon and a label on each result, if already viewed by the customer who created the case (see <a href=\\\"https://docs.coveo.com/en/3073/coveoforsalesforce/viewedbycustomercomponent\\\">Coveo Component ViewedByCustomer</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoViewedByCustomer\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>Unique Identifier used by the Search-UI.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Default options used by the component.</p>\\n\",\"type\":\"IViewedByCustomerOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomer.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create an instance of ViewedByCustomer.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>AdvancedSearch</code> component is meant to render a section in the <code>Settings</code> menu to allow the end\\nuser to easily create complex queries to send to the index.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>You can write custom code to add new sections in the <strong>Advanced Search</strong> modal box generated by this component by\\nattaching a handler to the <code>buildingAdvancedSearch</code> event.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearch.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>AdvancedSearch</code> component.\\nTriggers the <code>buildingAdvancedSearch</code> event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Aggregate component allows to display the result on an aggregate operation on the index.\\nIt hooks itself to the query to add a new IGroupByRequest, then displays the result.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IAggregateOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Aggregate.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Aggregate component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Analytics</code> component can log user actions performed in the search interface and send them to a REST web service\\nexposed through the Coveo Cloud Platform.\\nYou can use analytics data to evaluate how users are interacting with your search interface, improve relevance and\\nproduce analytics dashboards within the Coveo Cloud Platform.</p>\\n<p>See <a href=\\\"https://docs.coveo.com/en/347/\\\">Step 7 - Usage Analytics</a> of the Getting Started with the JavaScript\\nSearch Framework V1 tutorial for an introduction to usage analytics.</p>\\n<p>See also <a href=\\\"https://docs.coveo.com/en/2726/#logging-your-own-search-events\\\">Logging Your Own Search Events</a> for more advanced use cases.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.client\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the <code>AnalyticsClient</code>, which performs the heavy duty part of sending the usage analytics events to\\nthe Coveo Usage Analytics service.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Options for the component</p>\\n\",\"type\":\"IAnalyticsOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Analytics.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Analytics</code> component. Creates the <code>AnalyticsClient</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The AnalyticsSuggestion component provides query suggestions based on the queries that a Coveo Analytics service most\\ncommonly logs.\\nThis component orders possible query suggestions by their respective number of successful item views, thus\\nprioritizing the most relevant query suggestions. Consequently, when better options are available, this component\\ndoes not suggest queries resulting in no clicks from users or requiring refinements.</p>\\n<p>The query suggestions appear in the Omnibox Component. The AnalyticsSuggestion component strongly\\nrelates to the Analytics component. While a user is typing in a query box, the AnalyticsSuggestion component\\nallows them to see and select the most commonly used and relevant queries.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IAnalyticsSuggestionsOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsSuggestions.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new AnalyticsSuggestions component.\\nAlso binds event handlers so that when a user selects a suggestion, an <code>omniboxFromLink</code> usage analytics event is\\nlogged if the suggestion comes from a standalone search box, or an <code>omniboxAnalytics</code> usage analytics\\nevent is logged otherwise.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>AuthenticationProvider</code> component makes it possible to execute queries with an identity that the end user\\ncan obtain using an authentication provider configured on the Coveo REST Search API\\n(see <a href=\\\"https://docs.coveo.com/en/113/\\\">Claims Authentication</a>).\\nWhen necessary, this component handles redirecting the browser to the address that starts the authentication process.</p>\\n<p>You can use the <code>data-tab</code> attribute to enable the <code>AuthenticationProvider</code> component only for the tabs of your\\nsearch interface that require authentication (see the <code>Tab</code> component).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component.</p>\\n\",\"type\":\"IAuthenticationProviderOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AuthenticationProvider.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>AuthenticationProvider</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Backdrop component renders an image URL (either passed as a direct URL or contained in a result field) as a\\nbackground image. It is useful for displaying information in front of a dynamic background image.\\nThe Backdrop component will automatically initialize components embedded within itself:</p>\\n<pre><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoBackdrop\\\"</span> <span class=\\\"hljs-attr\\\">data-image-field</span>=<span class=\\\"hljs-string\\\">\\\"ytthumbnailurl\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoFieldValue\\\"</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">\\\"somefield\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Backdrop.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Backdrop component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Badge component outputs a field value with customizable colors and an icon preceding it.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>). It\\nextends the FieldValue component. Therefore all FieldValue options are also available for a Badge component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IBadgeOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Badge.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Badge component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Breadcrumb component displays a summary of the currently active query filters.\\nFor example, when the user selects a Facet value, the breadcrumbs display this value.</p>\\n<p>The active filters are obtained by the component by firing an event in the Breadcrumb component.</p>\\n<p>All other components having an active state can react to this event by providing custom bits of HTML to display\\ninside the breadcrumbs.</p>\\n<p>Thus, it is possible to easily extend the Breadcrumb component using custom code to display information about custom\\nstates and filters.</p>\\n<p>See BreadcrumbEvents for the list of events and parameters sent when a Breadcrumb component is populated.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Breadcrumb.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Breadcrumb component. Binds event on QueryEvents.deferredQuerySuccess to draw the\\nbreadcrumbs.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>CardActionBar</code> component displays an action bar at the bottom of a card result (see\\n<a href=\\\"https://docs.coveo.com/en/360/\\\">Result Layouts</a>). It is a simple container for buttons or complementary\\ninformation.\\nYou should place this component at the bottom of a card result template (i.e., as the last child of the surrounding\\n<code>coveo-result-frame</code> div).</p>\\n<p>See <a href=\\\"https://docs.coveo.com/en/1349/#using-the-cardactionbar-component\\\">Using the CardActionBar Component</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardActionBar.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>CardActionBar</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay\",\"notSupportedIn\":\"\",\"comment\":\"<p>The CardOverlay component displays a button that the user can click to toggle the visibility of an overlay on top of\\nan IQueryResult. While this component typically populates a CardActionBar component, it is actually\\npossible to place a CardOverlay component anywhere in any result.\\nThe primary purpose of the CardOverlay component is to display additional information about a result in a format that\\nfits well within a card result layout (see <a href=\\\"https://docs.coveo.com/en/360/\\\">Result Layouts</a>).</p>\\n<p>When initialized, this component creates a <code>&lt;div class=&quot;coveo-card-overlay&quot;&gt;</code> element as the last child of its parent\\nIQueryResult, and displays a button which toggles the visibility of the overlay.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlay.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new CardOverlay component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The <code>CategoryFacet</code> component is a facet that renders values in a hierarchical fashion. It determines the filter to apply depending on the\\ncurrent selected path of values.\\nThe path is a sequence of values that leads to a specific value in the hierarchy.\\nIt is an array listing all the parents of a file (e.g., <code>[&#39;c&#39;, &#39;folder1&#39;]</code> for the <code>c:\\\\folder1\\\\text1.txt</code> file).</p>\\n<p>This facet requires a <code>field</code> with a special format to work correctly (see <a href=\\\"https://docs.coveo.com/en/2667\\\">Using the Category Facet Component</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"ICategoryFacetOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CategoryFacet.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component exposes options to handle commerce-related queries.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the CommerceQuery.</p>\\n\",\"type\":\"ICommerceQueryOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CommerceQuery.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new CommerceQuery component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean\",\"notSupportedIn\":\"\",\"comment\":\"<p>The DidYouMean component is responsible for displaying query corrections. If this component is in the page and the\\nquery returns no result but finds a possible query correction, the component either suggests the correction or\\nautomatically triggers a new query with the suggested term.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IDidYouMeanOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DidYouMean.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new DidYouMean component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>DistanceResources</code> component defines a field that computes the distance according to the current position of the\\nend user.\\nComponents relying on the current distance should be disabled until this component successfully provides a distance.</p>\\n<p>See also <code>DistanceEvents</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for a DistanceResources.</p>\\n\",\"type\":\"IDistanceOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceResources.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>DistanceResources</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The <code>DynamicFacet</code> component displays a <em>facet</em> of the results for the current query. A facet is a list of values for a\\ncertain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\\nThe list of values is obtained using an array of <code>FacetRequest</code> operations performed at the same time\\nas the main query.</p>\\n<p>The <code>DynamicFacet</code> component allows the end-user to drill down inside a result set by restricting the result to certain\\nfield values.</p>\\n<p>This facet is more easy to use than the original <code>Facet</code> component. It implements additional Coveo Machine Learning (Coveo ML) features\\nsuch as dynamic navigation experience (DNE).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the DynamicFacet</p>\\n\",\"type\":\"IDynamicFacetOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacet.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>DynamicFacet</code> instance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>DynamicFacetManager</code> component is meant to be a parent for multiple DynamicFacet &amp; DynamicFacetRange components.\\nThis component allows controlling a set of <code>DynamicFacet</code> and <code>DynamicFacetRange</code> as a group.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the DynamicFacetManager</p>\\n\",\"type\":\"IDynamicFacetManagerOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetManager.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>DynamicFacetManager</code> instance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>A <code>DynamicFacetRange</code> is a <a href=\\\"https://docs.coveo.com/en/198/\\\">facet</a> whose values are expressed as ranges.\\nYou must set the <code>field</code> option to a value targeting a numeric or date <a href=\\\"https://docs.coveo.com/en/200/\\\">field</a>\\nin your index for this component to work.</p>\\n<p>This component extends the <code>DynamicFacet</code> component and supports all <code>DynamicFacet</code> options except:</p>\\n<ul>\\n<li><code>enableFacetSearch</code></li>\\n<li><code>useLeadingWildcardInFacetSearch</code></li>\\n<li><code>enableMoreLess</code></li>\\n<li><code>valueCaption</code></li>\\n<li><code>sortCriteria</code></li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the DynamicFacetRange</p>\\n\",\"type\":\"IDynamicFacetRangeOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRange.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>DynamicFacetRange</code> instance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The <code>DynamicHierarchicalFacet</code> component is a facet that renders values in a hierarchical fashion. It determines the filter to apply depending on the\\nselected path of values.\\nThis facet requires a <code>field</code> with a special format to work correctly.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the DynamicHierarchicalFacet</p>\\n\",\"type\":\"IDynamicHierarchicalFacetOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicHierarchicalFacet.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport\",\"notSupportedIn\":\"\",\"comment\":\"<p>The ErrorReport component takes care of handling fatal error when doing a query on the index / Search API.\\nFor example, the ErrorReport component displays a message when the service responds with a 401 or 503 error. This\\ncomponent also renders a small text area with the JSON content of the error response, for debugging purposes.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IErrorReportOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ErrorReport.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ErrorReport component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Excerpt component renders an excerpt of its associated result and highlights the keywords from the query using\\nthe appropriate template helpers.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Excerpt.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Excerpt component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel\",\"notSupportedIn\":\"\",\"comment\":\"<p>The ExportToExcel component renders an item in the Settings menu to allow the end user to the current\\nsearch results to the Microsoft Excel format (.xlsx).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the ExportToExcel</p>\\n\",\"type\":\"IExportToExcelOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExportToExcel.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ExportToExcel component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Facet</code> component displays a <em>facet</em> of the results for the current query. A facet is a list of values for a\\ncertain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\\nThe list of values is obtained using a <code>GroupByRequest</code> operation performed at the same time\\nas the main query.</p>\\n<p>The <code>Facet</code> component allows the end user to drill down inside a result set by restricting the result to certain\\nfield values. It also allows filtering out values from the facet itself, and can provide a search box to look for\\nspecific values inside larger sets.</p>\\n<p>This is probably the most complex component in the Coveo JavaScript Search Framework and as such, it allows for many\\nconfiguration options.</p>\\n<p>See also the <code>FacetRange</code> and <code>TimespanFacet</code> components (which\\nextend this component), and the <code>FacetSlider</code> and <code>CategoryFacet</code> components (which do not extend this\\ncomponent, but are very similar).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.facetSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Renders and handles the facet <strong>Search</strong> part of the component.</p>\\n\",\"type\":\"FacetSearch\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.facetSettings\",\"notSupportedIn\":\"\",\"comment\":\"<p>Renders and handles the facet <strong>Settings</strong> part of the component</p>\\n\",\"type\":\"FacetSettings\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for a facet</p>\\n\",\"type\":\"IFacetOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Facet.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Facet</code> component. Binds multiple query events as well.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>A <code>FacetRange</code> is a <a href=\\\"https://docs.coveo.com/en/198/\\\">facet</a> whose values are expressed as ranges.\\nYou must set the <code>field</code> option to a value targeting a numeric or date <a href=\\\"https://docs.coveo.com/en/200/\\\">field</a> in your index for this component to work.</p>\\n<p>This component extends the <code>Facet</code> component and supports all <code>Facet</code> options except:</p>\\n<ul>\\n<li><strong>Settings</strong> menu options<ul>\\n<li><code>enableSettings</code></li>\\n<li><code>enableSettingsFacetState</code></li>\\n<li><code>enableCollapse</code></li>\\n<li><code>availableSorts</code></li>\\n<li><code>customSort</code></li>\\n<li><code>computedFieldCaption</code></li>\\n</ul>\\n</li>\\n<li><strong>Facet Search</strong> options<ul>\\n<li><code>enableFacetSearch</code></li>\\n<li><code>facetSearchDelay</code></li>\\n<li><code>facetSearchIgnoreAccents</code></li>\\n<li><code>numberOfValuesInFacetSearch</code></li>\\n</ul>\\n</li>\\n<li><strong>More and Less</strong> options<ul>\\n<li><code>enableMoreLess</code></li>\\n<li><code>pageSize</code></li>\\n</ul>\\n</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.facetSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Renders and handles the facet <strong>Search</strong> part of the component.</p>\\n\",\"type\":\"FacetSearch\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.facetSettings\",\"notSupportedIn\":\"\",\"comment\":\"<p>Renders and handles the facet <strong>Settings</strong> part of the component</p>\\n\",\"type\":\"FacetSettings\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IFacetRangeOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetRange.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>FacetRange</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The <code>FacetSlider</code> component creates a facet which contains a slider widget that allows the end user to filter results\\nbased on a range of numerical values (e.g., a date range, a price range, etc.).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This component does <strong>not</strong> inherit from the <code>Facet</code> component. Consequently, it does not offer the\\nsame configuration options. Moreover, some of the <code>FacetSlider</code> options (see\\n<code>getSteps</code> and <code>valueCaption</code>)\\ncannot be configured as <code>data-</code> attributes in the markup. If you wish to configure those options, you must either\\ndo so in the <code>init</code> call of your search interface (see\\n<a href=\\\"https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call\\\">Passing Component Options in the init Call</a>),\\nor before the <code>init</code> call, using the <code>options</code> top-level function (see\\n<a href=\\\"https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call\\\">Passing Component Options Before the init Call</a>).</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The component options</p>\\n\",\"type\":\"IFacetSliderOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSlider.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>FacetSlider</code> component. Binds multiple query events as well.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component provides <code>Omnibox</code> query suggestions scoped to distinct categories based on the values of a\\nspecific <code>field</code> whose <a href=\\\"https://docs.coveo.com/en/1982/#facet\\\">Facet</a> option is enabled.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueSuggestions.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>FacetValueSuggestions</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component lets you customize the mobile responsive behavior of facets in your search interface.\\n<strong>Notes:</strong></p>\\n<ul>\\n<li>You can include this component anywhere under the root element of your search interface.</li>\\n<li>You should only include this component once in your search interface.</li>\\n<li>If you do not include this component in your search interface, facets will still have a default mobile responsive behavior.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileMode.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>FieldSuggestions</code> component provides query suggestions based on a particular facet field. For example, you could\\nuse this component to provide auto-complete suggestions while the end user is typing the title of an item.\\nThe query suggestions provided by this component appear in the <code>Omnibox</code> component.</p>\\n<p><strong>Note:</strong> Consider <a href=\\\"https://docs.coveo.com/en/340/#providing-coveo-machine-learning-query-suggestions\\\">providing Coveo ML query suggestions</a>\\nrather than field suggestions, as the former yields better performance and relevance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldSuggestions.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>FieldSuggestions</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable\",\"notSupportedIn\":\"\",\"comment\":\"<p>The FieldTable component displays a set of FieldValue components in a table that can optionally be\\nexpandable and minimizable. This component automatically takes care of not displaying empty field values.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n<p><strong>Example:</strong></p>\\n<pre><code><span class=\\\"hljs-comment\\\">// This is the FieldTable component itself, which holds a list of table rows.</span>\\n<span class=\\\"hljs-comment\\\">// Each row is a FieldValue component.</span>\\n&lt;table <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span>='<span class=\\\"hljs-title\\\">CoveoFieldTable</span>'&gt;</span>\\n   <span class=\\\"hljs-comment\\\">// Items</span>\\n   &lt;tr <span class=\\\"hljs-keyword\\\">data</span>-field=<span class=\\\"hljs-string\\\">'@sysdate'</span> <span class=\\\"hljs-keyword\\\">data</span>-caption=<span class=\\\"hljs-string\\\">'Date'</span> <span class=\\\"hljs-keyword\\\">data</span>-helper=<span class=\\\"hljs-string\\\">'dateTime'</span> /&gt;\\n   &lt;tr <span class=\\\"hljs-keyword\\\">data</span>-field=<span class=\\\"hljs-string\\\">'@sysauthor'</span> <span class=\\\"hljs-keyword\\\">data</span>-caption=<span class=\\\"hljs-string\\\">'Author'</span> /&gt;\\n   &lt;tr <span class=\\\"hljs-keyword\\\">data</span>-field=<span class=\\\"hljs-string\\\">'@clickuri'</span> <span class=\\\"hljs-keyword\\\">data</span>-html-value=<span class=\\\"hljs-string\\\">'true'</span> <span class=\\\"hljs-keyword\\\">data</span>-caption=<span class=\\\"hljs-string\\\">'URL'</span> <span class=\\\"hljs-keyword\\\">data</span>-helper=<span class=\\\"hljs-string\\\">'anchor'</span> <span class=\\\"hljs-keyword\\\">data</span>-helper-options=<span class=\\\"hljs-string\\\">'{text: \\\\\\\"&lt;%= raw.syssource %&gt;\\\\\\\" , target:\\\\\\\"_blank\\\\\\\"}'</span>&gt;\\n&lt;/table&gt;\\n</code></pre>\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IFieldTableOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldTable.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new FieldTable.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>The FieldValue component displays the value of a field associated to its parent search result. It is normally usable\\nwithin a FieldTable.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n<p>A common use of this component is to display a specific field value which also happens to be an existing\\nFacet.options.field. When the user clicks on the FieldValue component, it activates the corresponding Facet.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IFieldValueOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FieldValue.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new FieldValue.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Folding</code> component makes it possible to render hierarchic representations of search results sharing a common\\n<code>field</code>.\\nThis component has no visual impact on its own. It simply folds certain search results so that the\\n<code>ResultFolding</code> and <code>ResultAttachments</code> components can then nicely\\nrender them within result templates (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n<p>A typical use case of the <code>Folding</code> component is to fold email conversations and message board threads results in a\\nresult set in order to display them in a convenient format. Messages belonging to a single conversation typically\\nhave a unique conversation ID. By indexing this ID on a field, you can use it to fold search results (see\\n<a href=\\\"https://docs.coveo.com/en/428/\\\">Folding Results</a>).</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>There can only be one <code>Folding</code> component per <code>Tab</code> component.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IFoldingOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Folding.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Folding</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem\",\"notSupportedIn\":\"\",\"comment\":\"<p>The FollowItem component renders a widget that the end user can click to follow a particular item. A user following\\nan item receives email notifications when the item changes.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>A SearchAlerts component must be present in the page for this component to work. It is also necessary to\\nmeet certain requirements to be able to use this component (see\\n<a href=\\\"https://docs.coveo.com/en/1932/\\\">Deploying Search Alerts on a Coveo JS Search Page</a>).</p>\\n</blockquote>\\n<p>This component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the follow item component</p>\\n\",\"type\":\"IFollowItemOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FollowItem.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new FollowItem component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>The HiddenQuery component handles a &quot;hidden&quot; query parameter (<code>hq</code>) and its description (<code>hd</code>).\\nConcretely, this means that if a HiddenQuery component is present in your page and you load your search interface\\nwith <code>hq=foo&amp;hd=bar</code> in the URL hash, the component adds <code>foo</code> as an expression to the query (<code>hq</code> is the hidden\\nquery) and renders <code>bar</code> in the Breadcrumb (<code>hd</code> is the hidden query description).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Possible options for the <code>HiddenQuery</code> component</p>\\n\",\"type\":\"IHiddenQueryOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HiddenQuery.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new HiddenQuery component, which binds multiple events (QueryEvents.buildingQuery,\\nBreadcrumbEvents.populateBreadcrumb and BreadcrumbEvents.clearBreadcrumb).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.facetSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Renders and handles the facet <strong>Search</strong> part of the component.</p>\\n\",\"type\":\"FacetSearch\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.facetSettings\",\"notSupportedIn\":\"\",\"comment\":\"<p>Renders and handles the facet <strong>Settings</strong> part of the component</p>\\n\",\"type\":\"FacetSettings\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IHierarchicalFacetOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HierarchicalFacet.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>HierarchicalFacet</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\\nfrom those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\\noutputs a generic icon.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the Icon</p>\\n\",\"type\":\"IIconOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Icon.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Icon component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component renders an image from a URL retrieved in a given <code>field</code>.\\nA typical use case of this component is to display product images in the context of commerce.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IImageFieldValue\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ImageFieldValue.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ImageFieldValue.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Logo component adds a clickable Coveo logo in the search interface.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for the component</p>\\n\",\"type\":\"ILogoOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Logo.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Logo component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The Matrix component uses the values of two fields (row and column) to display the results of the specified computed\\nfield in a table.\\nThe user specifies the values to use for the columns. An IGroupByRequest operation performed at the same time\\nas the main query retrieves the values to use for the rows.</p>\\n<p>In a way that is similar to the Facet component, selecting a Matrix cell allows the end user to drill down\\ninside the results by restricting the row field and the column field to match the values of the selected cell.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.data\",\"notSupportedIn\":\"\",\"comment\":\"<p>Holds the data for the Matrix.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.selectedColumnValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>The currently selected column value, or <code>any</code> if nothing is selected.</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.selectedRowValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>The currently selected row value, or <code>any</code> if nothing is selected.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for the component</p>\\n\",\"type\":\"IMatrixOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Matrix.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Matrix. Also verifies whether options are valid and coherent. Binds query events.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms\",\"notSupportedIn\":\"\",\"comment\":\"<p>This <a href=\\\"https://docs.coveo.com/en/513/#using-result-template-components\\\">result template component</a> renders a list of query terms\\nthat were not matched by the associated result item.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.missingTerms\",\"notSupportedIn\":\"\",\"comment\":\"<p>Returns all original basic query expression terms that were not matched by the result item the component instance is associated with.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MissingTerms.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>MissingTerms</code> component instance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Omnibox</code> component extends the <code>Querybox</code>, and thus provides the same basic options and\\nbehaviors. Furthermore, the <code>Omnibox</code> adds a type-ahead capability to the search input.\\nYou can configure the type-ahead feature by enabling or disabling certain addons, which the Coveo JavaScript Search\\nFramework provides out-of-the-box (see the <code>enableFieldAddon</code>,\\n<code>enableQueryExtension</code>, and\\n<code>enableQuerySuggestAddon</code> options).</p>\\n<p>Custom components and external code can also extend or customize the type-ahead feature and the query completion\\nsuggestions it provides by attaching their own handlers to the\\n<code>populateOmniboxSuggestions</code> event.</p>\\n<p>See also the <code>Searchbox</code> component, which can automatically instantiate an <code>Omnibox</code> along with an\\noptional SearchButton.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the omnibox</p>\\n\",\"type\":\"IOmniboxOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Omnibox.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Omnibox component. Also enables necessary addons and binds events on various query events.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList\",\"notSupportedIn\":\"\",\"comment\":\"<p>The OmniboxResultList component behaves exactly like the ResultList component (which it extends), except that\\nit renders itself inside the Omnibox component.\\nThis component can provide a kind of search-as-you-type functionality, allowing you to easily render complex Result\\nTemplates inside the Omnibox component.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoOmniboxResultList\\\"</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"result-template\\\"</span> <span class=\\\"hljs-attr\\\">type</span>=<span class=\\\"hljs-string\\\">\\\"text/x-underscore\\\"</span>&gt;</span><span class=\\\"handlebars\\\"><span class=\\\"xml\\\">\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoResultLink'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  </span></span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.elementsToIgnore\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a list a css class that should be ignored when the end user click result in the omnibox\\nAny element that is specified here should normally be able to handle the standard click event.</p>\\n<p>Any element that does not match this css class and that is clicked will trigger a redirection by the OmniboxResultList.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IOmniboxResultListOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxResultList.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new OmniboxResultList component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Pager component attaches itself to a <code>div</code> element and renders widgets that allow the end user to navigate\\nthrough the different result pages.\\nThis component takes care of triggering a query with the correct result range whevoid the end user selects a page or\\nuses the navigation buttons (<strong>Previous</strong> and <strong>Next</strong>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.currentPage\",\"notSupportedIn\":\"\",\"comment\":\"<p>The current page (1-based index).</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the Pager</p>\\n\",\"type\":\"IPagerOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Pager.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Pager. Binds multiple query events (QueryEvents.newQuery, QueryEvents.buildingQuery,\\nQueryEvents.querySuccess, QueryEvents.queryError and QueryEvents.noResults. Renders itself\\non every query success.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>PipelineContext</code> component injects custom contextual information into the search requests and usage analytics search events sent from a search interface.\\nThis component is meant to be initialized on a <code>script</code> HTML tag whose <code>type</code> attribute is set to <code>text/context</code> and whose optional JSON content defines the custom information to send (each value can be set to a string or array of strings).</p>\\n<p>See <a href=\\\"https://docs.coveo.com/en/399/\\\">Sending Custom Context Information</a>.\\nNote: To customize the context sent on all usage analytics events, see <a href=\\\"https://docs.coveo.com/en/2004/javascript-search-framework/sending-custom-metadata-with-search-click-or-custom-events\\\">Sending Custom Metadata with Search, Click, or Custom Events</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PipelineContext.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel\",\"notSupportedIn\":\"\",\"comment\":\"<p>The PreferencesPanel component renders a <strong>Preferences</strong> item inside the Settings component which the end\\nuser can click to access a panel from which it is possible to specify certain customization options for the search\\ninterface. These customization options are then saved in the browser local storage.\\nThis component should be used inside the Settings component.</p>\\n<p>See also the ResultsFiltersPreferences and ResultsPreferences components.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PreferencesPanel.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new PreferencesPanel.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>PrintableUri</code> component inherits from the  <code>ResultLink</code>  component and supports all of its options.\\nThis component displays the URI, or path, to access a result.</p>\\n<p>This component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PrintableUri.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new PrintableUri.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge\",\"notSupportedIn\":\"\",\"comment\":\"<p>Depending on its configuration, this component will render badges on query result items whose ranking scores were increased by <a href=\\\"https://docs.coveo.com/en/1961/\\\">featured results</a> query pipeline rules and/or <a href=\\\"https://docs.coveo.com/en/1671/#automatic-relevance-tuning-art-feature\\\">Coveo ML ART</a>.\\nThis component can be put anywhere in the markup configuration of a search interface. However, it is meant to be initialized only once, and should thus void be included in a result template.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PromotedResultsBadge.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryDuration component displays the duration of the last query execution.\\nWhen a QueryEvents.querySuccess event is triggered, the QueryDuration component becomes visible. It also\\ndisplays the global duration, the index duration, and the client duration in a single tooltip.</p>\\n<p>If a QueryEvents.queryError event is triggered, the QueryDuration component becomes hidden.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryDuration.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new QueryDuration component.\\nBinds handlers on the QueryEvents.querySuccess and QueryEvents.queryError events.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component renders previews of the top query results matching the currently focused query suggestion in the search box.\\nAs such, this component only works when the search interface can\\n<a href=\\\"https://docs.coveo.com/en/340/#providing-coveo-machine-learning-query-suggestions\\\">provide Coveo Machine Learning query suggestions</a>.</p>\\n<p>This component should be initialized on a <code>div</code> which can be nested anywhere inside the root element of your search interface.</p>\\n<p>See <a href=\\\"https://docs.coveo.com/en/340/#rendering-query-suggestion-result-previews\\\">Rendering Query Suggestion Result Previews</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IQuerySuggestPreview\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySuggestPreview.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new QuerySuggestPreview component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QuerySummary component can display information about the currently displayed range of results (e.g., &quot;Results\\n1-10 of 123&quot;).\\nWhen the query does not match any items, the QuerySummary component can instead display information to the end users.</p>\\n<p>The information displayed to the end user is customizable through this component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Options for the component</p>\\n\",\"type\":\"IQuerySummaryOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummary.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new QuerySummary component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Querybox</code> component renders an input which the end user can interact with to enter and submit queries.\\nWhen the end user submits a search request, the <code>Querybox</code> component triggers a query and logs the corresponding\\nusage analytics data.</p>\\n<p>For technical reasons, it is necessary to instantiate this component on a <code>div</code> element rather than on an <code>input</code>\\nelement.</p>\\n<p>See also the <code>Searchbox</code> component, which can automatically instantiate a <code>Querybox</code> along with an\\noptional <code>SearchButton</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the Querybox.</p>\\n\",\"type\":\"IQueryboxOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Querybox.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Querybox component</code>. Creates a new <code>Coveo.Magicbox</code> instance and wraps the Magicbox methods\\n(<code>onblur</code>, <code>onsubmit</code> etc.). Binds event on <code>buildingQuery</code> and before redirection (for standalone box).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Quickview</code> component renders a button/link which the end user can click to open a modal box containing certain\\ninformation about a result. Most of the time, this component references a\\n<code>QuickviewDocument</code> in its <code>contentTemplate</code>.\\n<strong>Notes:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>Quickview</code> is not meant to replace a ResultLink to access an item; it has certain limitations (e.g., custom styles and embedded\\nimages/links may not work as expected in a <code>Quickview</code>).</li>\\n<li>You can change the appearance of the <code>Quickview</code> link/button by adding elements in the inner HTML of its <code>div</code>.</li>\\n<li>You can change the content of the <code>Quickview</code> modal box link by specifying a template <code>id</code> or CSS selector (see\\nthe <code>contentTemplate</code> option).</li>\\n<li>When using Coveo for Salesforce 3.16, in an environment compliant with LockerService, ensure you use <code>CoveoSalesforceQuickview</code> (see <a href=\\\"https://docs.coveo.com/en/1234/\\\">Changing the Default Quick View in Coveo for Salesforce</a>).</li>\\n</ul>\\n</blockquote>\\n<p><strong>Example:</strong></p>\\n<pre><code class=\\\"lang-html\\\">[ ... ]\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'result-template'</span> <span class=\\\"hljs-attr\\\">type</span>=<span class=\\\"hljs-string\\\">'text/underscore'</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">'myContentTemplateId'</span>&gt;</span><span class=\\\"handlebars\\\"><span class=\\\"xml\\\">\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span>&gt;</span>This content will be displayed when then end user opens the quickview modal box. It could also include other Coveo component, and use core helpers.<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">table</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoFieldTable\\\"</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">tr</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">\\\"@liboardshorttitle\\\"</span> <span class=\\\"hljs-attr\\\">data-caption</span>=<span class=\\\"hljs-string\\\">\\\"Board\\\"</span> /&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">tr</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">\\\"@licategoryshorttitle\\\"</span> <span class=\\\"hljs-attr\\\">data-caption</span>=<span class=\\\"hljs-string\\\">\\\"Category\\\"</span> /&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">tr</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">\\\"@sysauthor\\\"</span> <span class=\\\"hljs-attr\\\">data-caption</span>=<span class=\\\"hljs-string\\\">\\\"Author\\\"</span> /&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">table</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</span></span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n[ ... ]\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoResultList'</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'result-template'</span> <span class=\\\"hljs-attr\\\">type</span>=<span class=\\\"hljs-string\\\">'text/underscore'</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">'myResultTemplateId'</span>&gt;</span><span class=\\\"handlebars\\\"><span class=\\\"xml\\\">\\n\\n  [ ... ]\\n\\n    <span class=\\\"hljs-comment\\\">&lt;!-- The `myContentTemplateId` template applies when displaying content in the quickview modal box. --&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoQuickview'</span> <span class=\\\"hljs-attr\\\">data-template-id</span>=<span class=\\\"hljs-string\\\">'myContentTemplateId'</span>&gt;</span>\\n        <span class=\\\"hljs-comment\\\">&lt;!-- This changes the appearance of the Quickview button itself in the results --&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span>&gt;</span>Click here for a quickview<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  </span></span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n  [ ... ]\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- Note that simply including `&lt;div class='CoveoQuickview'&gt;&lt;/div&gt;` in the markup will be enough most of the time, since the component includes a default template and a default button appearance. --&gt;</span>\\n</code></pre>\\n<p>This component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Quickview.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Quickview</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>QuickviewDocument</code> component normally exists within a <code>Quickview</code> component. The sole purpose\\nof this component is to add an <code>&lt;iframe&gt;</code> which loads the correct HTML version of the current item.\\nThe default <code>contentTemplate</code> of the\\n<code>Quickview</code> component includes the <code>QuickviewDocument</code> component.</p>\\n<p>This component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IQuickviewDocumentOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewDocument.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>QuickviewDocument</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Recommendation\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Recommendation component is a SearchInterface that displays recommendations typically based on user\\nhistory.\\nThis component usually listens to the main SearchInterface. When the main SearchInterface generates a query, the\\nRecommendation component generates another query to get the recommendations at the same time.</p>\\n<p>To get history-based recommendations, you will likely want to include the <code>pageview</code> script in your page (see\\n<a href=\\\"https://github.com/coveo/coveo.analytics.js\\\">coveo.analytics.js</a>). However, including this script is not mandatory.\\nFor instance, you could use the Recommendation component without the Coveo Machine Learning service to create a\\nsimple &quot;recommended people&quot; interface.</p>\\n<p>It is possible to include this component inside another SearchInterface, but it is also possible to instantiate it as\\na &quot;standalone&quot; search interface, without even instantiating a main SearchInterface component. In any case, a\\nRecommendation component always acts as a full-fledged search interface. Therefore, you can include any component\\ninside the Recommendation component (Searchbox, Facet, Sort, etc.), just as you would inside the main SearchInterface\\ncomponent.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Recommendation.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Recommendation.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Recommendation.responsiveComponents\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows to get and set the different breakpoints for mobile and tablet devices.\\nThis is useful, amongst other, for Facet, Tab and ResultList</p>\\n\",\"type\":\"ResponsiveComponents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Recommendation.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Recommendation.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the recommendation component</p>\\n\",\"type\":\"IRecommendationOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Recommendation.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Recommendation component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>ResultActionsMenu</em> component adds a floating result action menu, meant to be used inside result templates (see <a href=\\\"https://docs.coveo.com/en/413/javascript-search-framework/result-templates\\\">Result Templates</a>).\\nIt is designed to contain other components that can execute actions related to the result,\\ntypically the Quickview and AttachToCase components, available in the Coveo for Salesforce and Coveo for Dynamics integrations.</p>\\n<pre><code class=\\\"lang-html\\\">&lt;script type=\\\"text/html\\\" class=\\\"result-template\\\" [...]\\n  &lt;div class=\\\"coveo-result-frame\\\"&gt;\\n    &lt;div class=\\\"CoveoResultActionsMenu\\\"&gt;\\n      &lt;div class=\\\"CoveoQuickview\\\"&gt;&lt;/div&gt;\\n    &lt;/div&gt;\\n  [...]\\n&lt;/script&gt;\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.menuItems\",\"notSupportedIn\":\"\",\"comment\":\"<p>A list containing menu items for this menu.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.parentResult\",\"notSupportedIn\":\"\",\"comment\":\"<p>The rendered result that contains this menu.</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultActionsMenu.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ResultActionsMenu</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The <code>ResultAttachments</code> component renders attachments in a result set, for example when displaying emails. This\\ncomponent is usable inside a result template when there is an active <code>Folding</code> component in the\\npage.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IResultAttachmentsOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultAttachments.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ResultAttachments</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ResultFolding</code> component renders folded result sets. It is usable inside a result template when there is an\\nactive <code>Folding</code> component in the page. This component takes care of rendering the parent result and\\nits child results in a coherent manner.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n<p>See <a href=\\\"https://docs.coveo.com/en/428/\\\">Folding Results</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IResultFoldingOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultFolding.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ResultFolding component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector\",\"notSupportedIn\":\"\",\"comment\":\"<p>The ResultLayoutSelector component allows the end user to switch between multiple ResultList components that have\\ndifferent ResultList.options.layout values.\\nThis component automatically populates itself with buttons to switch between the ResultList components that have a\\nvalid layout value (see the ValidLayout type).</p>\\n<p>See also the <a href=\\\"https://docs.coveo.com/en/360/\\\">Result Layouts</a> documentation.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The component options</p>\\n\",\"type\":\"IResultLayoutOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLayoutSelector.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ResultLayoutSelector component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ResultLink</code> component automatically transform a search result title into a clickable link pointing to the\\noriginal item.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the ResultLink</p>\\n\",\"type\":\"IResultLinkOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultLink.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ResultLink</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ResultList</code> component is responsible for displaying query results by applying one or several result templates\\n(see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).\\nIt is possible to include multiple <code>ResultList</code> components along with a single <code>ResultLayout</code>\\ncomponent in a search page to provide different result layouts (see\\n<a href=\\\"https://docs.coveo.com/en/360/\\\">Result Layouts</a>).</p>\\n<p>This component supports infinite scrolling (see the\\n<code>enableInfiniteScroll</code> option).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the ResultList</p>\\n\",\"type\":\"IResultListOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultList.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ResultList</code> component. Binds various event related to queries (e.g., on querySuccess -&gt;\\nrenderResults). Binds scroll event if the <code>enableInfiniteScroll</code>\\noption is <code>true</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>The Coveo Cloud V2 platform does not support collaborative rating. Therefore, this component is obsolete in Coveo Cloud V2.</p>\\n</blockquote>\\n<p>The <code>ResultRating</code> component renders a 5-star rating widget. Interactive rating is possible if\\nthe <code>enableCollaborativeRating</code> option of your\\nsearch interface is <code>true</code>, and if collaborative rating is enabled on your Coveo index.</p>\\n<p>This component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultRating.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ResultRating</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The ResultTagging component lists the current tag field values of its associated result and renders a control that\\nallows the end user to add values to a tag field.\\nThis component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>The ResultTagging component is not supported with Coveo Cloud V2. To implement the ResultTagging component in Coveo Cloud V1, contact <a href=\\\"https://support.coveo.com/s/\\\">Coveo Support</a>.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultTagging.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ResultTagging component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ResultFiltersPreferences</code> component allows end users to create custom filters to apply to queries. These filters\\nare saved to local storage.\\nOnly advanced end users who understand the Coveo query syntax should use this feature (see\\n<a href=\\\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\\\">Coveo Query Syntax Reference</a>).</p>\\n<p>This component is normally accessible through the <code>Settings</code> menu. Its usual location in the DOM is\\ninside the <code>PreferencesPanel</code> element.</p>\\n<p>See also the ResultsPreferences component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IResultsFiltersPreferencesOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsFiltersPreferences.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ResultsFiltersPreferences</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage\",\"notSupportedIn\":\"\",\"comment\":\"<p>The ResultsPerPage component attaches itself to a <code>div</code> and allows the end user to choose how many results to\\ndisplay per page.\\n<strong>Note:</strong> Adding a ResultPerPage component to your page overrides the value of\\nSearchInterface.options.resultsPerPage.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.resultsPerPage\",\"notSupportedIn\":\"\",\"comment\":\"<p>Returns the current number of results per page.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the ResultsPerPage</p>\\n\",\"type\":\"IResultsPerPageOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPerPage.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ResultsPerPage. The component renders itself on every query success.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences\",\"notSupportedIn\":\"\",\"comment\":\"<p>The ResultsPreferences component allows the end user to select preferences related to the search results. These\\npreferences are then saved in the local storage of the end user.\\nThis component is normally accessible through the Settings menu. Its usual location in the DOM is inside the\\nPreferencesPanel component.</p>\\n<p>See also the ResultsFiltersPreferences component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IResultsPreferencesOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultsPreferences.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ResultsPreference component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Search Alerts component renders items in the Settings menu that allow the end user to follow queries\\nand to manage search alerts. A user following a query receives email notifications when the query results change.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>It is necessary to meet certain requirements to be able to use this component (see\\n<a href=\\\"https://docs.coveo.com/en/1932/\\\">Deploying Search Alerts on a Coveo JS Search Page</a>).</p>\\n</blockquote>\\n<p>See also the FollowItem component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.message\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to a SearchAlertsMessage component that the SearchAlerts component uses to display messages.</p>\\n\",\"type\":\"SearchAlertsMessage\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the search alerts</p>\\n\",\"type\":\"ISearchAlertsOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlerts.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new SearchAlerts component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage\",\"notSupportedIn\":\"\",\"comment\":\"<p>The SearchAlertsMessage component allows the SearchAlerts component to display messages.\\nYou should not include this component in your page. Instead, use a SearchAlerts component, and access the\\nSearchAlerts.message attribute.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the SearchAlertsMessage component</p>\\n\",\"type\":\"ISearchAlertMessageOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchAlertsMessage.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new SearchAlertsMessage component</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton\",\"notSupportedIn\":\"\",\"comment\":\"<p>The SearchButton component renders a search icon that the end user can click to trigger a new query.\\nSee also the Searchbox component, which can automatically instantiate a SearchButton component along with a\\nQuerybox component or an Omnibox component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchButton.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new SearchButton. Binds a <code>click</code> event on the element. Adds a search icon on the element.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>The SearchInterface component is the root and main component of your Coveo search interface. You should place all\\nother Coveo components inside the SearchInterface component.\\nIt is also on the HTMLElement of the SearchInterface component that you call the init function.</p>\\n<p>It is advisable to specify a unique HTML <code>id</code> attribute for the SearchInterface component in order to be able to\\nreference it easily.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n\\n[ ... ]\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"javascript\\\">\\n  <span class=\\\"hljs-built_in\\\">document</span>.addEventListener(<span class=\\\"hljs-string\\\">'DOMContentLoaded'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) </span>{\\n\\n    [ ... ]\\n    <span class=\\\"hljs-comment\\\">// The init function is called on the SearchInterface element, in this case, the body of the page.</span>\\n    Coveo.init(<span class=\\\"hljs-built_in\\\">document</span>.body);\\n\\n    [ ... ]\\n\\n    });\\n</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n[ ... ]\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- Specifying a unique HTML id attribute for the SearchInterface component is good practice. --&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">body</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">'search'</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoSearchInterface'</span> [ <span class=\\\"hljs-attr\\\">...</span> <span class=\\\"hljs-attr\\\">other</span> <span class=\\\"hljs-attr\\\">options</span> <span class=\\\"hljs-attr\\\">...</span> ]&gt;</span>\\n\\n  [ ... ]\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- You should place all other Coveo components here, inside the SearchInterface component. --&gt;</span>\\n\\n  [ ... ]\\n\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchInterface.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchInterface.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchInterface.responsiveComponents\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows to get and set the different breakpoints for mobile and tablet devices.\\nThis is useful, amongst other, for Facet, Tab and ResultList</p>\\n\",\"type\":\"ResponsiveComponents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchInterface.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchInterface.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the search interface</p>\\n\",\"type\":\"ISearchInterfaceOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchInterface.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new SearchInterface. Initialize various singletons for the interface (e.g., usage analytics, query\\ncontroller, state model, etc.). Binds events related to the query.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Searchbox</code> component allows you to conveniently instantiate two components which end users frequently use to\\nenter and submit queries.\\nThis component attaches itself to a <code>div</code> element and takes care of instantiating either a\\n<code>Querybox</code> or an <code>Omnibox</code> component (see the\\n<code>enableOmnibox</code> option). Optionally, the <code>Searchbox</code> can also instantiate a\\n<code>SearchButton</code> component, and append it inside the same <code>div</code> (see the\\n<code>addSearchButton</code> option).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.searchButton\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>SearchButton</code> component instance.</p>\\n\",\"type\":\"SearchButton\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.searchbox\",\"notSupportedIn\":\"\",\"comment\":\"<p>The component instance which allows end users to input queries.\\nCan be either a <code>Querybox</code> or an <code>Omnibox</code> component, depending on the value of\\n<code>enableOmnibox</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Possible options for the Searchbox</p>\\n\",\"type\":\"ISearchboxOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Searchbox.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Searchbox</code> component. Creates a new <code>Coveo.Magicbox</code> instance and wraps magic box methods (<code>onblur</code>,\\n<code>onsubmit</code>, etc.). Binds event on <code>buildingQuery</code> and on redirection (for standalone box).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Settings component renders a <strong>Settings</strong> button that the end user can click to access a popup menu from which\\nit is possible to perform several contextual actions. The usual location of the <strong>Settings</strong> button in the page is to\\nthe right of the Searchbox.\\nThis component can reference several components to populate its popup menu:</p>\\n<ul>\\n<li>AdvancedSearch</li>\\n<li>ExportToExcel</li>\\n<li>PreferencesPanel (see also ResultsFiltersPreferences and ResultsPreferences)</li>\\n<li>SearchAlerts (see also SearchAlertsMessage)</li>\\n<li>ShareQuery</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for Settings</p>\\n\",\"type\":\"ISettingsOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Settings.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Settings component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>The ShareQuery component populates the Settings popup menu with the <strong>Share Query</strong> menu item. When the end\\nuser clicks this item, it displays a panel containing two input boxes: one containing a shareable link and the other\\ncontaining the complete current query expression.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ShareQuery.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new ShareQuery component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>SimpleFilter</code> component displays a dropdown menu containing field values which the end user can select to filter\\nthe query results.\\nThe list of available field values in the dropdown menu can either be static (defined through the\\n<code>values</code> option), or dynamic (automatically obtained through a\\n<code>GroupByRequest</code> operation performed at the same time as the main query).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for the SimpleFilter.</p>\\n\",\"type\":\"ISimpleFilterOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SimpleFilter.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>SimpleFilter</code> component. Binds multiple query events as well.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Sort</code> component renders a widget that the end user can interact with to select the criterion to use when sorting query results.\\nTo improve accessibility, it&#39;s recommended to group <code>Sort</code> components in a container with <code>role=&quot;radiogroup&quot;</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Options for the component</p>\\n\",\"type\":\"ISortOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Sort.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Sort</code> component instance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>SortDropdown</code> component renders a dropdown that the end user can interact with to select the criteria to use when sorting query results.\\nIt is meant to be a parent of regular <code>Sort</code> components. Example:</p>\\n<pre><code>&lt;div <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span></span>=<span class=\\\"hljs-string\\\">\\\"CoveoSortDropdown\\\"</span>&gt;\\n  <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoSort\\\"</span> <span class=\\\"hljs-attr\\\">data-sort-criteria</span>=<span class=\\\"hljs-string\\\">\\\"relevancy\\\"</span> <span class=\\\"hljs-attr\\\">data-caption</span>=<span class=\\\"hljs-string\\\">\\\"Relevance\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span></span>\\n  <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoSort\\\"</span> <span class=\\\"hljs-attr\\\">data-sort-criteria</span>=<span class=\\\"hljs-string\\\">\\\"date descending\\\"</span> <span class=\\\"hljs-attr\\\">data-caption</span>=<span class=\\\"hljs-string\\\">\\\"Newest\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span></span>\\n  <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoSort\\\"</span> <span class=\\\"hljs-attr\\\">data-sort-criteria</span>=<span class=\\\"hljs-string\\\">\\\"date ascending\\\"</span> <span class=\\\"hljs-attr\\\">data-caption</span>=<span class=\\\"hljs-string\\\">\\\"Oldest\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span></span>\\n<span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span></span>\\n</code></pre><p>Each one of the children <code>Sort</code> components should have only one sort criteria to prevent the regular toggle behaviour.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SortDropdown.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>SortDropdown</code> component instance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>StarRating</code> component renders a five-star rating widget for use in commerce result templates.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StarRating.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>StarRating</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Tab component renders a widget that allows the end user to select a specific search interface.\\nThis component attaches itself to a <code>div</code> element. It is in charge of adding an advanced expression to the outgoing\\nquery in order to refine the results.</p>\\n<p>The Tab component can also hide and show different parts of the UI. For each individual component in the UI, you can\\nspecify whether you wish to include or exclude that component when the user selects a certain Tab (see <a href=\\\"https://docs.coveo.com/en/508/javascript-search-framework/using-components-only-on-specific-tabs\\\">Using Components\\nOnly on Specific Tabs</a>).</p>\\n<p><strong>Setting a New Endpoint for a Tab:</strong></p>\\n<p>A Tab can use a custom endpoint when performing a query. Of course, you need to make sure that the endpoint exists in\\nthe array of Coveo.SearchEndpoint.endpoints (see SearchEndpoint.endpoints).</p>\\n<pre><code>Coveo<span class=\\\"hljs-selector-class\\\">.SearchEndpoint</span><span class=\\\"hljs-selector-class\\\">.endpoints</span>[<span class=\\\"hljs-string\\\">\\\"specialEndpoint\\\"</span>] = new Coveo.SearchEndpoint({\\n    restUri : <span class=\\\"hljs-string\\\">'https://somewhere.com/rest/search'</span>\\n})\\n\\n[ ... ]\\n\\n&lt;<span class=\\\"hljs-selector-tag\\\">div</span> class=<span class=\\\"hljs-string\\\">'CoveoTab'</span> data-endpoint=<span class=\\\"hljs-string\\\">'specialEndpoint'</span>&gt;&lt;/div&gt;\\n\\n</code></pre>\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for a Tab</p>\\n\",\"type\":\"ITabOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Tab.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Tab. Binds on buildingQuery event as well as an event on click of the element.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader\",\"notSupportedIn\":\"\",\"comment\":\"<p>The TemplateLoader component can load one result template into another. You should normally declare any reusable\\nresult template outside of the ResultList component. Otherwise, the framework will evaluate the\\n<code>data-condition</code> of the reusable result template and possibly render it.\\n<strong>Example:</strong></p>\\n<pre><code class=\\\"lang-html\\\">[ ... ]\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- A reusable result template. Note that it is\\n&lt;script type='text/underscore' class='result-template' id='ReusableTemplate'&gt;\\n  &lt;table class='CoveoFieldTable'&gt;\\n    &lt;tr data-field='@source' data-caption='Source'&gt;&lt;/tr&gt;\\n    &lt;tr data-field='@percentScore' data-caption='Score'&gt;&lt;/tr&gt;\\n  &lt;/table&gt;\\n&lt;/script&gt;\\n\\n[ ... ]\\n\\n&lt;div class=\\\"CoveoResultList\\\" data-wait-animation=\\\"fade\\\" data-auto-select-fields-to-include=\\\"true\\\"&gt;\\n\\n  &lt;!-- A custom result template for Lithium messages. --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">type</span>=<span class=\\\"hljs-string\\\">'text/underscore'</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'result-template'</span> <span class=\\\"hljs-attr\\\">data-condition</span>=<span class=\\\"hljs-string\\\">'raw.filetype == \\\"lithiummessage\\\"'</span>&gt;</span><span class=\\\"handlebars\\\"><span class=\\\"xml\\\">\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">img</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoIcon'</span> <span class=\\\"hljs-attr\\\">data-small</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoResultLink'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoTemplateLoader'</span> <span class=\\\"hljs-attr\\\">data-template-id</span>=<span class=\\\"hljs-string\\\">'ReusableTemplate'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  </span></span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- A custom result template for images. --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">type</span>=<span class=\\\"hljs-string\\\">'text/underscore'</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'result-template'</span> <span class=\\\"hljs-attr\\\">data-condition</span>=<span class=\\\"hljs-string\\\">'raw.filetype == \\\"Image\\\"'</span>&gt;</span><span class=\\\"handlebars\\\"><span class=\\\"xml\\\">\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">img</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoIcon'</span> <span class=\\\"hljs-attr\\\">data-small</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">img</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoResultLink'</span>&gt;</span>\\n          <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">img</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoThumbnail'</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoTemplateLoader'</span> <span class=\\\"hljs-attr\\\">data-template-id</span>=<span class=\\\"hljs-string\\\">'ReusableTemplate'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  </span></span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n[ ... ]\\n</code></pre>\\n<p>See <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for a TemplateLoader.</p>\\n\",\"type\":\"ITemplateLoaderOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateLoader.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new TemplateLoader.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Text component embeds itself in a result template to output a simple text value.\\nThe only purpose of this component is to make it possible to easily add different text values to result templates\\nwhen using the Coveo JavaScript Search Interface Editor (see\\n<a href=\\\"https://docs.coveo.com/en/1852/\\\">Interface Editor</a>).</p>\\n<p>If you are not designing a search interface using the Coveo JavaScript Search Interface Editor, using this component\\nis unnecessary.</p>\\n<p>This component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Text.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Text component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The Thumbnail component automatically fetches the thumbnail of the result object and outputs an HTML <code>img</code> tag with\\nit.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Options for the Thumbnail</p>\\n\",\"type\":\"IThumbnailOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Thumbnail.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Thumbnail component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet\",\"notSupportedIn\":[\"salesforcefree\"],\"comment\":\"<p>The TimespanFacet component displays a FacetRange with prebuilt ranges.\\nThe prebuilt ranges allow you to see the items last updated in the last day, week, month, or year.</p>\\n<p>This component in a thin wrapper around the standard FacetRange component.</p>\\n<p>This component is meant to offer out of the box default ranges, so it can easily be inserted in a standard search page.</p>\\n<p>To configure different ranges than those offered by this component, use the standard FacetRange component instead.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.facet\",\"notSupportedIn\":\"\",\"comment\":\"<p>Returns the underlying FacetRange component associated to the Timespan Facet.</p>\\n\",\"type\":\"FacetRange\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.ranges\",\"notSupportedIn\":\"\",\"comment\":\"<p>Sets a new range for the component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TimespanFacet.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Triggers component enables the use of triggers (<code>notify</code>, <code>execute</code>, <code>query</code>, <code>redirect</code>) generated by the Coveo\\nSearch API (see <a href=\\\"https://docs.coveo.com/en/1458/\\\">Trigger</a>) in the query pipeline (see\\n<a href=\\\"https://docs.coveo.com/en/1450/\\\">Managing the Query Pipeline</a>).\\nNote: adding the Triggers component gives query pipeline administrators the power to influence users&#39; search experience.\\nBad actors will be able to perform XSS attacks, or redirect users to dangerous sites. Make sure only individuals you trust\\nhave query pipeline edit privileges.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.notifications\",\"notSupportedIn\":\"\",\"comment\":\"<p>The list of notifications returned by the Search API for the current query (via <code>notify</code> triggers).\\nThe Triggers component automatically renders this list visually.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Triggers.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Triggers component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail\",\"notSupportedIn\":\"\",\"comment\":\"<p>The YouTubeThumbnail component automatically fetches the thumbnail of a YouTube video.\\nThis component differs from the standard Thumbnail component because the thumbnail it outputs is always\\nclickable.</p>\\n<p>Depending on the component configuration, clicking a YouTube thumbnail can either automatically open a modal box\\ncontaining the <code>iframe</code> from YouTube, or open the target URL in the current window (see\\nYouTubeThumbnail.options.embed).</p>\\n<p>This component is a result template component (see <a href=\\\"https://docs.coveo.com/en/413/\\\">Result Templates</a>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.YouTubeThumbnail.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.BUTTON\",\"notSupportedIn\":\"\",\"comment\":\"<p>The button to use when creating a ModalBox</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.ModalBox\",\"notSupportedIn\":\"\",\"comment\":\"<p>Content of a ModalBox</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.ModalBox.buttons\",\"notSupportedIn\":\"\",\"comment\":\"<p>The availables buttons (Ok, Apply, Cancel, etc.)</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.ModalBox.close\",\"notSupportedIn\":\"\",\"comment\":\"<p>The function that can be called to close the modal box. Note that this is also called by validation button such as APPLY, YES, etc.<br/>\\nForce close will close all open modalbox and skip the validation (if one was provided)</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.ModalBox.content\",\"notSupportedIn\":\"\",\"comment\":\"<p>The content itself</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.ModalBox.modalBox\",\"notSupportedIn\":\"\",\"comment\":\"<p>The modalBox container itself</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.ModalBox.overlay\",\"notSupportedIn\":\"\",\"comment\":\"<p>The overlay added on the body, which can be clicked to close the modalbox</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.ModalBox.wrapper\",\"notSupportedIn\":\"\",\"comment\":\"<p>The wrapper of the content</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options\",\"notSupportedIn\":\"\",\"comment\":\"<p>Possible options when creating a ModalBox</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.body\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify the content that you wish to put inside the modal box</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.buttons\",\"notSupportedIn\":\"\",\"comment\":\"<p>The button you wish to create (Using BUTTON enum</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.className\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify that you wish to add a prefix to the class name of the modal box container, to not clash with existing css in the page</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.fullscreen\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify if you wish to open the modal box full screen. Default is <code>false</code>. If false, the modal box will fit the size of the content.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.overlayClose\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify if you wish to close the modal box when the overlay (black background) is clicked. Default is <code>false</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.sizeMod\",\"notSupportedIn\":\"\",\"comment\":\"<p>The size for the modal box</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify the title of the modal box</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.titleClose\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify that you wish the modal box to close when the user click on the title. Default is <code>false</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ModalBox.Options.validation\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify a validation function, which receives the button that was pressed.<br/>\\nIf the validation function return true, the modal box closes, otherwise it stays open</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AllowedValuesPatternType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible values for the allowedValuesPatternType property of the <code>IGroupByRequest</code> interface.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AllowedValuesPatternType.EditDistance\",\"notSupportedIn\":\"\",\"comment\":\"<p>Applies the Edit Distance algorithm to match values that are close to the specified pattern.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AllowedValuesPatternType.Legacy\",\"notSupportedIn\":\"\",\"comment\":\"<p>Only supports trailing wildcards in the pattern.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AllowedValuesPatternType.Phonetic\",\"notSupportedIn\":\"\",\"comment\":\"<p>Applies a phonetic algorithm to match values that are phonetically similar to the specified pattern.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AllowedValuesPatternType.Regex\",\"notSupportedIn\":\"\",\"comment\":\"<p>Supports regular expression as the pattern.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AllowedValuesPatternType.Wildcards\",\"notSupportedIn\":\"\",\"comment\":\"<p>Fully supports wildcards.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRangeValueFormat\",\"notSupportedIn\":\"\",\"comment\":\"<p>The allowed values for the <code>valueFormat</code> option\\nof the <code>DynamicFacetRange</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRangeValueFormat.currency\",\"notSupportedIn\":\"\",\"comment\":\"<p>Format range values as localized currency strings.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRangeValueFormat.date\",\"notSupportedIn\":\"\",\"comment\":\"<p>Format range values as localized date strings.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DynamicFacetRangeValueFormat.number\",\"notSupportedIn\":\"\",\"comment\":\"<p>Format range values as localized numeric strings.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSearchType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The facet types against which facet search is allowed.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSearchType.hierarchical\",\"notSupportedIn\":\"\",\"comment\":\"<p>Search among hierarchical facet values (e.g., Electronics|Entertainment|Gaming Consoles;, Electronics|Computers|Laptops;, etc.).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSearchType.specific\",\"notSupportedIn\":\"\",\"comment\":\"<p>Search among specific (i.e., scalar) facet values (e.g., Alice Smith, Bob Jones, etc.).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSortCriteria\",\"notSupportedIn\":\"\",\"comment\":\"<p>The allowed sort criteria for a Search API\\nfacet request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSortCriteria.alphanumeric\",\"notSupportedIn\":\"\",\"comment\":\"<p>Sort facet values in ascending alphanumeric order.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSortCriteria.occurrences\",\"notSupportedIn\":\"\",\"comment\":\"<p>Sort facet values in descending number of occurrences.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSortCriteria.score\",\"notSupportedIn\":\"\",\"comment\":\"<p>Sort facet values in descending score order.\\nFacet value scores are based on number of occurrences and position in the\\nranked query result set.</p>\\n<p>The Coveo Machine Learning dynamic navigation experience feature only\\nworks with this sort criterion.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The allowed values for the <code>facetType</code> property of a facet request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetType.dateRange\",\"notSupportedIn\":\"\",\"comment\":\"<p>Request facet values representing ranges of dates.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetType.hierarchical\",\"notSupportedIn\":\"\",\"comment\":\"<p>Request facet values representing a hierarchy.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetType.numericalRange\",\"notSupportedIn\":\"\",\"comment\":\"<p>Request facet values representing ranges of numbers.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetType.specific\",\"notSupportedIn\":\"\",\"comment\":\"<p>Request facet values representing specific values.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueState\",\"notSupportedIn\":\"\",\"comment\":\"<p>The allowed states of a facet value in a Search API facet\\nrequest or\\nresponse.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueState.idle\",\"notSupportedIn\":\"\",\"comment\":\"<p>The facet value is not currently selected or excluded in the search\\ninterface.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValueState.selected\",\"notSupportedIn\":\"\",\"comment\":\"<p>The facet value is currently selected in the search interface.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearchEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>This static class is there to contains the different string definition for all the events related to the AdvancedSearch component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AdvancedSearchEvents.buildingAdvancedSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the AdvancedSearch component is being built.\\nAllows external code to add new sections in the <strong>Advanced Search</strong> panel.</p>\\n<p>All bound handlers receive IBuildingAdvancedSearchEventArgs as an argument</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>AnalyticsEvents</code> static class contains the string definitions of all events that strongly relate to usage\\nanalytics.\\nSee <a href=\\\"https://docs.coveo.com/en/417/\\\">Events</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsEvents.analyticsEventReady\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when any event (i.e., <code>search</code>, <code>click</code>, or <code>custom</code>) is about to be logged.\\nAll <code>analyticsEventReady</code> event handlers receive an <code>AnalyticsEventArgs</code> object as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsEvents.changeAnalyticsCustomData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered whevoid an analytics event is about to be logged.\\nThis event allows external code to modify the analytics data before it is sent to the Coveo Usage Analytics REST\\nservice.</p>\\n<p>All <code>changeAnalyticsCustomData</code> event handlers receive a\\n<code>ChangeAnalyticsCustomDataEventArgs</code> object as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.AnalyticsEvents.documentViewEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when a <code>click</code> analytics event is logged (e.g., when the end user clicks a\\n<code>ResultLink</code> or <code>Quickview</code> to open a query result item).\\nAll <code>documentViewEvent</code> event handlers receive an\\n<code>AnalyticsDocumentViewEventArgs</code> object as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BaseComponent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Every component in the framework ultimately inherits from this base component class.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BaseComponent.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BaseComponent.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BaseComponent.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BreadcrumbEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>This static class is there to contains the different string definition for all the events related to Breadcrumb.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BreadcrumbEvents.clearBreadcrumb\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the user clicks the Clear All button in the breadcrumb. When this event is raised, every filter that is included in the breadcrumb should be removed.\\nThis event does not provide custom event data.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BreadcrumbEvents.populateBreadcrumb\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the breadcrumb needs to update its content. External code can use this event to provide bits of HTML that should be included in the breadcrumb.\\nAll handlers bound to this event will receive a IPopulateBreadcrumbEventArgs as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlayEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The CardOverlayEvents class contains string definitions for all events related to the CardOverlay component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlayEvents.closeCardOverlay\",\"notSupportedIn\":\"\",\"comment\":\"<p>Closing a CardOverlay component triggers this event (see CardOverlay.closeOverlay).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.CardOverlayEvents.openCardOverlay\",\"notSupportedIn\":\"\",\"comment\":\"<p>Opening a CardOverlay component triggers this event (see CardOverlay.openOverlay).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Cell\",\"notSupportedIn\":\"\",\"comment\":\"<p>Represent a single cell of data in the Matrix component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Checkbox\",\"notSupportedIn\":\"\",\"comment\":\"<p>A checkbox widget with standard styling.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Checkbox.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Checkbox</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component\",\"notSupportedIn\":\"\",\"comment\":\"<p>The base class for every component in the framework.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Component.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ComponentEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ComponentEvents</code> class is used by the various Coveo Component to trigger events and bind event handlers. It adds\\nlogic to execute handlers or triggers only when a component is &quot;enabled&quot;, which serves as a way to avoid executing\\nhandlers on components that are invisible and inactive in the query.\\nTypically, a component is disabled when it is not active in the current <code>Tab</code>. It can also be disabled\\nby external code, however.</p>\\n<p>To manually enable or disable a component, simply use its <code>enable</code> or\\n<code>disable</code> method.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ComponentEvents.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ComponentEvents</code> instance for a <code>Component</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ComponentOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ComponentOptions</code> static class contains methods allowing the Coveo JavaScript Search Framework to initialize\\ncomponent options.\\nTypically, each <code>Component</code> that exposes a set of options contains a static <code>options</code> property.</p>\\n<p>This property &quot;builds&quot; each option using the <code>ComponentOptions</code> method corresponding to its type (e.g.,\\n<code>buildBooleanOption</code>,\\n<code>buildFieldOption</code>,\\n<code>buildStringOption</code>, etc.)</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DatePicker\",\"notSupportedIn\":\"\",\"comment\":\"<p>A date picker widget with standard styling.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DatePicker.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>DatePicker</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DateUtils\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>DateUtils</code> class exposes methods to convert strings, numbers and date objects to standard ISO 8601 Date objects,\\nusing the correct culture, language and format. It also offers methods to convert date objects to strings.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>DistanceEvents</code> static class contains the string definitions of all events related to distance\\nlist.\\nSee <a href=\\\"https://docs.coveo.com/en/417/\\\">Events</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceEvents.onPositionNotResolved\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the <code>DistanceResources</code> component fails to resolve the position.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>You should bind a handler to this event if you want to display an error message to the end user, or hide\\ncomponents that cannot be used.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceEvents.onPositionResolved\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the <code>DistanceResources</code> component successfully resolves the position.\\nAll <code>onPositionResolved</code> event handlers receive a <code>PositionResolvedEventArgs</code>\\nobject as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.DistanceEvents.onResolvingPosition\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the <code>DistanceResources</code> component tries to resolve the position.\\nAll <code>onResolvingPosition</code> event handlers receive a\\n<code>ResolvingPositionEventArgs</code> object as an argument.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>You should bind a handler to this event if you want to register one or several new position providers.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Dom\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is essentially an helper class for dom manipulation.<br/>\\nThis is intended to provide some basic functionality normally offered by jQuery.<br/>\\nTo minimize the multiple jQuery conflict we have while integrating in various system, we implemented the very small subset that the framework needs.<br/>\\nSee $$, which is a function that wraps this class constructor, for less verbose code.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Dom.useNativeJavaScriptEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to always register, remove, and trigger events using standard JavaScript rather than attempting to use jQuery first.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Dom.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Dom object with the given HTMLElement</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Dropdown\",\"notSupportedIn\":\"\",\"comment\":\"<p>A dropdown widget with standard styling.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Dropdown.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Dropdown</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.EndpointCaller\",\"notSupportedIn\":\"\",\"comment\":\"<p>This class is in charge of calling an endpoint (eg: a SearchEndpoint).\\nThis means it&#39;s only uses to execute an XMLHttpRequest (for example), massage the response and check if there are errors.</p>\\n<p>Will execute the call and return a Promise.</p>\\n<p>Call using one of those options :</p>\\n<ul>\\n<li>XMLHttpRequest for recent browser that support CORS, or if the endpoint is on the same origin.</li>\\n<li>XDomainRequest for older IE browser that do not support CORS.</li>\\n<li>Jsonp if all else fails, or is explicitly enabled.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.EndpointCaller.useJsonp\",\"notSupportedIn\":\"\",\"comment\":\"<p>Set this property to true to enable Jsonp call to the endpoint.<br/>\\nBe aware that jsonp is &quot;easier&quot; to setup endpoint wise, but has a lot of drawback and limitation for the client code.<br/>\\nDefault to false.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.EndpointCaller.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new EndpointCaller.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExecutionPlan\",\"notSupportedIn\":\"\",\"comment\":\"<p>The plan of execution of a search request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExecutionPlan.basicExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets the final value of the basic expression (<code>q</code>) after the search request has been processed in the query pipeline, but before it is sent to the index.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExecutionPlan.largeExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets the final value of the large expression (<code>lq</code>) after the search request has been processed in the query pipeline, but before it is sent to the index.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExecutionPlan.redirectionURL\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets the URL to redirect the browser to, if the search request satisfies the condition of a <code>redirect</code> trigger rule in the query pipeline.\\nReturns <code>null</code> otherwise.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ExpressionBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>An <code>ExpressionBuilder</code> that is mostly used by the QueryBuilder.<br/>\\nIt is used to build a single query expression.<br/>\\nIt allows combining multiple expression parts into a single string and provides utilities to generate common expression parts.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Used by the Facet component to render and handle the facet search part of each facet.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetSettings\",\"notSupportedIn\":\"\",\"comment\":\"<p>Handle the rendering of the Facet settings menu (typically the ... in the facet header).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>A class which holds information and operation available on a single facet value returned by a IGroupByRequest.<br/>\\nThis class is used extensively in the Facet component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileModeEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The names of the events that can be triggered by the FacetsMobileMode component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileModeEvents.popupClosed\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the event that gets triggered when the facets pop-up (or modal) is closed in mobile mode.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FacetsMobileModeEvents.popupOpened\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the event that gets triggered when the facets pop-up (or modal) is opened in mobile mode.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>FoldingForThread</code> component inherits from the <code>Folding</code> component. It offers the\\nsame configuration options.\\nFolding conversations and threads requires different processing. When you need to fold all child items (including\\ntheir attachments) on the same level under a common ancestor item, use this component rather than the <code>Folding</code>\\ncomponent.</p>\\n<p>This component works well with Chatter and Lithium.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>There can only be one <code>FoldingForThread</code> component per <code>Tab</code> component.</p>\\n</blockquote>\\n<p>See <a href=\\\"https://docs.coveo.com/en/428/\\\">Folding Results</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IFoldingOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FoldingForThread.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>FoldingForThread</code> component</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FormGroup\",\"notSupportedIn\":\"\",\"comment\":\"<p>A simple <code>fieldset</code> HTMLElement containing multiple form widgets.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.FormGroup.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>FormGroup</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.GoogleApiPositionProvider\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>GoogleApiPositionProvider</code> class uses the\\n<a href=\\\"https://developers.google.com/maps/documentation/geolocation/intro\\\">Google Maps Geolocation API</a> to provide the\\nposition of the end user to a <code>DistanceResources</code> component whose\\n<code>googleApiKey</code> option is set to a valid  Google Maps Geolocation API\\nkey.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HistoryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component is instantiated automatically by the framework on the root if the SearchInterface.<br/>\\nWhen the SearchInterface.options.enableHistory option is set to true, this component is instantiated.<br/>\\nIt&#39;s only job is to apply changes in the QueryStateModel to the hash in the URL, and vice versa.<br/>\\nThis component does <em>not</em> hold the state of the interface, it only represent it in the URL.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HistoryController.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HistoryController.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HistoryController.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.HistoryController.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new HistoryController</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Initialization\",\"notSupportedIn\":\"\",\"comment\":\"<p>The main purpose of this class is to initialize the framework (a.k.a the code executed when calling <code>Coveo.init</code>).<br/>\\nIt&#39;s also in charge or registering the available components, as well as the method that we expost to the global Coveo scope.<br/>\\nFor example, the <code>Coveo.executeQuery</code> function will be registed in this class by the QueryController.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.InitializationEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>This static class is there to contain the different string definitions for all the events related to initialization.\\nNote that these events will only be triggered when the init function is called.</p>\\n<p>This means these events are normally called only once when the search interface is initialized.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.InitializationEvents.afterComponentsInitialization\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered after the components are initialized (eg: After the constructor of each component is executed)\\nbut before their state is set from the hash portion of the URL (e.g., <code>http://mysearchinterface#q=myQuery</code>).\\nThis is also before the first query is launched (if the SearchInterface.options.autoTriggerQuery is <code>true</code>).</p>\\n<p>The string value is <code>afterComponentsInitialization</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.InitializationEvents.afterInitialization\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered right after the UI is fully initialized.\\nConcretely this means that the constructor of each component has been executed, and that the state coming for the URL (e.g., <code>http://mysearchinterface#q=myquery</code>) has been applied.</p>\\n<p>It is triggered <em>before</em> the first query is launched, and if the SearchInterface.options.autoTriggerQuery is <code>true</code>.</p>\\n<p>The string value is <code>afterInitialization</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.InitializationEvents.beforeInitialization\",\"notSupportedIn\":\"\",\"comment\":\"<p>This event is triggered right before each components inside the search interface get initialized (eg: Before the constructor of each component is executed).\\nThe string value is <code>beforeInitialization</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.InitializationEvents.nuke\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is triggered when the UI needs to be dynamically removed so that components can unbind any internal handlers they might have set globally on the window or the document.\\nAfter this event has been executed, the search interface can be dynamically removed and all handlers can be considered cleanly removed.</p>\\n<p>The string value is <code>nuke</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.InitializationEvents.restoreHistoryState\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered right before the state from the URL (e.g., <code>http://mysearchinterface#q=myQuery</code>) gets applied in the interface.\\nThis will typically only be useful if the SearchInterface.options.enableHistory is set to <code>true</code>.</p>\\n<p>The string value is <code>restoreHistoryState</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.LocalStorageHistoryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component acts like the HistoryController excepts that is saves the QueryStateModel in the local storage.<br/>\\nThis will not allow &#39;back&#39; and &#39;forward&#39; navigation in the history, like the standard HistoryController allows. Instead, it load the query state only on page load.<br/>\\nTo enable this component, you should set the SearchInterface.options.useLocalStorageForHistory as well as the SearchInterface.options.enableHistory options to true.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.LocalStorageHistoryController.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.LocalStorageHistoryController.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.LocalStorageHistoryController.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.LocalStorageHistoryController.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new LocalStorageHistoryController instance</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Model\",\"notSupportedIn\":\"\",\"comment\":\"<p>A <em>model</em> is a key-value store that triggers various JavaScript events when any value associated to one of its key changes.<br/>\\nThis class is meant to be extended, one of the most\\nComponents set values in this key-value store and listen to triggered events in order to update themselves accordingly.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Model.attributes\",\"notSupportedIn\":\"\",\"comment\":\"<p>The attributes contained in this model.</br>\\nNormally, you should not set attributes directly on this property, as this would prevent required events from being triggered.</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Model.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Model.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Model.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Model.eventTypes\",\"notSupportedIn\":\"\",\"comment\":\"<p>The event types that can be triggered:<br/>\\n• <code>preprocess</code>: triggered before a value is set on an attribute. This allows the value to be modified before it is set.<br/>\\n• <code>changeOne</code>: triggered when a single value changes.</br>\\n• <code>change</code>: triggered when one or many values change.</br>\\n• <code>reset</code>: triggered when all attributes are reset to their default values. </br>\\n• <code>all</code>: triggered after the <code>change</code> event.</br></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MultiSelect\",\"notSupportedIn\":\"\",\"comment\":\"<p>A multi select widget with standard styling.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.MultiSelect.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>MultiSelect</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.NavigatorPositionProvider\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>NavigatorPositionProvider</code> class uses the current web browser to provide the position of the end user to\\na <code>DistanceResources</code> component whose\\n[<code>useNavigator</code>]{DistanceResources.options.useNavigator} option is set to <code>true</code>.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Recent web browsers typically require a site to be in HTTPS to enable their geolocation service.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.NumericSpinner\",\"notSupportedIn\":\"\",\"comment\":\"<p>A numeric spinner widget with standard styling.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.NumericSpinner.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>NumericSpinner</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>OmniboxEvents</code> static class contains the string definitions of all events that strongly relate to the\\n<code>Omnibox</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents.buildingQuerySuggest\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>Omnibox</code> component before sending a query suggestion request to the Search API.\\nAllows external functions to refine the payload b3efore sending the request.</p>\\n<p>This event is only triggered by standard ML-powered query suggestions, and not AnalyticsSuggestions or FieldSuggestions.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents.populateOmniboxSuggestions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>Omnibox</code> component before query completion suggestions are rendered.\\nThe out-of-the-box Coveo JavaScript Search Framework query completion suggestion addons (see the\\n<code>enableFieldAddon</code>,\\n<code>enableQueryExtensionAddon</code>, and\\n<code>enableQuerySuggestAddon</code> options of the <code>Omnibox</code>) push their\\nrespective suggestions in the argument object which is passed along with this event.</p>\\n<p>All <code>populateOmniboxSuggestions</code> event handlers receive a\\n<code>PopulateOmniboxSuggestionsEventArgs</code> object as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents.querySuggestGetFocus\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>Omnibox</code> component when a query suggestion gets focus following a mouse hovering or keyboard navigation event.\\nAll <code>querySuggestGetFocus</code> event handlers receive an object implementing the <code>IQuerySuggestSelection</code> interface as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents.querySuggestLoseFocus\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>Omnibox</code> component when a query suggestion loses focus following a mouse hovering or keyboard navigation event.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents.querySuggestRendered\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>Omnibox</code> component when a query suggestion has finished rendering.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents.querySuggestSelection\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>Omnibox</code> component when a query suggestion is selected by a mouse click or pressing the enter key.\\nAll <code>querySuggestSelection</code> event handlers receive an object implementing the <code>IQuerySuggestSelection</code> interface as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.OmniboxEvents.querySuggestSuccess\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>Omnibox</code> component when query suggestions are received from the Search API.\\nAllows external functions to look into the received query suggestions, and modify them if needed.</p>\\n<p>This event is only triggered by standard ML-powered query suggestions, and not AnalyticsSuggestions or FieldSuggestions.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.PublicPathUtils\",\"notSupportedIn\":\"\",\"comment\":\"<p>Set of utilities to determine where to load the lazy chunks from.\\nYou should add the <code>coveo-script</code> class on the script tag that includes the Coveo framework to make sure the framework can always\\nauto-detect the path to load the lazy chunks from. More details here\\\">https://docs.coveo.com/en/295/javascript-search-framework/lazy-versus-eager-component-loading#fixing-code-chunks-loading-path-issues}</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryBuilder is used to build a IQuery that will be able to be executed using the Search API.\\nThe class exposes several members and methods that help components and external code to build up the final query that is sent to the Search API.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.actionsHistory\",\"notSupportedIn\":\"\",\"comment\":\"<p>The actions history represents the past actions a user made and is used by the Coveo Machine Learning service to suggest recommendations.\\nIt is generated by the page view script (<a href=\\\"https://github.com/coveo/coveo.analytics.js)\\\">https://github.com/coveo/coveo.analytics.js)</a>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.advancedExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Used to build the advanced part of the query expression.\\nThis part is typically formed of filter expressions generated by components such as facets, external code, etc.</p>\\n\",\"type\":\"ExpressionBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.allowQueriesWithoutKeywords\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the Search API should perform queries even when no keywords were entered by the end user.\\nEnd user keywords are present in either the IQuery.q or IQuery.lq part of the query.</p>\\n<p>This parameter is normally controlled by SearchInterface.options.allowEmptyQuery option.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.categoryFacets\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of request for the CategoryFacet component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.childField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the childField when doing parent-child loading (See: Folding).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.commerce\",\"notSupportedIn\":\"\",\"comment\":\"<p>A request for a commerce query.</p>\\n\",\"type\":\"ICommerceRequest\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.constantExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Used to build the advanced part of the query expression.\\nThis part is similar to <code>advancedExpression</code>, but its content is interpreted as a constant expression by the index and it takes advantage of special caching features.</p>\\n\",\"type\":\"ExpressionBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.context\",\"notSupportedIn\":\"\",\"comment\":\"<p>The custom context information to send along with the query. Each value should be a string or an array of strings.\\nCustom context information can influence the output of Coveo Machine Learning models and can also be used in query pipeline conditions.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.disjunctionExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Used to build the disjunctive part of the query expression.\\nWhen present, this part is evaluated separately from the other expressions and the matching results are merged to those matching expressions, <code>advancedExpression</code> and <code>constantExpression</code>.</p>\\n<p>The final boolean expression for the query is thus (basic advanced constant) OR (disjunction).</p>\\n\",\"type\":\"ExpressionBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enableCollaborativeRating\",\"notSupportedIn\":\"\",\"comment\":\"<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>The Coveo Cloud V2 platform does not support collaborative rating. Therefore, this property is obsolete in Coveo Cloud V2.</p>\\n</blockquote>\\n<p>Whether the index should take collaborative rating in account when ranking result (See: ResultRating).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enableDebug\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to enable debug info on the query.\\nThis will return additional information on the resulting JSON response from the Search API.</p>\\n<p>Mostly: execution report (a detailed breakdown of the parsed and executed query).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enableDidYouMean\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to enable query corrections on this query (see DidYouMean).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enableLowercaseOperators\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to interpret the <code>AND</code>, <code>NOT</code>, <code>OR</code>, and <code>NEAR</code> keywords in the basic\\n<code>expression</code> as query operators, even if those keywords are in lowercase.\\nSetting this attribute to <code>true</code> has no effect unless <code>enableQuerySyntax</code>\\nis also <code>true</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, the <code>enableLowercaseOperators</code> option of the\\n<code>Querybox</code> component determines the value of this attribute during the initialization of the\\nsearch page.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enablePartialMatch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to automatically convert the basic <code>expression</code> to a partial match\\nexpression if it contains at least a certain number of keywords (see\\n<code>partialMatchKeywords</code>), so that items containing at least a certain\\nsubset of those keywords (see <code>partialMatchThreshold</code>) will match the\\nquery.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, the <code>enablePartialMatch</code> option of the\\n<code>Querybox</code> component determines the value of this attribute during the initialization of the\\nsearch page.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enableQuerySyntax\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to interpret special query syntax (e.g., <code>@objecttype=message</code>) in the basic\\n<code>expression</code> (see\\n<a href=\\\"https://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\\\">Coveo Query Syntax Reference</a>).\\nSee also <code>enableLowercaseOperators</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, the <code>enableQuerySyntax</code> option of the\\n<code>Querybox</code> component determines the value of this attribute during the initialization of the\\nsearch page. End user preferences can also modify the value of this attribute.</p>\\n</blockquote>\\n<p>Default value is <code>false</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enableQuestionMarks\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to interpret question mark characters (<code>?</code>) in the basic <code>expression</code>\\nkeywords (see <a href=\\\"https://docs.coveo.com/en/1580/\\\">Using Wildcards in Queries</a>.\\nSetting this attribute to <code>true</code> has no effect unless <code>enableWildcards</code> is\\nalso <code>true</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, the <code>enableQuestionMarks</code> option of the\\n<code>Querybox</code> component determines the value of this attribute during the initialization of the\\nsearch page.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.enableWildcards\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to interpret wildcard characters (<code>*</code>) in the basic <code>expression</code> keywords.\\nSetting this attribute to <code>true</code> enables the wildcards features of the index, effectively expanding keywords\\ncontaining wildcard characters (<code>*</code>) to the possible matching keywords in order to broaden the query (see\\n<a href=\\\"https://docs.coveo.com/en/1580/\\\">Using Wildcards in Queries</a>).</p>\\n<p>See also <code>enableQuestionMarks</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, the <code>enableWildcards</code> option of the\\n<code>Querybox</code> component determines the value of this attribute during the initialization of the\\nsearch page.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.excerptLength\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.\\nThe index includes the top most interesting sentences (in the order they appear in the item) that fit in the specified number of characters.</p>\\n<p>When not specified, the default value is 200.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.expression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Used to build the basic part of the query expression.\\nThis part typically consists of user-entered content such as query keywords, etc.</p>\\n\",\"type\":\"ExpressionBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.facetOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The global configuration options to apply to the requests in the facets array.</p>\\n\",\"type\":\"IFacetOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.facetRequests\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of request for the DynamicFacet component.\\nCannot be used alongside <code>groupByRequests</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.filterField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a field on which Folding should be performed.\\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.</p>\\n<p>It&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.filterFieldRange\",\"notSupportedIn\":\"\",\"comment\":\"<p>Number of results that should be folded, using the IQuery.filterField.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.firstResult\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the 0-based index of the first result to return.\\nIf not specified, this parameter defaults to 0.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.groupByRequests\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of Group By operations that can be performed on the query results to extract facets.\\nCannot be used alongside <code>facetRequests</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.longQueryExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>The contextual text.\\nThis is the contextual text part of the query. It uses the Coveo Machine Learning service to pick key keywords from the text and add them to the basic expression.\\nThis field is mainly used to pass context such a case description, long textual query or any other form of text that might help in\\nrefining the query.</p>\\n\",\"type\":\"ExpressionBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.maximumAge\",\"notSupportedIn\":\"\",\"comment\":\"<p>The maximum age for cached query results, in milliseconds.\\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.</p>\\n<p>Otherwise, the query will be sent to the index.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.numberOfResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the number of results to return, starting from IQuery.firstResult.\\nIf not specified, this parameter defaults to 10.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.parentField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the <code>parentField</code> when doing parent-child loading (See: Folding).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.partialMatchKeywords\",\"notSupportedIn\":\"\",\"comment\":\"<p>The minimum number of keywords that need to be present in the basic <code>expression</code>\\nto convert it to a partial match expression.\\nThe value of this attribute has no meaning unless <code>enablePartialMatch</code> is\\n<code>true</code>.</p>\\n<p>See also <code>partialMatchThreshold</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, the <code>partialMatchKeywords</code> option of the\\n<code>Querybox</code> component determines the value of this attribute during the initialization of the\\nsearch page.</p>\\n</blockquote>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.partialMatchThreshold\",\"notSupportedIn\":\"\",\"comment\":\"<p>An absolute or relative (percentage) value indicating the minimum number of partial match expression keywords an\\nitem must contain to match the query.\\nThe value of this attribute has no meaning unless <code>enablePartialMatch</code> is\\n<code>true</code>.</p>\\n<p>See also <code>partialMatchKeywords</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, the <code>partialMatchThreshold</code> option of the\\n<code>Querybox</code> component determines the value of this attribute during the initialization of the\\nsearch page.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.pipeline\",\"notSupportedIn\":\"\",\"comment\":\"<p>Name of the query pipeline to use.\\nSpecifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.queryFunctions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of Query Function operation that will be executed on the results.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.rankingFunctions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of Ranking Function operations that will be executed on the results.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.recommendation\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the ID of the recommendation interface that generated the query.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.searchHub\",\"notSupportedIn\":\"\",\"comment\":\"<p>The hub value set from the Analytics component.\\nUsed for analytics reporting in the Coveo platform.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.sortCriteria\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to relevancy.\\nPossible values are : <br/>\\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\\n-- dateascending / datedescending Sort using the value of the <code>@date</code> field, which is typically the last modification date of an item in the index.<br/>\\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using <code>relevancy</code> except that automatic weights based on keyword proximity etc, are not computed.<br/>\\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\\n-- @field ascending / @field descending Sort using the value of a custom field.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.tab\",\"notSupportedIn\":\"\",\"comment\":\"<p>The tab value set from the Tab component.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryBuilder.userActions\",\"notSupportedIn\":\"\",\"comment\":\"<p>A request to retrieve user actions in the query response.</p>\\n\",\"type\":\"IUserActionsRequest\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>This class is automatically instantiated and bound to the root of your search interface when you initialize the framework.<br/>\\nIt is essentially a singleton that wraps the access to the SearchEndpoint endpoint to execute query, and is in charge of triggering the different query events.<br/>\\nThis is what every component of the framework uses internally to execute query or access the endpoint.<br/>\\nWhen calling <code>Coveo.executeQuery</code> this class is used.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryController.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryController.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryController.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryController.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new query controller</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>This static class is there to contains the different string definition for all the events related to query.\\nNote that these events will only be triggered when the QueryController.executeQuery method is used, either directly or by using executeQuery</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.buildingQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the query is being built.\\nThis is typically where all components will contribute their part to the IQuery using the QueryBuilder.</p>\\n<p>All bound handlers will receive IBuildingQueryEventArgs as an argument.</p>\\n<p>The string value is <code>buildingQuery</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.deferredQuerySuccess\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered after the main query success event has finished executing.\\nThis is typically where facets will process the IGroupByResult and render themselves.</p>\\n<p>All bound handlers will receive IQuerySuccessEventArgs as an argument.</p>\\n<p>The string value is <code>deferredQuerySuccess</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.doneBuildingQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the query is done being built.\\nThis is typically where the facet will add it&#39;s IGroupByRequest to the IQuery.</p>\\n<p>All bound handlers will receive IDoneBuildingQueryEventArgs as an argument.</p>\\n<p>The string value is <code>doneBuildingQuery</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.duringFetchMoreQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when more results are being fetched on the Search API (think : infinite scrolling, or pager).\\nAll bound handlers will receive IDuringQueryEventArgs as an argument.</p>\\n<p>The string value is <code>duringFetchMoreQuery</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.duringQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the query is being executed on the Search API.\\nAll bound handlers will receive IDuringQueryEventArgs as an argument.</p>\\n<p>The string value is <code>duringQuery</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.fetchMoreSuccess\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when a more results were successfully returned from the Search API. (think : infinite scrolling, or pager).\\nAll bound handlers will receive IFetchMoreSuccessEventArgs as an argument.</p>\\n<p>The string value is <code>fetchMoreSuccess</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.newQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when a new query is launched.\\nAll bound handlers will receive INewQueryEventArgs as an argument.</p>\\n<p>The string value is <code>newQuery</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.noResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when there is no result for a particular query.\\nAll bound handlers will receive INoResultsEventArgs as an argument.</p>\\n<p>The string value is <code>noResults</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.preprocessMoreResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered before the QueryEvents.fetchMoreSuccess event.\\nThis allows external code to modify the results before rendering them.</p>\\n<p>For example, the Folding component might use this event to construct a coherent parent child relationship between query results.</p>\\n<p>All bound handlers will receive IPreprocessResultsEventArgs as an argument.</p>\\n<p>The string value is <code>preprocessMoreResults</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.preprocessResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered before the QueryEvents.querySuccess event.\\nThis allows external code to modify the results before rendering them.</p>\\n<p>For example, the Folding component might use this event to construct a coherent parent child relationship between query results.</p>\\n<p>All bound handlers will receive IPreprocessResultsEventArgs as an argument.</p>\\n<p>The string value is <code>preprocessResults</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.queryError\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when there was an error executing a query on the Search API.\\nAll bound handlers will receive IQueryErrorEventArgs as an argument.</p>\\n<p>The string value is <code>queryError</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryEvents.querySuccess\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when a query successfully returns from the Search API.\\nAll bound handlers will receive IQuerySuccessEventArgs as an argument.</p>\\n<p>The string value is <code>querySuccess</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>QueryStateModel</code> class is a key-value store which contains the current state of the components that can affect\\nthe query (see <a href=\\\"https://docs.coveo.com/en/344/\\\">State</a>). This class inherits from the <a href=\\\"https://coveo.github.io/search-ui/classes/model.html\\\"><code>Model</code></a>\\nclass. Optionally, it is possible to persist the state in the query string in order to enable browser history\\nmanagement (see the <code>HistoryController</code> class).\\nComponents set values in the <code>QueryStateModel</code> instance to reflect their current state. The <code>QueryStateModel</code>\\ntriggers state events (see <code>eventTypes</code>) whevoid one of its values is modified. Components\\nlisten to triggered state events to update themselves when appropriate.</p>\\n<p>For instance, when a query is triggered, the <code>Searchbox</code> component sets the <code>q</code> attribute (the\\nbasic query expression), while the <code>Pager</code> component sets the <code>first</code> attribute (the index of the\\nfirst result to display in the result list), and so on.</p>\\n<p><strong>Example:</strong></p>\\n<blockquote>\\n<p>The user modifies the content of the <code>Searchbox</code> and submits a query. This triggers the following state events:</p>\\n<ul>\\n<li><code>state:change:q</code> (because the value of <code>q</code> has changed).</li>\\n<li><code>state:change</code> (because at least one value has changed in the <code>QueryStateModel</code>).</li>\\n</ul>\\n<p>Components or external code can attach handlers to those events:</p>\\n<pre><code class=\\\"lang-javascript\\\">Coveo.$$(<span class=\\\"hljs-built_in\\\">document</span>).on(<span class=\\\"hljs-string\\\">'state:change:q'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) </span>{\\n  [ ... ]\\n});\\n</code></pre>\\n</blockquote>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>Normally, you should interact with the <code>QueryStateModel</code> instance using the <code>Coveo.state</code> top-level\\nfunction.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryStateModel.attributes\",\"notSupportedIn\":\"\",\"comment\":\"<p>The attributes contained in this model.</br>\\nNormally, you should not set attributes directly on this property, as this would prevent required events from being triggered.</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryStateModel.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryStateModel.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryStateModel.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryStateModel.eventTypes\",\"notSupportedIn\":\"\",\"comment\":\"<p>The event types that can be triggered:<br/>\\n• <code>preprocess</code>: triggered before a value is set on an attribute. This allows the value to be modified before it is set.<br/>\\n• <code>changeOne</code>: triggered when a single value changes.</br>\\n• <code>change</code>: triggered when one or many values change.</br>\\n• <code>reset</code>: triggered when all attributes are reset to their default values. </br>\\n• <code>all</code>: triggered after the <code>change</code> event.</br></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QueryStateModel.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>QueryStateModel</code> instance.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummaryEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>This static class is there to contains the different string definition for all the events related to the AdvancedSearch component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuerySummaryEvents.cancelLastAction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the last action is being cancelled by the query summary component\\nAllows external code to revert their last action.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>QuickviewEvents</code> static class contains the string definitions of all events that strongly relate to the\\n<code>Quickview</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewEvents.openQuickview\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>QuickviewDocument</code> component when the end user has just clicked the\\n<strong>Quickview</strong> button/link to open the quickview modal window.\\nThis event allows external code to modify the terms to highlight before the content of the quickview modal window\\nis rendered.</p>\\n<p>All <code>openQuickview</code> event handlers receive an\\n<code>OpenQuickviewEventArgs</code> object as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.QuickviewEvents.quickviewLoaded\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>QuickviewDocument</code> component when the content to display in the\\nquickview modal window has just finished downloading.\\nThe <code>Quickview</code> component listens to this event to know when to remove its loading animation.</p>\\n<p>All <code>quickviewLoaded</code> event handlers receive a <code>QuickviewLoadedEventArgs</code> object\\nas an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.RadioButton\",\"notSupportedIn\":\"\",\"comment\":\"<p>A radio button widget with standard styling.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.RadioButton.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>RadioButton</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResponsiveComponents\",\"notSupportedIn\":\"\",\"comment\":\"<p>This class serves as a way to get and set the different screen size breakpoints for the interface.\\nBy setting those, you can impact, amongst others, the Facet&#39;s, Tab&#39;s or the ResultList&#39;s behaviour.</p>\\n<p>For example, the Facet components of your interface will switch to a dropdown menu when the screen size reaches 800px or less.</p>\\n<p>You could modify this value using <code>this</code> calls</p>\\n<p>Normally, you would interact with this class using the instance bound to SearchInterface.responsiveComponents</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultListEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ResultListEvents</code> static class contains the string definitions of all events that strongly relate to the result\\nlist.\\nSee <a href=\\\"https://docs.coveo.com/en/417/\\\">Events</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultListEvents.changeLayout\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>ResultLayout</code> component whevoid the current result layout changes (see\\n<a href=\\\"https://docs.coveo.com/en/360/\\\">Result Layouts</a>).\\nAll <code>changeLayout</code> event handlers receive a <code>ChangeLayoutEventArgs</code> object as an\\nargument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultListEvents.newResultDisplayed\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered each time the result list has just finished rendering a single result.\\nAll <code>newResultDisplayed</code> event handlers receive a\\n<code>DisplayedNewResultEventArgs</code> object as an argument.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultListEvents.newResultsDisplayed\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered when the result list has just finished rendering the current page of results.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultListEvents.openQuickview\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>ResultLink</code> result template component when its\\n<code>openQuickview</code> option is set to <code>true</code> and the end user clicks the\\nresult link. The <code>Quickview</code> component listens to this event to be able to open the quickview\\nmodal window in reaction.\\nSee also the <code>openQuickview</code> event (which is identical to this one, except\\nthat it is triggered by the [<code>QuickviewDocument</code>] result template component instead).</p>\\n<p>All <code>openQuickview</code> event handlers receive an <code>OpenQuickviewEventArgs</code> object as\\nan argument</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultPreviewsManagerEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>Those are the string definitions of events for ResultPreviewsManager.\\nThose events should be bound to the element returned by <code>resolveRoot</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultPreviewsManagerEvents.buildingResultPreviewsQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Executed when building a query to fetch result previews.\\nThis always receives IBuildingResultPreviewsQueryEventArgs as arguments.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultPreviewsManagerEvents.populateSearchResultPreviews\",\"notSupportedIn\":\"\",\"comment\":\"<p>Executed when a Suggestion is focused and waiting for search result previews.\\nThis always receives IPopulateSearchResultPreviewsEventArgs as arguments.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResultPreviewsManagerEvents.updateResultPreviewsManagerOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Executed when a Suggestion is focused before PopulateSearchResultPreviews is called to fetch more options.\\nThis always receives IUpdateResultPreviewsManagerOptionsEventArgs as arguments.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchEndpoint\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>SearchEndpoint</code> class allows the framework to perform HTTP requests against the Search API (e.g., searching, getting query suggestions, getting the HTML preview of an item, etc.).\\n<strong>Note:</strong></p>\\n<p>When writing custom code that interacts with the Search API, be aware that executing queries directly through an instance of this class will <em>not</em> trigger any <a href=\\\"https://docs.coveo.com/en/417/#query-events\\\">query events</a>.</p>\\n<p>In some cases, this may be what you want. However, if you <em>do</em> want query events to be triggered (e.g., to ensure that standard components update themselves as expected), use the <code>queryController</code> instance instead.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchEndpoint.endpoints\",\"notSupportedIn\":\"\",\"comment\":\"<p>A map of all initialized <code>SearchEndpoint</code> instances.\\n<strong>Example:</strong> <code>Coveo.SearchEndpoint.endpoints[&quot;default&quot;]</code> returns the default endpoint that was created at initialization.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.SearchEndpoint.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>SearchEndpoint</code> instance.\\nUses a set of adequate default options, and merges these with the <code>options</code> parameter.\\nAlso creates an <code>EndpointCaller</code> instance and uses it to communicate with the endpoint\\ninternally.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StandaloneSearchInterfaceEvents\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>StandaloneSearchInterfaceEvents</code> static class contains the string definitions of all events that strongly relate to the standalone search interface.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StandaloneSearchInterfaceEvents.beforeRedirect\",\"notSupportedIn\":\"\",\"comment\":\"<p>Triggered by the <code>StandaloneSearchBox</code> component during initialization, just before redirecting to the full search page.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.StaticPositionProvider\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>StaticPositionProvider</code> class provides a static end user position to a\\n<code>DistanceResources</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateCache\",\"notSupportedIn\":\"\",\"comment\":\"<p>Holds a reference to all template available in the framework</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TemplateHelpers\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allow to register and return template helpers (essentially: Utility functions that can be executed in the context of a template to render complex elements).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TextInput\",\"notSupportedIn\":\"\",\"comment\":\"<p>A text input widget with standard styling.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.TextInput.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>TextInput</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAdvancedSearchSection\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a section in the AdvancedSearch component</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAdvancedSearchSection.inputs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The array of inputs to populate.\\nExternal code should only push inputs that match the type BaseFormTypes.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAdvancedSearchSection.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the section.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsActionCause\",\"notSupportedIn\":\"\",\"comment\":\"<p>The IAnalyticsActionCause interface describes the cause of an event for the analytics service.\\nSee the Analytics component</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsActionCause.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of the event. While you can actually set this property to any arbitrary string value, its value\\nshould uniquely identify the precise action that triggers the event. Thus, each individual event should have its\\nown unique <code>name</code> value.\\nExample: <code>searchBoxSubmit</code>, <code>resultSort</code>, etc.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsActionCause.type\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the type of the event. While you can actually set this property to any arbitrary string value, it should\\ndescribe the general category of the event. Thus, more than one event can have the same <code>type</code> value, which makes\\nit possible to group events with identical types when doing reporting.\\nExample: All search box related events could have <code>searchbox</code> as their <code>type</code> value.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsClickQuerySuggestPreviewMeta\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes the object sent as metadata along with <code>clickQuerySuggestPreview</code> usage analytics events.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsClickQuerySuggestPreviewMeta.displayedRank\",\"notSupportedIn\":\"\",\"comment\":\"<p>The 0-based position of the preview item that was opened.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsClickQuerySuggestPreviewMeta.suggestion\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query suggestion for which a preview item was opened.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsClient\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IAnalyticsClient</code> interface describes an analytics client that can log events to, or return information from the\\nusage analytics service.\\nSee also the <code>Analytics</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsDocumentViewEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IAnalyticsDocumentViewEventArgs</code> interface describes the object that all\\n<code>documentViewEvent</code> handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsDocumentViewEventArgs.documentViewEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The data to send in the request body of the Usage Analytics Write REST API call that logs the <code>click</code> event.</p>\\n\",\"type\":\"IAPIDocumentViewEvent\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsDocumentViewMeta\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IAnalyticsDocumentViewMeta</code> interface describes the expected metadata when logging a click event / item view.\\nSee also the <code>Analytics</code> component, and more specifically its\\n<code>logClickEvent</code> method.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsDocumentViewMeta.author\",\"notSupportedIn\":\"\",\"comment\":\"<p>The author of the clicked item.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsDocumentViewMeta.documentTitle\",\"notSupportedIn\":\"\",\"comment\":\"<p>The title of the clicked item.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsDocumentViewMeta.documentURL\",\"notSupportedIn\":\"\",\"comment\":\"<p>The URL of the clicked item.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The common subset of fields used to describe Coveo Cloud usage analytics <em>search</em>, <a href=\\\"@link IClickEvent\\\"><em>click</em></a>, and <a href=\\\"@link ICustomEvent\\\"><em>custom</em></a> events.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.actionCause\",\"notSupportedIn\":\"\",\"comment\":\"<p>A unique name describing the action that triggered the event.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\\\"><code>name</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>pagerNext</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.actionType\",\"notSupportedIn\":\"\",\"comment\":\"<p>A name describing the category of actions to which the action that triggered the event belongs.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\\\"><code>type</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.anonymous\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\\\"><code>anonymous</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.customData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Additional metadata to send along with the event.\\n<strong>Note:</strong> This field may include custom user context information (see <a href=\\\"https://docs.coveo.com/en/399/\\\">Sending Custom Context Information</a>).</p>\\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.device\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the device or browser that triggered the event.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Chrome</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.language\",\"notSupportedIn\":\"\",\"comment\":\"<p>The language of the search interface from which the event originates.\\nMust be a valid <a href=\\\"https://en.wikipedia.org/wiki/ISO_639-1\\\">ISO-639-1 code</a>.</p>\\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\\\"https://docs.coveo.com/en/421/\\\">Changing the Language of Your Search Interface</a>).</p>\\n<p><strong>Example:</strong> <code>en</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.mobile\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event originates from a mobile device.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.originContext\",\"notSupportedIn\":\"\",\"comment\":\"<p>The broad application context from which the event originates.\\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\\\"><code>setOriginContext</code></a> method of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component to modify the default value.</p>\\n<p><strong>Example:</strong> <code>Search</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.originLevel1\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the search interface from which the event originates.\\n<strong>Note:</strong> This field is normally set through the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\\\"><code>searchHub</code></a> option of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.originLevel2\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the tab from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\\\"https://coveo.github.io/search-ui/components/tab.html\\\"><code>Tab</code></a> in the search interface.</p>\\n<p><strong>Example:</strong> <code>All</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.originLevel3\",\"notSupportedIn\":\"\",\"comment\":\"<p>The address of the webpage that linked to the search interface from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.responseTime\",\"notSupportedIn\":\"\",\"comment\":\"<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for search events in which case it sets the field by retrieving the information from the related Search API query response.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.userAgent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The software acting on behalf of the end-user whose action triggered the event.\\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.userDisplayName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The display name of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\\\"><code>userDisplayName</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.userGroups\",\"notSupportedIn\":\"\",\"comment\":\"<p>The groups the end-user whose action triggered the event belongs to.\\n<strong>Note:</strong> This field is normally left any, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEvent.username\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.user\\\"><code>user</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <a href=\\\"mailto:`asmith@example.com\\\">`asmith@example.com</a>`</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The object that all <code>analyticsEventReady</code> handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEventArgs.coveoAnalyticsEventData\",\"notSupportedIn\":\"\",\"comment\":\"<p>The fields describing the Coveo Cloud usage analytics event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsEventArgs.event\",\"notSupportedIn\":\"\",\"comment\":\"<p>The type of Coveo Cloud usage analytics event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes the current condition of a single dynamic facet value.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.displayValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>The custom display name of the dynamic facet value that was interacted with.\\n<strong>Example:</strong> <code>Alice R. Smith</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.end\",\"notSupportedIn\":\"\",\"comment\":\"<p>The maximum value of the dynamic range facet value.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>500</code></li>\\n<li><code>2018-12-31T23:59:59.999Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.endInclusive\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the <code>end</code> value is included in the dynamic range facet value.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.facetType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The type of values displayed in the dynamic facet.</p>\\n\",\"type\":\"FacetType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the field the dynamic facet displaying the value is based on.\\n<strong>Example:</strong> <code>author</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.id\",\"notSupportedIn\":\"\",\"comment\":\"<p>The unique identifier of the dynamic facet displaying the value.\\n<strong>Example:</strong> <code>author</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.start\",\"notSupportedIn\":\"\",\"comment\":\"<p>The minimum value of the dynamic range facet value.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>0</code></li>\\n<li><code>2018-01-01T00:00:00.000Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.state\",\"notSupportedIn\":\"\",\"comment\":\"<p>The new state of the dynamic facet value that was interacted with.</p>\\n\",\"type\":\"FacetValueState\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>The title of the dynamic facet.\\n<strong>Example:</strong> <code>Author</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.value\",\"notSupportedIn\":\"\",\"comment\":\"<p>The original name (i.e., field value) of the dynamic facet value.\\n<strong>Example:</strong> <code>alice_r_smith</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnalyticsFacetState.valuePosition\",\"notSupportedIn\":\"\",\"comment\":\"<p>The current 1-based position of the dynamic facet value, relative to other values in the same dynamic facet.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnchorUtilsOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Options for building an <code>&lt;a&gt;</code> tag.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnchorUtilsOptions.class\",\"notSupportedIn\":\"\",\"comment\":\"<p>The CSS class(es) of the tag.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnchorUtilsOptions.target\",\"notSupportedIn\":\"\",\"comment\":\"<p>The target (<code>href</code> attribute).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IAnchorUtilsOptions.text\",\"notSupportedIn\":\"\",\"comment\":\"<p>The tag&#39;s text content.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBadgeColors\",\"notSupportedIn\":\"\",\"comment\":\"<p>Badge Colors</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBeforeRedirectEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IBeforeRedirectEventArgs</code> interface describes the object that all\\n<code>beforeRedirect</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBeforeRedirectEventArgs.cancel\",\"notSupportedIn\":\"\",\"comment\":\"<p>If this property is set to <code>true</code> by a <code>beforeRedirect</code> event handler, the <code>StandaloneSearchBox</code> component will not redirect to the full search page.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBeforeRedirectEventArgs.searchPageUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>The URI of the page that the search interface will redirect to when a query is performed by the <code>StandaloneSearchBox</code> component.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBreadcrumbItem\",\"notSupportedIn\":\"\",\"comment\":\"<p>Represent an item to insert in the breadcrumb</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBreadcrumbItem.element\",\"notSupportedIn\":\"\",\"comment\":\"<p>The HTMLElement to insert in the breadcrumb</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBuildingAdvancedSearchEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on AdvancedSearchEvents.buildingAdvancedSearch</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBuildingAdvancedSearchEventArgs.executeQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>An easy way to execute a new query.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBuildingAdvancedSearchEventArgs.sections\",\"notSupportedIn\":\"\",\"comment\":\"<p>Sections which external code can populate by pushing into this array.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBuildingQueryEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.buildingQuery</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBuildingQueryEventArgs.cancel\",\"notSupportedIn\":\"\",\"comment\":\"<p>If this property is set to true by any handlers, the query will not be executed.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBuildingQueryEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allow handlers to modify the query by using the QueryBuilder</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IBuildingQueryEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Determine if the query is a &quot;search-as-you-type&quot;</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IChangeAnalyticsCustomDataEventArgs</code> interface describes the object that all\\n<code>changeAnalyticsCustomData</code> event handlers receive as an argument.\\nThis interface extends the <code>IChangeableAnalyticsDataObject</code> interface.</p>\\n<p><strong>Notes:</strong></p>\\n<blockquote>\\n<ul>\\n<li>External code can only modify the attributes described by the <code>IChangeableAnalyticsDataObject</code> interface.</li>\\n<li>When the analytics event being logged is a <code>ClickEvent</code>, the <code>ChangeAnalyticsCustomDataEventArgs</code> object also\\ncontains a <code>resultData</code> attribute, which describes the <code>QueryResult</code> that was clicked.\\nExternal code <strong>cannot</strong> modify this object.</li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.actionCause\",\"notSupportedIn\":\"\",\"comment\":\"<p>The cause of the usage analytics event.\\nFor instance, triggering a query using the search box logs a usage analytics event with <code>searchBoxSubmit</code> as its\\n<code>actionCause</code>, whereas triggering a query by selecting a facet value logs a usage analytics event with\\n<code>facetSelect</code> as its <code>actionCause</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>cannot</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.actionType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The generic action type of the usage analytics event.\\nAll analytics events that strongly relate to a certain feature or component usually share the same <code>actionType</code>.</p>\\n<p>For instance, all usage analytics events relating to the <code>Facet</code> component have <code>facet</code> as their\\n<code>actionType</code>, whereas all usage analytics events relating to the <code>Breadcrumb</code> component have\\n<code>breadcrumb</code> as their <code>actionType</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>cannot</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.language\",\"notSupportedIn\":\"\",\"comment\":\"<p>The language of the search interface from which the usage analytics event originates.\\nBy default, the framework populates this attribute with the currently loaded localization and culture file of the\\nsearch interface from which the usage analytics event originates.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.metaObject\",\"notSupportedIn\":\"\",\"comment\":\"<p>The metadata to send along with the usage analytics event.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify existing values, or add new key-value pairs in this attribute.</p>\\n</blockquote>\\n\",\"type\":\"IChangeableAnalyticsMetaObject\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.originLevel1\",\"notSupportedIn\":\"\",\"comment\":\"<p>The high-level origin of the usage analytics event.\\nFor instance, this could be the name of the search hub, or a name that can uniquely identify the search page from\\nwhich the usage analytics event originates.</p>\\n<p>Default value is <code>default</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.originLevel2\",\"notSupportedIn\":\"\",\"comment\":\"<p>The mid-level origin of the usage analytics event.\\nBy default, the framework populates this attribute with the <code>data-id</code> of the currently selected tab in the search\\ninterface from which the usage analytics event originates.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.originLevel3\",\"notSupportedIn\":\"\",\"comment\":\"<p>The low-level origin of the usage analytics event.\\nFor instance, this could be the HTTP identifier of the page from which the usage analytics event originates.</p>\\n<p>Default value is the empty string.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeAnalyticsCustomDataEventArgs.type\",\"notSupportedIn\":\"\",\"comment\":\"<p>The type of the usage analytics event.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>cannot</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeLayoutEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IChangeLayoutEventArgs</code> interface describes the object that all\\n<code>ChangeLayout</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeLayoutEventArgs.layout\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the new layout.</p>\\n\",\"type\":\"ValidLayout\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeLayoutEventArgs.results\",\"notSupportedIn\":\"\",\"comment\":\"<p>The current page of results.</p>\\n\",\"type\":\"IQueryResults\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeableAnalyticsDataObject\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IChangeableAnalyticsDataObject</code> interface describes the modifiable part of the object that all\\n<code>changeAnalyticsCustomData</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeableAnalyticsDataObject.language\",\"notSupportedIn\":\"\",\"comment\":\"<p>The language of the search interface from which the usage analytics event originates.\\nBy default, the framework populates this attribute with the currently loaded localization and culture file of the\\nsearch interface from which the usage analytics event originates.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeableAnalyticsDataObject.metaObject\",\"notSupportedIn\":\"\",\"comment\":\"<p>The metadata to send along with the usage analytics event.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify existing values, or add new key-value pairs in this attribute.</p>\\n</blockquote>\\n\",\"type\":\"IChangeableAnalyticsMetaObject\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeableAnalyticsDataObject.originLevel1\",\"notSupportedIn\":\"\",\"comment\":\"<p>The high-level origin of the usage analytics event.\\nFor instance, this could be the name of the search hub, or a name that can uniquely identify the search page from\\nwhich the usage analytics event originates.</p>\\n<p>Default value is <code>default</code>.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeableAnalyticsDataObject.originLevel2\",\"notSupportedIn\":\"\",\"comment\":\"<p>The mid-level origin of the usage analytics event.\\nBy default, the framework populates this attribute with the <code>data-id</code> of the currently selected tab in the search\\ninterface from which the usage analytics event originates.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeableAnalyticsDataObject.originLevel3\",\"notSupportedIn\":\"\",\"comment\":\"<p>The low-level origin of the usage analytics event.\\nFor instance, this could be the HTTP identifier of the page from which the usage analytics event originates.</p>\\n<p>Default value is the empty string.</p>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>External code <strong>can</strong> modify the value of this attribute.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IChangeableAnalyticsMetaObject\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IChangeableAnalyticsMetaObject</code> interface describes the metadata which can be sent along with any usage\\nanalytics event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes a Coveo Cloud usage analytics <em>click</em> event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.actionCause\",\"notSupportedIn\":\"\",\"comment\":\"<p>A unique name describing the action that triggered the event.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\\\"><code>name</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>pagerNext</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.actionType\",\"notSupportedIn\":\"\",\"comment\":\"<p>A name describing the category of actions to which the action that triggered the event belongs.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\\\"><code>type</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.anonymous\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\\\"><code>anonymous</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.collectionName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the collection to which the clicked query result item belongs.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>default</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.customData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Additional metadata to send along with the event.\\n<strong>Note:</strong> This field may include custom user context information (see <a href=\\\"https://docs.coveo.com/en/399/\\\">Sending Custom Context Information</a>).</p>\\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.device\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the device or browser that triggered the event.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Chrome</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.documentCategory\",\"notSupportedIn\":\"\",\"comment\":\"<p>The type of query result item that was clicked.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>FAQ</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.documentPosition\",\"notSupportedIn\":\"\",\"comment\":\"<p>The 1-based position of the clicked item in the query results set.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.documentTitle\",\"notSupportedIn\":\"\",\"comment\":\"<p>The title of the clicked query result item.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>Coveo ML Frequently Asked Questions</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.documentUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>The URI of the clicked query result item.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>http://www.example.com/org:organization/articletype:FAQ/article:aB1c2000000A1BcDEF/language:en_US</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.documentUriHash\",\"notSupportedIn\":\"\",\"comment\":\"<p>The hashed URI of the clicked query result item.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>AbCñdeFghiJKLM1n</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.documentUrl\",\"notSupportedIn\":\"\",\"comment\":\"<p>The URL of the clicked query result item.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>https://example.com/aB1c2000000A1Bc</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.language\",\"notSupportedIn\":\"\",\"comment\":\"<p>The language of the search interface from which the event originates.\\nMust be a valid <a href=\\\"https://en.wikipedia.org/wiki/ISO_639-1\\\">ISO-639-1 code</a>.</p>\\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\\\"https://docs.coveo.com/en/421/\\\">Changing the Language of Your Search Interface</a>).</p>\\n<p><strong>Example:</strong> <code>en</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.mobile\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event originates from a mobile device.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.originContext\",\"notSupportedIn\":\"\",\"comment\":\"<p>The broad application context from which the event originates.\\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\\\"><code>setOriginContext</code></a> method of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component to modify the default value.</p>\\n<p><strong>Example:</strong> <code>Search</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.originLevel1\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the search interface from which the event originates.\\n<strong>Note:</strong> This field is normally set through the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\\\"><code>searchHub</code></a> option of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.originLevel2\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the tab from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\\\"https://coveo.github.io/search-ui/components/tab.html\\\"><code>Tab</code></a> in the search interface.</p>\\n<p><strong>Example:</strong> <code>All</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.originLevel3\",\"notSupportedIn\":\"\",\"comment\":\"<p>The address of the webpage that linked to the search interface from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.queryPipeline\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the query pipeline to which the Search API query that returned the clicked result item was routed.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipeline</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.rankingModifier\",\"notSupportedIn\":\"\",\"comment\":\"<p>The ranking modifier that was applied to the clicked query result item.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>Reveal ART</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.responseTime\",\"notSupportedIn\":\"\",\"comment\":\"<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for search events in which case it sets the field by retrieving the information from the related Search API query response.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.searchQueryUid\",\"notSupportedIn\":\"\",\"comment\":\"<p>The unique identifier of the Search API query that returned the clicked result item.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>74682726-0e20-46eb-85ac-f37259346f57</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.sourceName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the source that contains the clicked query result item.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>Product Documentation</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.splitTestRunName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the A/B test that applied to the related Search API query.\\n<strong>Note:</strong> This field is normally set by the <code>splitTestRunName</code> option of the <code>Analytics</code> component. However, if this option is left any, the framework attempts to set this field by retrieving information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>Testing new ART model</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.splitTestRunVersion\",\"notSupportedIn\":\"\",\"comment\":\"<p>The version of the A/B test that applied to the related Search API query (i.e., version A or version B).\\n<strong>Note:</strong> This field is normally set by the <code>splitTestRunVersion</code> option of the <code>Analytics</code> component. However, if this option is left any and the related Search API query response indicates that an A/B test was applied, the framework sets this field to the name of the query pipeline to which the query was routed.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipelineWithART</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.userAgent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The software acting on behalf of the end-user whose action triggered the event.\\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.userDisplayName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The display name of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\\\"><code>userDisplayName</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.userGroups\",\"notSupportedIn\":\"\",\"comment\":\"<p>The groups the end-user whose action triggered the event belongs to.\\n<strong>Note:</strong> This field is normally left any, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.username\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.user\\\"><code>user</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <a href=\\\"mailto:`asmith@example.com\\\">`asmith@example.com</a>`</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IClickEvent.viewMethod\",\"notSupportedIn\":\"\",\"comment\":\"<p>The way the item was clicked.\\n<strong>Note:</strong> The framework normally sets this field to the exact same value as <code>actionCause</code>.</p>\\n<p><strong>Example:</strong> <code>documentOpen</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICommerceRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>A Search API commerce request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICommerceRequest.catalogId\",\"notSupportedIn\":\"\",\"comment\":\"<p>The unique identifier of the catalog to query.\\n<strong>Example:</strong> <code>46bc4275-e613-4dd5-b1ea-3e5aca1bcd9d</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICommerceRequest.filter\",\"notSupportedIn\":\"\",\"comment\":\"<p>A mandatory query expression to apply if the commerce request affects the query.\\n<strong>Example:</strong> <code>@storeid==1001</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICommerceRequest.operation\",\"notSupportedIn\":\"\",\"comment\":\"<p>The way the commerce request should affect query results.\\n<strong>Example:</strong> <code>selectCatalogObjects</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings\",\"notSupportedIn\":\"\",\"comment\":\"<p>The bindings, or environment in which each component exists.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Triggers state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>The root HTMLElement of the SearchInterface in which the component exists.</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentBindings.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition\",\"notSupportedIn\":\"\",\"comment\":\"<p>Definition for a Component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component need to be identified.<br/>\\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition.className\",\"notSupportedIn\":\"\",\"comment\":\"<p>The generated <code>className</code> for this component.<br/>\\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition.doExport\",\"notSupportedIn\":\"\",\"comment\":\"<p>Function that can be called to one or multiple module in the global scope.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition.fields\",\"notSupportedIn\":\"\",\"comment\":\"<p>The optional index fields that the component possess or display.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The available options for the component.</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition.parent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The optional parent of the component, which will be a component itself.</p>\\n\",\"type\":\"IComponentDefinition\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentDefinition.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Constructor for each component</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentLocalizedStringOptionArgs</code> interface describes the available parameters when building a\\nfields option.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.alias\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.attrName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\\nthe hyphened name of the option).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This should only be used for backward compatibility reasons.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.defaultFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.depend\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\\nproperly.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.deprecated\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\\nthe option is deprecated, and what now replaces it.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.postProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should allow a component option to further modify its own value once all other options\\nof that component have been built.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>By default, the <code>id</code> option of the <code>Facet</code> component uses a post processing function to\\nset its value to that of the <code>field</code> option.</p>\\n</blockquote>\\n\",\"type\":\"IComponentOptionsPostProcessing\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.required\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\\nfunction properly.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>The <code>field</code> option of the <code>Facet</code> component is required, since a facet cannot\\nfunction properly without a field.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.section\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentLocalizedStringOptionArgs.validator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should indicate whether the option value is valid.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentOptions</code> interface describes the available parameters when building any kind of component\\noption.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.alias\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.attrName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\\nthe hyphened name of the option).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This should only be used for backward compatibility reasons.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.defaultFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"T\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.depend\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\\nproperly.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.deprecated\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\\nthe option is deprecated, and what now replaces it.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.postProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should allow a component option to further modify its own value once all other options\\nof that component have been built.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>By default, the <code>id</code> option of the <code>Facet</code> component uses a post processing function to\\nset its value to that of the <code>field</code> option.</p>\\n</blockquote>\\n\",\"type\":\"IComponentOptionsPostProcessing\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.required\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\\nfunction properly.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>The <code>field</code> option of the <code>Facet</code> component is required, since a facet cannot\\nfunction properly without a field.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.section\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptions.validator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should indicate whether the option value is valid.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentOptionsTemplateOptionArgs</code> interface describes the available parameters when building a\\ntemplate option.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.alias\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.attrName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\\nthe hyphened name of the option).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This should only be used for backward compatibility reasons.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.defaultFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.depend\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\\nproperly.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.deprecated\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\\nthe option is deprecated, and what now replaces it.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.postProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should allow a component option to further modify its own value once all other options\\nof that component have been built.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>By default, the <code>id</code> option of the <code>Facet</code> component uses a post processing function to\\nset its value to that of the <code>field</code> option.</p>\\n</blockquote>\\n\",\"type\":\"IComponentOptionsPostProcessing\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.required\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\\nfunction properly.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>The <code>field</code> option of the <code>Facet</code> component is required, since a facet cannot\\nfunction properly without a field.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.section\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOption.validator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should indicate whether the option value is valid.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentOptionsFieldOptionArgs</code> interface describes the available parameters when building a\\nfield option.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.alias\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.attrName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\\nthe hyphened name of the option).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This should only be used for backward compatibility reasons.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.defaultFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.depend\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\\nproperly.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.deprecated\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\\nthe option is deprecated, and what now replaces it.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.postProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should allow a component option to further modify its own value once all other options\\nof that component have been built.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>By default, the <code>id</code> option of the <code>Facet</code> component uses a post processing function to\\nset its value to that of the <code>field</code> option.</p>\\n</blockquote>\\n\",\"type\":\"IComponentOptionsPostProcessing\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.required\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\\nfunction properly.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>The <code>field</code> option of the <code>Facet</code> component is required, since a facet cannot\\nfunction properly without a field.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.section\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldOptionArgs.validator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should indicate whether the option value is valid.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentOptionsFieldsOptionArgs</code> interface describes the available parameters when building a\\nfields option.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.alias\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.attrName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\\nthe hyphened name of the option).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This should only be used for backward compatibility reasons.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.defaultFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.depend\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\\nproperly.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.deprecated\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\\nthe option is deprecated, and what now replaces it.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.postProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should allow a component option to further modify its own value once all other options\\nof that component have been built.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>By default, the <code>id</code> option of the <code>Facet</code> component uses a post processing function to\\nset its value to that of the <code>field</code> option.</p>\\n</blockquote>\\n\",\"type\":\"IComponentOptionsPostProcessing\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.required\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\\nfunction properly.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>The <code>field</code> option of the <code>Facet</code> component is required, since a facet cannot\\nfunction properly without a field.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.section\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsFieldsOptionArgs.validator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should indicate whether the option value is valid.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentOptionsListOptionArgs</code> interface describes the available parameters when building a\\n[list option]{@link ComponentOptions.buildListOption).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.alias\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.attrName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\\nthe hyphened name of the option).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This should only be used for backward compatibility reasons.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.defaultFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.depend\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\\nproperly.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.deprecated\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\\nthe option is deprecated, and what now replaces it.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.postProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should allow a component option to further modify its own value once all other options\\nof that component have been built.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>By default, the <code>id</code> option of the <code>Facet</code> component uses a post processing function to\\nset its value to that of the <code>field</code> option.</p>\\n</blockquote>\\n\",\"type\":\"IComponentOptionsPostProcessing\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.required\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\\nfunction properly.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>The <code>field</code> option of the <code>Facet</code> component is required, since a facet cannot\\nfunction properly without a field.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.section\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.separator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the regular expression to use to separate the elements of the list option.\\nDefault value is a regular expression that inserts a comma character (<code>,</code>) between each word.</p>\\n\",\"type\":\"RegExp\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.validator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should indicate whether the option value is valid.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsListOptionArgs.values\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the possible values the list option elements can take.</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentOptionsNumberOptionArgs</code> interface describes the available parameters when building a\\n[number option]{@link ComponentOptions.buildNumberOption).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.alias\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an alias, or array of aliases, which can be used instead of the actual option name.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This can be useful to modify an option name without introducing a breaking change.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.attrName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different markup name to use for an option, rather than the standard name (i.e., <code>data-</code> followed by\\nthe hyphened name of the option).\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This should only be used for backward compatibility reasons.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.defaultFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should return the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the value the option must take when no other value is explicitly specified.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.depend\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of a boolean component option which must be <code>true</code> in order for this option to function\\nproperly.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This is mostly useful for the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.deprecated\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a message that labels the option as deprecated. This message appears in the console upon initialization\\nif the deprecated option is used in the page. Consequently, this message should explain as clearly as possible why\\nthe option is deprecated, and what now replaces it.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Deprecated options do not appear in the Coveo JavaScript Interface Editor.</p>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.float\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the value of this option is a floating point number.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.max\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the exclusive maximum value the option can take.\\nConfiguring the option using a value strictly greater than this maximum displays a warning message in the console\\nand automatically sets the option to its maximum value.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.min\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the exclusive minimum value the option can take.\\nConfiguring the option using a value strictly less than this minimum displays a warning message in the console and\\nautomatically sets the option to its minimum value.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.postProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should allow a component option to further modify its own value once all other options\\nof that component have been built.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>By default, the <code>id</code> option of the <code>Facet</code> component uses a post processing function to\\nset its value to that of the <code>field</code> option.</p>\\n</blockquote>\\n\",\"type\":\"IComponentOptionsPostProcessing\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.required\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether it is necessary to explicitly specify a value for the option in order for the component to\\nfunction properly.\\n<strong>Example:</strong></p>\\n<blockquote>\\n<p>The <code>field</code> option of the <code>Facet</code> component is required, since a facet cannot\\nfunction properly without a field.</p>\\n</blockquote>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.section\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a section name inside which the option should appear in the Coveo JavaScript Interface Editor.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsNumberOptionArgs.validator\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that should indicate whether the option value is valid.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComponentOptionsPostProcessing\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IComponentOptionsPostProcessing&lt;T&gt;</code> interface describes a post process function that should allow a component\\noption to further modify its own value once all other options of that component have been built.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComputedFieldRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a computed field request<br/>\\nSee: <a href=\\\"https://docs.coveo.com/en/1467/\\\">Computed Fields</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComputedFieldRequest.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>This specifies the field on which the aggregate operation will be performed. This field is typically a numerical value.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IComputedFieldRequest.operation\",\"notSupportedIn\":\"\",\"comment\":\"<p>This specifies the operation to execute on the field value.<br/>\\nPossible operations:\\n-- sum: Computes the sum of all values.\\n-- average: Computes the average of all values.\\n--minimum: Retrieves the smallest of all values.\\n--maximum: Retrieves the largest of all values.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers\",\"notSupportedIn\":\"\",\"comment\":\"<p>The core template helpers provided by default.\\n<strong>Examples:</strong></p>\\n<p><strong>HTML</strong></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoFieldValue\\\"</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">\\\"@videoduration\\\"</span> <span class=\\\"hljs-attr\\\">data-helper</span>=<span class=\\\"hljs-string\\\">\\\"timeSpan\\\"</span> <span class=\\\"hljs-attr\\\">data-helper-options-is-milliseconds</span>=<span class=\\\"hljs-string\\\">\\\"false\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n<p><strong>Underscore</strong></p>\\n<pre><code class=\\\"lang-erb\\\"><span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">%=</span></span></span><span class=\\\"ruby\\\"> timeSpan(raw.videoduration, { <span class=\\\"hljs-symbol\\\">isMilliseconds:</span> <span class=\\\"hljs-literal\\\">false</span> }) </span><span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">%&gt;</span></span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.anchor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a clickable HTML link (<code>&lt;a&gt;</code>).</p>\\n<ul>\\n<li><code>href</code>: The link URI</li>\\n<li><code>options</code>: Optional. The options to use (see IAnchorUtilsOptions)</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.currency\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a currency value to a string using the specified options.</p>\\n<ul>\\n<li><code>content</code>: The number value to format.</li>\\n<li><code>options</code>: Optional. The options to use (see ICurrencyToStringOptions).</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.date\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a date value to a date-only string using the specified options.</p>\\n<ul>\\n<li><code>content</code>: The Date value to format.</li>\\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.dateTime\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a date value to a date and time string using the specified\\noptions.</p>\\n<ul>\\n<li><code>content</code>: The Date value to format.</li>\\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.email\",\"notSupportedIn\":\"\",\"comment\":\"<p>Renders one or several email values in <code>mailto:</code> hyperlinks.</p>\\n<ul>\\n<li><code>value</code>: The string or array of strings that contains a list of semicolon-separated email\\nvalues. When multiple values are passed, each value is displayed in a\\nseparate hyperlink.</li>\\n<li><code>companyDomain</code>: Optional. The string that contains your own domain (e.g.:\\ncoveo.com). When specified, this parameter allows email addresses\\ncoming from your own domain to be displayed in a shortened format\\n(e.g.: Full Name), whereas email addresses coming from an external\\ndomain will be displayed in an extended format (e.g.: Full Name\\n(domain.com)). If this parameter is not specified, then the shortened\\nformat will automatically be used.</li>\\n<li><code>me</code>: Optional. The string that contains the current username. If it is\\nspecified, then the email address containing the current username will\\nbe replaced by the localized string &#39;Me&#39;.</li>\\n<li><code>lengthLimit</code>: Optional. The number of email addresses that you want to display\\nbefore an ellipse is added (e.g.: &#39;From Joe, John and 5 others&#39;).<br/>\\nThe default value is 2.</li>\\n<li><code>truncateName</code>: Optional. When the username is available from the email address,\\nthen you can specify if you want to truncate the full name. (e.g.:\\n&#39;John S.&#39; instead of &#39;John Smith&#39;).<br/>\\nThe default value is <code>false</code>.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.emailDateTime\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a date value to a date and time string using options suitable for\\nemail dates</p>\\n<ul>\\n<li><code>content</code>: The Date value to format.</li>\\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.encodeCarriageReturn\",\"notSupportedIn\":\"\",\"comment\":\"<p>Replace all carriage return in a string by a &lt;br /&gt; tag</p>\\n<ul>\\n<li><code>value</code>: The string value to replace the carriage returns in.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.fromFileTypeToIcon\",\"notSupportedIn\":\"\",\"comment\":\"<p>Generates an icon based on the file type of the current result. The icon\\nwill be contained inside a <code>&lt;span&gt;</code> element with the appropriate CSS\\nclass.</p>\\n<ul>\\n<li><code>result</code>: Optional. The current result object inside your template. In\\nunderscore, it is referenced as <code>obj</code>. By default, the result\\nwill be resolved automatically from your current template function (\\nMeaning the nearest result in the current call stack execution inside\\nyour template)</li>\\n<li><code>options</code>: Optional. The options to use (see IIconOptions).</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.highlight\",\"notSupportedIn\":\"\",\"comment\":\"<p>Highlights a string using the provided highlight information.</p>\\n<ul>\\n<li><code>content</code>: The URI to shorten.</li>\\n<li><code>highlights</code>: Optional. The highlight information to use.</li>\\n<li><code>cssClass</code>: Optional. The name of the CSS class to use for highlighting.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.highlightStreamHTML\",\"notSupportedIn\":\"\",\"comment\":\"<p>This helper operates exactly like the highlightStreamText helper, except\\nthat it should be used to highlight HTML content. The helper takes care\\nof not highlighting the HTML markup.</p>\\n<ul>\\n<li><code>content</code>: The string content to highlight</li>\\n<li><code>termsToHighlight</code>: The terms to highlight (see IHighlightTerm)</li>\\n<li><code>phraseToHighlight</code>: The phrases to highlight (see IHighlightPhrase)</li>\\n<li><code>options</code>: Optional. The options defined below as IStreamHighlightOptions</li>\\n</ul>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p><code>highlightStreamHTML</code> should only be used for very particular/specific use cases (e.g., augmenting the result template with additional information rather than the typical excerpt/title), and is not a proper replacement for actually having the correct title and excerpt on your results.</p>\\n<p>Using incorrect result titles or excerpts on your search interface also causes relevancy to suffer greatly, as the index uses the title and excerpt to find relevant results. Consequently, end users are more likely to see results whose titles do not match their query.</p>\\n<p>Moreover, the recommended method to implement simple title and/or excerpt highlighting is to simply use the Excerpt and ResultLink components.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.highlightStreamText\",\"notSupportedIn\":\"\",\"comment\":\"<p>Highlights the provided terms in a given string.<br/>\\nBy default, the terms to highlight are the current query and the\\nassociated stemming words from the index.\\nThe only required parameter is the content, which specify the string that needs to be highlighted.\\nThe other parameters will normally be automatically resolved for you from the current result object.</p>\\n<ul>\\n<li><code>content</code>: The string content to highlight</li>\\n<li><code>termsToHighlight</code>: The terms to highlight (see IHighlightTerm)</li>\\n<li><code>phraseToHighlight</code>: The phrases to highlight (see IHighlightPhrase)</li>\\n<li><code>options</code>: Optional. The options defined below as IStreamHighlightOptions</li>\\n</ul>\\n<p><strong>Note:</strong></p>\\n<blockquote>\\n<p><code>highlightStreamText</code> should only be used for very particular/specific use cases (e.g., augmenting the result template with additional information rather than the typical excerpt/title), and is not a proper replacement for actually having the correct title and excerpt on your results.</p>\\n<p>Using incorrect result titles or excerpts on your search interface also causes relevancy to suffer greatly, as the index uses the title and excerpt to find relevant results. Consequently, end users are more likely to see results whose titles do not match their query.</p>\\n<p>Moreover, the recommended method to implement simple title and/or excerpt highlighting is to simply use the Excerpt and ResultLink components.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.image\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats an HTML image tag (<code>&lt;img&gt;</code>).</p>\\n<ul>\\n<li><code>src</code>: The image source URI</li>\\n<li><code>options</code>: Optional. The options to use (see IImageUtilsOptions)</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.isMobileDevice\",\"notSupportedIn\":\"\",\"comment\":\"<p>Detect if the results is being rendered in a mobile device.\\nIf it&#39;s not a mobile device, the helper return null ;</p>\\n<p>If it&#39;s a mobile device, return the type of device (Android, iPhone, iPad) etc.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.loadTemplate\",\"notSupportedIn\":\"\",\"comment\":\"<p>Loads a partial template in the current template, by passing the ID of\\nthe template to load, the condition for which this template should be\\nloaded, and the context object (the object that the loaded template will\\nuse as its data). By default, the context object will be the same as the\\ntemplate that called this helper function. So, for example, in a\\nResultList Component, the contextObject would, by default, be the Query\\nResults.</p>\\n<ul>\\n<li><code>templateId</code>: The ID of the template to load.</li>\\n<li><code>condition</code>: Optional. The boolean condition to determine if this template should\\nload for this result set. Most of the time this would be a condition of\\nthe type if raw.somefield == &#39;something&#39;.</li>\\n<li><code>contextObject</code>: Optional. The object that should be used by the loaded template\\nas its contextObject.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.number\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a numeric value using the format string.</p>\\n<ul>\\n<li><code>content</code>: The numeric value to format.</li>\\n<li><code>format</code> Optional. The string format to use. See the <a href=\\\"https://github.com/klaaspieter/jquery-global#numbers\\\" target=\\\"_blank\\\">Globalize</a> library for the list of available formats.</li>\\n</ul>\\n<p>When the helper is used in a <code>FieldValue</code> component, this value is automatically retrieved from the specified <code>field</code>.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code class=\\\"lang-html\\\"> <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoFieldValue\\\"</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">\\\"@viewcount\\\"</span> <span class=\\\"hljs-attr\\\">data-text-caption</span>=<span class=\\\"hljs-string\\\">\\\"Views\\\"</span> <span class=\\\"hljs-attr\\\">data-helper</span>=<span class=\\\"hljs-string\\\">\\\"number\\\"</span> <span class=\\\"hljs-attr\\\">data-helper-options-format</span>=<span class=\\\"hljs-string\\\">\\\"n0\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.shorten\",\"notSupportedIn\":\"\",\"comment\":\"<p>Shortens a string so that its length does not exceed a specific number of\\ncharacters. An ellipsis is appended to the string if it exceeds the\\nmaximum length.</p>\\n<ul>\\n<li><code>content</code>: The string to shorten.</li>\\n<li><code>length</code>: The maximum length of the resulting string.</li>\\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted\\nusing this highlight information.</li>\\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.shortenPath\",\"notSupportedIn\":\"\",\"comment\":\"<p>Shortens a string using an algorithm suitable for file paths. The helper\\nwill insert an ellipsis in the string where text has been removed when\\nthe path exceeds the maximum length.</p>\\n<ul>\\n<li><code>content</code>: The path to shorten.</li>\\n<li><code>length</code>: The maximum length of the resulting string.</li>\\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted using\\nthis highlight information.</li>\\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.shortenUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>Shortens a string using an algorithm suitable for URIs. The helper will\\ninsert an ellipsis in the string where text has been removed when the URI\\nexceeds the maximum length.</p>\\n<ul>\\n<li><code>content</code>: The URI to shorten.</li>\\n<li><code>length</code>: The maximum length of the resulting string.</li>\\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted\\nusing this highlight information.</li>\\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.size\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a number, which represents a file size in bytes, into a logical unit size.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<p><code>size(1024) =&gt; 1024 B</code></p>\\n<p><code>size(1025) =&gt; 1 KB</code></p>\\n<p><code>size(10240) =&gt; 10 KB</code></p>\\n</blockquote>\\n<p><strong>Examples:</strong></p>\\n<blockquote>\\n<p><strong>HTML</strong></p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoFieldValue\\\"</span> <span class=\\\"hljs-attr\\\">data-field</span>=<span class=\\\"hljs-string\\\">'@size'</span> <span class=\\\"hljs-attr\\\">data-helper</span>=<span class=\\\"hljs-string\\\">\\\"size\\\"</span> <span class=\\\"hljs-attr\\\">data-helper-options-base</span>=<span class=\\\"hljs-string\\\">\\\"1\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n</blockquote>\\n<blockquote>\\n<p><strong>Underscore</strong></p>\\n<pre><code class=\\\"lang-erb\\\"><span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">%=</span></span></span><span class=\\\"ruby\\\"> size(raw.size, {<span class=\\\"hljs-symbol\\\">base:</span> <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-symbol\\\">precision:</span> <span class=\\\"hljs-number\\\">2</span>}) </span><span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">%&gt;</span></span>\\n</code></pre>\\n</blockquote>\\n<ul>\\n<li><code>value</code>: The number to format</li>\\n<li><code>options</code> : The options to use (see ISizeOptions)</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.thumbnail\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats an HTML image tag (<code>&lt;img&gt;</code>), and automatically uses the result\\nobject to query the REST API to get the thumbnail for this result. For\\nexample, this can be used to great effect when designing a template\\nshowing users or previews of files.</p>\\n<ul>\\n<li><code>result</code>: Optional. The current result object inside your template. In\\nunderscore, it is referenced as <code>obj</code>. By default, the result\\nwill be resolved automatically from your current template function (\\nMeaning the nearest result in the current call stack execution inside\\nyour template)</li>\\n<li><code>endpoint</code>: Optional. The name of the endpoint to use for your\\nthumbnail. Default is default.</li>\\n<li><code>options</code>: Optional. The options to use (see IImageUtilsOptions).</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.time\",\"notSupportedIn\":\"\",\"comment\":\"<p>Formats a date value to a time-only string using the specified options.</p>\\n<ul>\\n<li><code>content</code>: The Date value to format.</li>\\n<li><code>options</code>: Optional. The options to use (see IDateToStringOptions).</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.timeSpan\",\"notSupportedIn\":\"\",\"comment\":\"<p>Given a number, either in millisecond or second, convert to a HH:MM:SS format.\\n<strong>Examples</strong></p>\\n<blockquote>\\n<p><code>timeSpan(1, {isMilliseconds: false}) =&gt; &#39;00:01&#39;</code></p>\\n<p><code>timeSpan(1000, {isMilliseconds: true}) =&gt; &#39;00:01&#39;</code></p>\\n</blockquote>\\n<ul>\\n<li><code>value</code>: The number to convert to a timespan</li>\\n<li><code>options</code> : The options to use (see ITimeSpanUtilsOptions)</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICoreHelpers.translatedCaption\",\"notSupportedIn\":\"\",\"comment\":\"<p>Given a filetype value, try to return a translated and human readable version.\\nIf the filetype is known and recognized by the framework, a translated value will be returned.</p>\\n<p><strong>Examples</strong></p>\\n<blockquote>\\n<p><code>translatedCaption(&#39;doc&#39;) =&gt; Document</code></p>\\n<p><code>translatedCaption(&#39;xls&#39;) =&gt; Spreadsheet Document</code></p>\\n</blockquote>\\n<ul>\\n<li><code>value</code>: The string value to translate</li>\\n</ul>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICurrencyToStringOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The available options to format a numeric value as a currency string.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICurrencyToStringOptions.decimals\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of decimals to display.\\n<strong>Default:</strong> <code>0</code></p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICurrencyToStringOptions.symbol\",\"notSupportedIn\":\"\",\"comment\":\"<p>The currency symbol to use.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes a Coveo Cloud usage analytics <em>custom</em> event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.actionCause\",\"notSupportedIn\":\"\",\"comment\":\"<p>A unique name describing the action that triggered the event.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\\\"><code>name</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>pagerNext</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.actionType\",\"notSupportedIn\":\"\",\"comment\":\"<p>A name describing the category of actions to which the action that triggered the event belongs.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\\\"><code>type</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.anonymous\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\\\"><code>anonymous</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.customData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Additional metadata to send along with the event.\\n<strong>Note:</strong> This field may include custom user context information (see <a href=\\\"https://docs.coveo.com/en/399/\\\">Sending Custom Context Information</a>).</p>\\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.device\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the device or browser that triggered the event.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Chrome</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.eventType\",\"notSupportedIn\":\"\",\"comment\":\"<p>A name describing the category of actions to which the action that triggered the event belongs.\\n<strong>Note:</strong> Normally, this field is set to the same value as <code>actionType</code>.</p>\\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.eventValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>A unique name describing the action that triggered the event.\\n<strong>Note:</strong> Normally, this field is set to the same value as <code>actionCause</code>.</p>\\n<p><strong>Example:</strong> <code>pagerNext</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.language\",\"notSupportedIn\":\"\",\"comment\":\"<p>The language of the search interface from which the event originates.\\nMust be a valid <a href=\\\"https://en.wikipedia.org/wiki/ISO_639-1\\\">ISO-639-1 code</a>.</p>\\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\\\"https://docs.coveo.com/en/421/\\\">Changing the Language of Your Search Interface</a>).</p>\\n<p><strong>Example:</strong> <code>en</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.mobile\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event originates from a mobile device.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.originContext\",\"notSupportedIn\":\"\",\"comment\":\"<p>The broad application context from which the event originates.\\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\\\"><code>setOriginContext</code></a> method of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component to modify the default value.</p>\\n<p><strong>Example:</strong> <code>Search</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.originLevel1\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the search interface from which the event originates.\\n<strong>Note:</strong> This field is normally set through the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\\\"><code>searchHub</code></a> option of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.originLevel2\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the tab from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\\\"https://coveo.github.io/search-ui/components/tab.html\\\"><code>Tab</code></a> in the search interface.</p>\\n<p><strong>Example:</strong> <code>All</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.originLevel3\",\"notSupportedIn\":\"\",\"comment\":\"<p>The address of the webpage that linked to the search interface from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.responseTime\",\"notSupportedIn\":\"\",\"comment\":\"<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for search events in which case it sets the field by retrieving the information from the related Search API query response.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.userAgent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The software acting on behalf of the end-user whose action triggered the event.\\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.userDisplayName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The display name of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\\\"><code>userDisplayName</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.userGroups\",\"notSupportedIn\":\"\",\"comment\":\"<p>The groups the end-user whose action triggered the event belongs to.\\n<strong>Note:</strong> This field is normally left any, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ICustomEvent.username\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.user\\\"><code>user</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <a href=\\\"mailto:`asmith@example.com\\\">`asmith@example.com</a>`</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IDateToStringOptions</code> interface describes a set of options to use when converting a standard Date object to a\\nstring using the  <code>dateToString</code> , or the\\n <code>dateTimeToString</code>  method from the  <code>DateUtils</code>  class.\\nThe precedence orders for the options are:\\n <code>useTodayYesterdayAndTomorrow</code> \\n-&gt;  <code>useWeekdayIfThisWeek</code> \\n-&gt;  <code>omitYearIfCurrentOne</code> \\n-&gt;  <code>useLongDateFormat</code> \\nand  <code>alwaysIncludeTime</code> \\n-&gt;  <code>includeTimeIfThisWeek</code> \\n-&gt;  <code>includeTimeIfToday</code> .</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.alwaysIncludeTime\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to always include the time in the resulting string when converting the Date object (e.g. <code>May 15, 4:17 PM</code>)\\nThis option takes precedence over  <code>includeTimeIfThisWeek</code> .\\n<strong>Example</strong></p>\\n<p>If  <code>includeTimeIfToday</code>  is <code>true</code>\\nand  <code>now</code>  contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\\n<ul>\\n<li>If the Date object to convert is equivalent to <code>2010/03/08 17:23:11</code>, the resulting string is <code>3/8/2010, 5:23 PM</code>.</li>\\n</ul>\\n<p>Default value is <code>false</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.includeTimeIfThisWeek\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to include the time in the resulting string when converting the Date object (e.g. <code>May 15, 4:17 PM</code>)\\nif the date to convert within a week from  <code>now</code> . This option takes precedence over\\n <code>includeTimeIfToday</code> .\\n<strong>Examples</strong></p>\\n<p>If  <code>includeTimeIfToday</code>  is <code>true</code>\\nand  <code>now</code>  contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\\n<ul>\\n<li><p>If the Date object to convert is equivalent to <code>2017/03/08 17:23:11</code>, the resulting string is <code>3/8/2017, 5:23 PM</code>.</p>\\n</li>\\n<li><p>If the Date object to convert is equivalent to <code>2017/03/09 17:23:11</code>, the resulting string is <code>3/9/2017 ,5:23 PM</code>.</p>\\n</li>\\n</ul>\\n<p>Default value is <code>true</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.includeTimeIfToday\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to include the time in the resulting string when converting the Date object (e.g. <code>May 15, 4:17 PM</code>)\\nif the date to convert is equivalent to  <code>now</code> .\\n<strong>Examples</strong></p>\\n<p>If  <code>includeTimeIfToday</code>  is <code>true</code>\\nand  <code>now</code>  contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\\n<ul>\\n<li><p>If the Date object to convert is equivalent to <code>2017/03/08 17:23:11</code>, the resulting string is <code>3/8/2017, 5:23 PM</code>.</p>\\n</li>\\n<li><p>If the Date object to convert is equivalent to <code>2017/03/09 17:23:11</code>, the resulting string is <code>3/9/2017</code>.</p>\\n</li>\\n</ul>\\n<p>Default value is <code>true</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.now\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains a standard Date object that specifies the current date and time.\\nDefault value is <code>any</code>.</p>\\n\",\"type\":\"Date\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.omitYearIfCurrentOne\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to omit the year from the resulting string when converting the Date object, if the year\\nis the current one. This option takes precedence over\\n <code>useLongDateFormat</code> .\\n<strong>Examples</strong></p>\\n<ul>\\n<li><p>If the Date object to convert is equivalent to <code>September 22, 2017</code>, the resulting string does not contain\\nthe year (e.g., <code>September 22</code>).</p>\\n</li>\\n<li><p>If the Date object to convert is equivalent to <code>September 22, 2016</code>, the resulting string contains the year\\n(e.g., <code>September 22, 2016</code>).</p>\\n</li>\\n</ul>\\n<p>Default value is <code>true</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.predefinedFormat\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a custom date format (e.g., dd/MM/yyyy), regardless of browser locale or any other option.\\nThis option uses the following syntax. All examples use the April 5th, 2018 14:15:34 time.</p>\\n<ul>\\n<li><code>yyyy</code>: full length year (e.g., 2018)</li>\\n<li><code>yy</code>: short length year (e.g., 18)</li>\\n<li><code>MMMM</code>: month name (e.g., April)</li>\\n<li><code>MMM</code>: shortened month name (e.g., Apr)</li>\\n<li><code>MM</code>: month number (e.g., 04)</li>\\n<li><code>M</code>: single digit month number for months before October (e.g., 4)</li>\\n<li><code>dddd</code>: day name (e.g., Thursday)</li>\\n<li><code>ddd</code>: shortened day name (e.g., Thu)</li>\\n<li><code>dd</code>: day number (e.g., 05)</li>\\n<li><code>d</code>: single digit day for days before the 10th (e.g., 5)</li>\\n<li><code>hh</code>: hour, in the 24-hour format (e.g., 14)</li>\\n<li><code>h</code>: hour, in the 12-hour format (e.g., 2)</li>\\n<li><code>mm</code>: minutes (e.g., 15)</li>\\n<li><code>ss</code>: seconds (e.g., 34)</li>\\n</ul>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.useLongDateFormat\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to format the resulting string in the long date format (e.g., <code>Friday, August 04, 2017</code>).\\nDefault value is <code>false</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.useTodayYesterdayAndTomorrow\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to convert the Date object to the localized version of <code>Today</code>, <code>Yesterday</code>, or <code>Tomorrow</code>,\\nif possible. This option takes precedence over\\n <code>useWeekdayIfThisWeek</code> .\\n<strong>Examples</strong></p>\\n<p>If  <code>useTodayYesterdayAndTomorrow</code>  is <code>true</code>,\\nand  <code>now</code>  contains a Date object equivalent to <code>March 8, 2017</code>, then:</p>\\n<ul>\\n<li><p>If the Date object to convert contains a value equivalent to <code>March 7, 2017</code>, the resulting string is the\\nlocalized version of <code>Yesterday</code>.</p>\\n</li>\\n<li><p>If the Date object to convert contains a value equivalent to <code>March 8, 2017</code>, the resulting string is the\\nlocalized version of <code>Today</code>.</p>\\n</li>\\n<li><p>If the Date object to convert contains a value equivalent to <code>March 9, 2017</code>, the resulting string is the\\nlocalized version of <code>Tomorrow</code>.</p>\\n</li>\\n</ul>\\n<p>Default value is <code>true</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDateToStringOptions.useWeekdayIfThisWeek\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to convert the Date object to the localized version of the corresponding day of the week,\\nif the date to convert is part of the current week. This option takes precedence over\\n <code>omitYearIfCurrentOne</code> .\\n<strong>Examples</strong></p>\\n<p> If  <code>useWeekdayIfThisWeek</code>  is <code>true</code>\\n and  <code>now</code>  contains a Date object equivalent to <code>Monday, March 8, 2017</code>, then:</p>\\n<ul>\\n<li><p>If the date to convert is equivalent to <code>Saturday, March 6, 2017</code>, the resulting string is the localized\\nversion of <code>Last Saturday</code>.</p>\\n</li>\\n<li><p>If the date to convert is equivalent to <code>Thursday, March 11, 2017</code>, the resulting string is the localized\\nversion of <code>Next Thursday</code>.</p>\\n</li>\\n</ul>\\n<p>Default value is <code>true</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDisplayedNewResultEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IDisplayedNewResultEventArgs</code> interface describes the object that all\\n<code>newResultDisplayed</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDisplayedNewResultEventArgs.item\",\"notSupportedIn\":\"\",\"comment\":\"<p>The HTML element which was rendered by the  the displayed result.</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDisplayedNewResultEventArgs.result\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query result that was just displayed by the <code>ResultList</code> component.</p>\\n\",\"type\":\"IQueryResult\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDisplayedNewResultsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IDisplayedNewResultsEventArgs</code> interface describes the object that all\\n<code>newResultsDisplayed</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDisplayedNewResultsEventArgs.isInfiniteScrollEnabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the results are being displayed in a <code>ResultList</code> with infinite scroll enabled.\\nSee <code>enableInfiniteScroll</code> option).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDoneBuildingQueryEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.doneBuildingQuery</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDoneBuildingQueryEventArgs.cancel\",\"notSupportedIn\":\"\",\"comment\":\"<p>If this property is set to true by any handlers, the query will not be executed.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDoneBuildingQueryEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allow handlers to modify the query by using the QueryBuilder</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDoneBuildingQueryEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDuringQueryEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.duringQuery</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDuringQueryEventArgs.promise\",\"notSupportedIn\":\"\",\"comment\":\"<p>A promises for the results that will be returned by the Search API</p>\\n\",\"type\":\"Promise\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDuringQueryEventArgs.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query that was just executed</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDuringQueryEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryBuilder that was used for the current query</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IDuringQueryEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Available options when calling against the SearchEndpoint</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters\",\"notSupportedIn\":\"\",\"comment\":\"<p>Parameters that can be used when calling an EndpointCaller</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters.errorsAsSuccess\",\"notSupportedIn\":\"\",\"comment\":\"<p>Flag to specify if the endpoint should return different type of error as actual 200 success for the browser, but with the error code/message contained in the response.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters.method\",\"notSupportedIn\":\"\",\"comment\":\"<p>Or HTTP verb : GET, POST, PUT, etc.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters.queryString\",\"notSupportedIn\":\"\",\"comment\":\"<p>Array of query string params.<br/>\\neg: [&#39;foo=1&#39;,&#39;bar=2&#39;]</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters.requestData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Body of the request.<br/>\\nkey -&gt; value map (JSON)</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters.requestDataType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Request data type.<br/>\\neg: &quot;application/json&quot;, &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters.responseType\",\"notSupportedIn\":\"\",\"comment\":\"<p>responseType of the request.</br>\\neg: &quot;text&quot;, &quot;arraybuffer&quot; etc.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallParameters.url\",\"notSupportedIn\":\"\",\"comment\":\"<p>Url to target</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallerOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Possible options when creating a EndpointCaller</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallerOptions.accessToken\",\"notSupportedIn\":\"\",\"comment\":\"<p>The access token to use for this endpoint.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallerOptions.password\",\"notSupportedIn\":\"\",\"comment\":\"<p>The password to use to log into this endpoint. Used for basic auth.<br/>\\nNot used if accessToken is provided.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallerOptions.requestModifier\",\"notSupportedIn\":\"\",\"comment\":\"<p>A function which will allow external code to modify all endpoint call parameters before they are sent by the browser.\\nUsed in very specific scenario where the network infrastructure require special request headers to be added or removed, for example.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallerOptions.username\",\"notSupportedIn\":\"\",\"comment\":\"<p>The username to use to log into this endpoint. Used for basic auth.<br/>\\nNot used if accessToken is provided.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IEndpointCallerOptions.xmlHttpRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The XmlHttpRequest implementation to use instead of the native one.\\nIf not specified, the native one is used.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IErrorResponse\",\"notSupportedIn\":\"\",\"comment\":\"<p>An error response</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IErrorResponse.data\",\"notSupportedIn\":\"\",\"comment\":\"<p>Data about the error</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IErrorResponse.statusCode\",\"notSupportedIn\":\"\",\"comment\":\"<p>Status code for the error</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExtension\",\"notSupportedIn\":\"\",\"comment\":\"<p>Information about a query extension</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExtension.argumentNames\",\"notSupportedIn\":\"\",\"comment\":\"<p>An array of all possible arguments</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExtension.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the extension</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExternalAdvancedSearchSection\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a section populated by external code, using the AdvancedSearchEvents.buildingAdvancedSearch</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExternalAdvancedSearchSection.content\",\"notSupportedIn\":\"\",\"comment\":\"<p>The content to add to the external section, as an HTMLElement.</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExternalAdvancedSearchSection.inputs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The array of inputs to populate.\\nExternal code should only push inputs that match the type BaseFormTypes.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExternalAdvancedSearchSection.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the section.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IExternalAdvancedSearchSection.updateQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>An handler to execute every time a new query is launched.\\nThe handler will receive the inputs used to build the external section, as well as the queryBuilder object to allow to modify the query.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The available global configuration options when requesting facets through the [facets]{IQuery.facets} array.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetOptions.freezeFacetOrder\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the facet values should be returned in their current order.</p>\\n\",\"type\":\"Boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>A Search API facet request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.basePath\",\"notSupportedIn\":\"\",\"comment\":\"<p>The base path shared by all values for a given hierarchical facet.\\n<strong>Default (Search API):</strong> <code>[]</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.currentValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>The values displayed by the facet in the search interface at the moment of\\nthe request.\\nSee IFacetRequestValue.</p>\\n<p><strong>Default (Search API):</strong> <code>[]</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.delimitingCharacter\",\"notSupportedIn\":\"\",\"comment\":\"<p>The character to use to split field values into a hierarchical sequence.\\n<strong>Example:</strong>\\nFor a multi-value field containing the following values: <code>c; c&amp;gt;folder2; c&amp;gt;folder2&amp;gt;folder3;</code>\\nThe delimiting character is <code>&amp;gt;</code>.</p>\\n<p><strong>Default (Search API):</strong> <code>;</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.facetId\",\"notSupportedIn\":\"\",\"comment\":\"<p>The unique identifier of the facet in the search interface.\\n<strong>Note:</strong> Must match <code>^[A-Za-z0-9-_]{1,60}$</code>.</p>\\n<p><strong>Example:</strong> <code>author-1</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.field\",\"notSupportedIn\":\"\",\"comment\":\"<p><strong>Required (Search API).</strong> The name of the field on which to base the\\nfacet request.\\n<strong>Note:</strong> Must reference an index field whose <strong>Facet</strong> option is enabled.</p>\\n<p><strong>Example:</strong> <code>author</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.filterByBasePath\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to use the <code>basePath</code> as a filter for the results.\\n<strong>Note:</strong> This parameter is ignored unless the facet <code>type</code> is <code>hierarchical</code>.</p>\\n<p><strong>Default (Search API):</strong> <code>true</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.filterFacetCount\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to exclude folded result parents when estimating result counts for facet values.\\n<strong>Default (Search API):</strong> <code>true</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.freezeCurrentValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to include the facet request&#39;s\\n<code>currentValues</code> in the corresponding\\nfacet response&#39;s\\n<code>values</code> array.\\n<strong>Note:</strong> Setting this to <code>true</code> is useful to ensure that the facet does\\nnot move around while the end-user is interacting with it in the search\\ninterface.</p>\\n<p><strong>Default (Search API):</strong> <code>false</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.generateAutomaticRanges\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to automatically generate range values for the facet.\\n<strong>Notes:</strong></p>\\n<ul>\\n<li>Setting this to <code>true</code> is only effective when <code>type</code> is set to <code>dateRange</code>\\nor <code>numericalRange</code>, and the referenced <code>field</code> is of a corresponding type (i.e., date or numeric).</li>\\n<li>Automatic range generation will fail if the referenced <code>field</code> is dynamically generated by a query function.</li>\\n<li>Enabling the <strong>Use cache for numeric queries</strong> option on the referenced <code>field</code> will speed up automatic range generation (see <a href=\\\"https://docs.coveo.com/en/1982/\\\">Add or Edit Fields</a>).</li>\\n</ul>\\n<p><strong>Default (Search API):</strong> <code>false</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.injectionDepth\",\"notSupportedIn\":\"\",\"comment\":\"<p>The maximum number of items to scan for facet values.\\n<strong>Note:</strong> A high <code>injectionDepth</code> may negatively impact the facet request\\nperformance.</p>\\n<p><strong>Default (Search API):</strong> <code>1000</code></p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.isFieldExpanded\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the facet is expanded in the search interface at the moment of the\\nrequest.\\n<strong>Default (Search API):</strong> <code>false</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.numberOfValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>The maximum number of facet values to fetch.\\n<strong>Note:</strong> If\\n<code>freezeCurrentValues</code> is\\n<code>true</code>, <code>numberOfValues</code> must be equal to the\\n<code>currentValues</code> array length.</p>\\n<p><strong>Default (Search API):</strong> <code>8</code></p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.preventAutoSelect\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to prevent Coveo ML from automatically selecting values from that facet.\\n<strong>Default:</strong> <code>false</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.sortCriteria\",\"notSupportedIn\":\"\",\"comment\":\"<p>The sort criterion to apply to the returned facet values.\\n<strong>Default behavior (Search API):</strong></p>\\n<ul>\\n<li>When <code>isFieldExpanded</code> is <code>false</code>\\nin the facet request, and\\n<code>moreValuesAvailable</code> is\\n<code>true</code> in the corresponding facet response, use\\n<code>score</code>.</li>\\n<li>Otherwise, use <code>alphanumeric</code>.</li>\\n</ul>\\n\",\"type\":\"FacetSortCriteria\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequest.type\",\"notSupportedIn\":\"\",\"comment\":\"<p>The kind of values to request for the facet.\\n<strong>Default (Search API):</strong> <code>Specific</code></p>\\n\",\"type\":\"FacetType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>A <code>currentValues</code> item in a Search API\\nfacet request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.children\",\"notSupportedIn\":\"\",\"comment\":\"<p>The children of this category facet value.\\nEach child is a full-fledged category facet value that may in turn have its own children and so forth,\\nup to a maximum depth of 50 levels</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.end\",\"notSupportedIn\":\"\",\"comment\":\"<p>The value to end the range at.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>500</code></li>\\n<li><code>2018-12-31T23:59:59.999Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"RangeType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.endInclusive\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to include the <code>end</code> value in the range.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.label\",\"notSupportedIn\":\"\",\"comment\":\"<p>The label to associate with the range value.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>0 - 500</code></li>\\n<li><code>In 2018</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.preventAutoSelect\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to prevent Coveo ML from automatically selecting the facet value.\\n<strong>Default:</strong> <code>false</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.retrieveChildren\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to retrieve the children of this category facet value. Can only be used on leaf values in the request (i.e., values with no current children).\\n<strong>Default:</strong> <code>false</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.retrieveCount\",\"notSupportedIn\":\"\",\"comment\":\"<p>If retrieveChildren is true, the maximum number of children to retrieve for this leaf value.\\n<strong>Default (Search API):</strong> <code>0</code></p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.start\",\"notSupportedIn\":\"\",\"comment\":\"<p>The value to start the range at.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>0</code></li>\\n<li><code>2018-01-01T00:00:00.000Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"RangeType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.state\",\"notSupportedIn\":\"\",\"comment\":\"<p>The current facet value state in the search interface.\\n<strong>Default (Search API):</strong> <code>idle</code></p>\\n\",\"type\":\"FacetValueState\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetRequestValue.value\",\"notSupportedIn\":\"\",\"comment\":\"<p><strong>Required (Search API).</strong> The facet value name.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponse\",\"notSupportedIn\":\"\",\"comment\":\"<p>An item in the response of a Search API facet request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponse.facetId\",\"notSupportedIn\":\"\",\"comment\":\"<p>The unique facet identifier in the search interface.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponse.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the field on which the facet is based.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponse.moreValuesAvailable\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether additional values are available for the facet.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponse.values\",\"notSupportedIn\":\"\",\"comment\":\"<p>The returned facet values.\\nSee IFacetResponseValue</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>A values item in a Search API facet response.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.children\",\"notSupportedIn\":\"\",\"comment\":\"<p>The children of this hierarchical facet value.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.end\",\"notSupportedIn\":\"\",\"comment\":\"<p>The value to end the range at.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>500</code></li>\\n<li><code>2018-12-31T23:59:59.999Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"RangeType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.endInclusive\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to include the <code>end</code> value in the range.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.isLeafValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>When the hierarchical value has no children, this property is <code>true</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.label\",\"notSupportedIn\":\"\",\"comment\":\"<p>The label to associate with the range value.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>0 - 500</code></li>\\n<li><code>In 2018</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.moreValuesAvailable\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether additional values are available for the facet.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.numberOfResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of query result items matching the facet value.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.start\",\"notSupportedIn\":\"\",\"comment\":\"<p>The value to start the range at.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>0</code></li>\\n<li><code>2018-01-01T00:00:00.000Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"RangeType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.state\",\"notSupportedIn\":\"\",\"comment\":\"<p>The facet value state to display in the search interface.</p>\\n\",\"type\":\"FacetValueState\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetResponseValue.value\",\"notSupportedIn\":\"\",\"comment\":\"<p>The facet value name.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>A Search API facet search request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.basePath\",\"notSupportedIn\":\"\",\"comment\":\"<p>The base path shared by all values for the facet.\\n<strong>Note:</strong> This parameter has no effect unless the facet <code>type</code> is <code>hierarchical</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.captions\",\"notSupportedIn\":\"\",\"comment\":\"<p>A dictionary that maps index field values to facet value display names.\\n<strong>Example</strong></p>\\n<blockquote>\\n<p><code>{&quot;acme_productA&quot;: &quot;ACME Product A&quot;, &quot;acme_productB&quot;: &quot;ACME Product B&quot;}</code></p>\\n</blockquote>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.delimitingCharacter\",\"notSupportedIn\":\"\",\"comment\":\"<p>The character to use to split field values into a hierarchical sequence.\\n<strong>Example:</strong></p>\\n<p>For a multi-value field containing the following values:</p>\\n<pre><code><span class=\\\"hljs-built_in\\\">c</span>; <span class=\\\"hljs-built_in\\\">c</span>&gt;folder2; <span class=\\\"hljs-built_in\\\">c</span>&gt;folder2&gt;folder3;\\n</code></pre><p>The delimiting character is <code>&gt;</code>.</p>\\n<p>For a hierarchical field containing the following values:</p>\\n<pre><code>c<span class=\\\"hljs-comment\\\">;folder2;folder3;</span>\\n</code></pre><p>The delimiting character is <code>;</code>.</p>\\n<p><strong>Default:</strong> <code>;</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the field against which to execute the facet search request.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.ignorePaths\",\"notSupportedIn\":\"\",\"comment\":\"<p>A list of paths to filter out from the hierarchical facet search results.\\n<strong>Example:</strong> <code>[[&quot;Electronics&quot;, &quot;Entertainment&quot;, &quot;Gaming Consoles&quot;],[&quot;Appliances&quot;, &quot;Kitchen&quot;]]</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.ignoreValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>A list of index field values to filter out from the facet search results.\\n<strong>Example:</strong> <code>[&quot;blue&quot;, &quot;green&quot;]</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.numberOfValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>The maximum number of facet values to fetch.\\n<strong>Default (Search API):</strong> <code>10</code></p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>The string to match.\\nTypically, the text entered by the end-user in the facet search box, to which one or more wildcard characters (<code>*</code>) may be added.</p>\\n<p><strong>Example:</strong> <code>&quot;*oran*&quot;</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.searchContext\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query parameters representing the current state of the search interface.\\nSee the query documentation.</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchRequest.type\",\"notSupportedIn\":\"\",\"comment\":\"<p>The kind of facet values against which the search request is being made.\\n<strong>Default:</strong> <code>specific</code></p>\\n\",\"type\":\"FacetSearchType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchResponse\",\"notSupportedIn\":\"\",\"comment\":\"<p>A Search API facet search response.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchResponse.moreValuesAvailable\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether additional facet values matching the request are available.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetSearchResponse.values\",\"notSupportedIn\":\"\",\"comment\":\"<p>The facet values.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionRow\",\"notSupportedIn\":\"\",\"comment\":\"<p>Used to define a row returned by an <code>IFacetValueSuggestionsProvider</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionRow.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The field that was used for the suggestions.</p>\\n\",\"type\":\"IFieldOption\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionRow.keyword\",\"notSupportedIn\":\"\",\"comment\":\"<p>The keyword that was used in the query to retrieve results.</p>\\n\",\"type\":\"IQuerySuggestionKeyword\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionRow.numberOfResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of results matching the value for the given keyword.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionRow.score\",\"notSupportedIn\":\"\",\"comment\":\"<p>The score computed by the suggestions provider.\\nA higher score means the results is more relevant.</p>\\n\",\"type\":\"IFacetValueSuggestionScore\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionRow.value\",\"notSupportedIn\":\"\",\"comment\":\"<p>The field value returned by the suggestion that should be used to filter the results.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionsProvider\",\"notSupportedIn\":\"\",\"comment\":\"<p>Provides suggestions for the <code>FacetValueSuggestions</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFacetValueSuggestionsProviderOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Defines options for the <code>FacetValueSuggestions</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFetchMoreSuccessEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.fetchMoreSuccess</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFetchMoreSuccessEventArgs.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query that was just executed</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFetchMoreSuccessEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryBuilder that was used for the current query</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFetchMoreSuccessEventArgs.results\",\"notSupportedIn\":\"\",\"comment\":\"<p>The results returned by the query that was executed</p>\\n\",\"type\":\"IQueryResults\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFetchMoreSuccessEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldConditionOption\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IFieldConditionOption</code> is a component option expressing a field-based condition that must be satisfied.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldConditionOption.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the field on which the condition is based (e.g., <code>author</code>).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldConditionOption.reverseCondition\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the condition should disallow the specified <code>values</code> rather than allowing them.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldConditionOption.values\",\"notSupportedIn\":\"\",\"comment\":\"<p>The field values allowed (or disallowed) by the condition (e.g., <code>[&quot;Alice Smith&quot;, &quot;Bob Jones&quot;]</code>).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription\",\"notSupportedIn\":\"\",\"comment\":\"<p>Information about a single field in the index</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>The default value of the field</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.description\",\"notSupportedIn\":\"\",\"comment\":\"<p>A small(ish) description of the field</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.fieldSourceType\",\"notSupportedIn\":\"\",\"comment\":\"<p>It&#39;s fieldSourceType, as a string.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.fieldType\",\"notSupportedIn\":\"\",\"comment\":\"<p>It&#39;s fieldType, as a string.<br/>\\neg: Date, Double, Integer, LargeString, Long, SmallString</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.groupByField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets whether the field is considered groupBy (facet)</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.includeInQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets whether the field can be referenced in a query.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.includeInResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets whether the field is returned with results.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>It&#39;s name, as a string</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.sortByField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets whether the field can be used to sort results</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.splitGroupByField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Gets whether the field is considered splitGroupBy (facet with ; between values)</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldDescription.type\",\"notSupportedIn\":\"\",\"comment\":\"<p>It&#39;s type, as a string</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFieldOption\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IFieldOption</code> interface declares a type for options that should contain a field to be used in a query.\\nThe only constraint this type has over a basic string is that it should start with the <code>@</code> character.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IFormWidget\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe an interface for a simple form widget.\\nCheckbox, DatePicker, Dropdown are all examples of <code>IFormWidgets</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGeolocationPosition\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IGeolocationPosition</code> interface describes a geolocation position\\nusable by the DistanceResources component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGeolocationPositionProvider\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IGeolocationPositionProvider</code> interface describes an object with a method that can provide\\na geolocation position to the DistanceResources component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGetDocumentOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IGetDocumentOptions</code> interface describes the available options when calling against a\\n<code>SearchEndpoint</code> to get an item.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IGroupByRequest</code> interface describes a Group By operation to perform against the index.\\nSee <a href=\\\"https://docs.coveo.com/en/1453/\\\">Group By Operations</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.allowedValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>Explicitly specifies a list of values for which to generate Group By values.\\nYou can use trailing wildcards to include ranges of values.</p>\\n<p><strong>Example:</strong></p>\\n<blockquote>\\n<p>The array <code>[&quot;foo&quot;, &quot;bar*&quot;]</code> would return Group By values for <code>foo</code> and any value starting with <code>bar</code>.</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.allowedValuesPatternType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The pattern type to use for the IGroupByRequest.allowedValues property (see AllowedValuesPatternType).\\nThis option is empty by default, which makes it behave as <code>legacy</code>.</p>\\n\",\"type\":\"AllowedValuesPatternType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.computedFields\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of computed fields that should be evaluated for each Group By value that is returned.\\nComputed fields are used to perform aggregate operations on other fields for all the matching items having a\\nspecific value in the Group By field in the results. See\\n<a href=\\\"https://docs.coveo.com/en/1467/\\\">Computed Fields</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.constantQueryOverride\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a constant query expression on which to compute the Group By operation.\\nThis feature is similar to the <code>queryOverride</code> feature, except that in this\\ncase, the index keeps the constant query expression in cache for faster queries. You should avoid specifying a\\ndynamic query expression for this parameter, for doing so will negatively impact performance.</p>\\n<p>By default, the constant part of the query expression being executed is used.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the field on which to perform the Group By request. The Group By request returns a Group By value for\\neach distinct value of this field within the result set.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.generateAutomaticRanges\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to let the index calculate the ranges.\\nDefault value is <code>false</code>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.injectionDepth\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies how deep the index should scan the results to identify missing Group By values.\\nWhen executing a Group By operation, the index uses various heuristics to try to list all of the field values that\\nappear in the result set. In some corner cases, certain values might be omitted (it is a classical example of a\\ntrade-off between precision and performance). Using <code>injectionDepth</code> forces the index to explicitly scan the field\\nvalues of the top n results of the query, and ensure that the field values present in those results are included.</p>\\n<p>Consequently, specifying a high value for this parameter may negatively impact query performance.</p>\\n<p>Default value is <code>1000</code>. Minimum value is <code>0</code>.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.maximumNumberOfValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the maximum number of values that the Group By operation can return.\\nDefault value is <code>10</code>. Minimum value is <code>0</code>.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.queryOverride\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a different query expression on which to compute the Group By operation.\\nThis feature is typically used for performance reasons to retrieve Group By values on separate expressions while\\nexecuting a normal query in a single operation.</p>\\n<p>By default, the query expression being executed is used.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.rangeValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>Explicitly specifies a list of range values for which Group By values should be generated.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByRequest.sortCriteria\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies how the indexer should sort the Group By values.\\nThe possible values are:</p>\\n<ul>\\n<li><code>score</code>: Sort by score. Score is computed from the number of occurrences of a field value, as well as from the\\nposition where results having this field value appear in the ranked result set. When using this sort criterion, a\\nfield value with 100 occurrences might appear after one with only 10 occurrences, if the occurrences of the latter\\ntend to appear sooner in the ranked result set.</li>\\n<li><code>occurrences</code>: Sort by number of occurrences, with values having the highest number of occurrences appearing\\nfirst.</li>\\n<li><code>alphaascending</code> / <code>alphadescending</code>: Sort alphabetically on the field values.</li>\\n<li><code>computedfieldascending</code> / <code>computedfielddescending</code>: Sort on the values of the first computed field for each\\nGroup By value (see <a href=\\\"https://docs.coveo.com/en/1467/\\\">Computed Fields</a>).</li>\\n<li><code>chisquare</code>: Sort based on the relative frequency of values in the result set compared to the frequency in the\\nentire index. This means that a value that does not appear often in the index but does appear often in the result\\nset will tend to appear first.</li>\\n<li><code>nosort</code>: Do not sort the Group By values. When using this sort criterion, the index returns the Group By values\\nin a random order.</li>\\n</ul>\\n<p>Default value is <code>score</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByResult\",\"notSupportedIn\":\"\",\"comment\":\"<p>A result for a IGroupByRequest.\\nThis is typically what the Facet component will use to render themselves.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByResult.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The field on which the group by was performed.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByResult.globalComputedFieldResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>Available if there was any computed field request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByResult.values\",\"notSupportedIn\":\"\",\"comment\":\"<p>The differents values for this result</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a single group by value, returned by a IGroupByResult</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByValue.computedFieldResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>If there was ny computed field request, the results will be available here.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByValue.lookupValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>The lookup value if it was specified.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByValue.numberOfResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of results that match this value in the index for this particular group by request</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByValue.score\",\"notSupportedIn\":\"\",\"comment\":\"<p>The relevance score.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IGroupByValue.value\",\"notSupportedIn\":\"\",\"comment\":\"<p>The string value. Think : Facet label.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IHighlight\",\"notSupportedIn\":\"\",\"comment\":\"<p>A highlight structure, as returned by the index.\\nThis structure can be used to do the actual highlighting job.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IHighlight.dataHighlightGroup\",\"notSupportedIn\":\"\",\"comment\":\"<p>The group number for the highlight. A single string can have the same term highlighted multiple times.\\nThis allows to regroup the different highlights.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IHighlight.dataHighlightGroupTerm\",\"notSupportedIn\":\"\",\"comment\":\"<p>The string that represent the highlight. A single string can have the same term highlighted multiple times.\\nThis allows to regroup the different highlights.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IHighlight.length\",\"notSupportedIn\":\"\",\"comment\":\"<p>The length of the offset.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IHighlight.offset\",\"notSupportedIn\":\"\",\"comment\":\"<p>The 0 based offset inside the string where the highlight should start.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IHighlightPhrase\",\"notSupportedIn\":\"\",\"comment\":\"<p>The data about a single phrase to highlight.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IHighlightTerm\",\"notSupportedIn\":\"\",\"comment\":\"<p>The data about a single term to highlight.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IIconOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Available options for the Icon component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IImageUtilsOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Options for building an <code>&lt;img&gt;</code> tag.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IImageUtilsOptions.alt\",\"notSupportedIn\":\"\",\"comment\":\"<p>The alternative text for the image (<code>alt</code> attribute).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IImageUtilsOptions.height\",\"notSupportedIn\":\"\",\"comment\":\"<p>The height of the image</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IImageUtilsOptions.srcTemplate\",\"notSupportedIn\":\"\",\"comment\":\"<p>The template to use for the image source</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IImageUtilsOptions.width\",\"notSupportedIn\":\"\",\"comment\":\"<p>The width of the image</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IIndexFieldValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a field value returned by index</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IIndexFieldValue.computedFieldResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>The optional computedFieldResults, if requested in the IGroupByRequest</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IIndexFieldValue.lookupValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>The optional lookupValue, if requested in the IGroupByRequest</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IIndexFieldValue.numberOfResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of results in the index which have this value</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IIndexFieldValue.value\",\"notSupportedIn\":\"\",\"comment\":\"<p>The value</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IInitializationEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on InitializationEvents.afterComponentsInitialization, and InitializationEvents.afterInitialization.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IInitializationParameters\",\"notSupportedIn\":\"\",\"comment\":\"<p>Represent the initialization parameters required to init a new component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesBatchRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a request to list the possible values of multiple fields.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesBatchRequest.batch\",\"notSupportedIn\":\"\",\"comment\":\"<p>The list of fields to request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a request to list the possible values of a field.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.constantQueryOverride\",\"notSupportedIn\":\"\",\"comment\":\"<p>A query to execute when returning possible field values, put in cache in the index</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The field for which to list values</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.ignoreAccents\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to ignore accents in the values</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.lookupField\",\"notSupportedIn\":\"\",\"comment\":\"<p>The lookup field to use</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.maximumNumberOfValues\",\"notSupportedIn\":\"\",\"comment\":\"<p>Maximum number of field values to return</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.pattern\",\"notSupportedIn\":\"\",\"comment\":\"<p>A pattern to filter out results</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.patternType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The type of the pattern (eg: regex)</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.queryOverride\",\"notSupportedIn\":\"\",\"comment\":\"<p>A query to execute when returning possible field values</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IListFieldValuesRequest.sortCriteria\",\"notSupportedIn\":\"\",\"comment\":\"<p>The sort order for the returned field.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INewQueryEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.newQuery</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INewQueryEventArgs.cancel\",\"notSupportedIn\":\"\",\"comment\":\"<p>If this property is set to true by any handlers, the query will not be executed.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INewQueryEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INoResultsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.noResults</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INoResultsEventArgs.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query that was just executed</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INoResultsEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryBuilder that was used for the current query</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INoResultsEventArgs.results\",\"notSupportedIn\":\"\",\"comment\":\"<p>The results returned by the query that was executed</p>\\n\",\"type\":\"IQueryResults\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INoResultsEventArgs.retryTheQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>If set to true by any handler, the last query will automatically be re-executed again.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.INoResultsEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IOmniboxDataRow\",\"notSupportedIn\":\"\",\"comment\":\"<p>The content that external code that wants to populate the omnibox need to populate.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IOmniboxDataRow.deferred\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is a Promise object. It is used when you want to make an asynchronous call (most likely an Ajax request) to a service in order to retrieve the data that you will use to build your HTML content.</p>\\n\",\"type\":\"Promise\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IOmniboxDataRow.element\",\"notSupportedIn\":\"\",\"comment\":\"<p>This an <code>HTMLElement</code> that you want the Omnibox to render.\\nIt can be any valid HTML element (div, span, image, table, etc.). You can bind any event you want to this element and also add logic to handle the Omnibox (e.g. should the Omnibox close itself when clicking on your suggestion, should the Omnibox clear itself?).</p>\\n<p>This element you provide can be as complex as you want it to be (see Providing Suggestions for the Omnibox).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IOmniboxDataRow.zIndex\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is an optional property. It is used by each component to influence their rendering order in the Omnibox. It works like a normal CSS <code>zIndex</code>: higher value will render at the top most level. Providing no <code>zIndex</code> will make your item render with a low priority.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IOpenQuickviewEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IOpenQuickviewEventArgs</code> interface describes the object that all\\n<code>openQuickview</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IOpenQuickviewEventArgs.termsToHighlight\",\"notSupportedIn\":\"\",\"comment\":\"<p>The array of query expression terms to highlight in the quickview modal window.</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPlanResponse\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes the plan of execution of a search request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPlanResponse.parsedInput\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query expressions that would be sent to the index once the search\\nrequest has been fully processed by the query pipeline.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPlanResponse.preprocessingOutput\",\"notSupportedIn\":\"\",\"comment\":\"<p>The output that would be included by the Search API in the query response\\nonce the search request has been fully processed by the query pipeline.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateBreadcrumbEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Event triggered when populating the breadcrumb</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxObject\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IPopulateOmniboxObject</code> is an interface that is used by components to interact with the Omnibox and provides a framework for type-ahead suggestions.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxObject.allQueryExpressions\",\"notSupportedIn\":\"\",\"comment\":\"<p>An array IPopulateOmniboxQueryExpression used to describe each part of the content of the Omnibox component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxObject.completeQueryExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>A IPopulateOmniboxQueryExpression object used to describe the complete content of the Querybox component.</p>\\n\",\"type\":\"IPopulateOmniboxQueryExpression\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxObject.currentQueryExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>A IPopulateOmniboxQueryExpression object used to describe the current active content (the current position of the cursor/caret) of the Omnibox component.</p>\\n\",\"type\":\"IPopulateOmniboxQueryExpression\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxObject.cursorPosition\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number representing the current position of the cursor/caret inside the Omnibox component.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxQueryExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>This object is a simple interface that describes the content of an omnibox query expression.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxQueryExpression.regex\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is a regex of the content of the Omnibox with some special character escaped.</p>\\n\",\"type\":\"RegExp\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxQueryExpression.word\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is a simple string with the plain content of the Omnibox.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxSuggestionsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IPopulateOmniboxSuggestionsEventArgs</code> interface describes the object that all\\n<code>populateOmniboxSuggestions</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxSuggestionsEventArgs.omnibox\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>Omnibox</code> component instance.</p>\\n\",\"type\":\"Omnibox\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateOmniboxSuggestionsEventArgs.suggestions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The list of resolved query completion suggestions, and/or query completion suggestion promises.</p>\\n\",\"type\":\"Array\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateSearchResultPreviewsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Executed when a Suggestion is focused and waiting for search result previews.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateSearchResultPreviewsEventArgs.previewsQueries\",\"notSupportedIn\":\"\",\"comment\":\"<p>The result previews query. This must be set synchronously before the event resolves.\\nSetting this to a non-empty array will display the given search result previews.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPopulateSearchResultPreviewsEventArgs.suggestion\",\"notSupportedIn\":\"\",\"comment\":\"<p>The suggestion to look up search result previews for.</p>\\n\",\"type\":\"Suggestion\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPositionResolvedEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IPositionResolvedEventArgs</code> interface describes the object that all\\n<code>onPositionResolved</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPositionResolvedEventArgs.position\",\"notSupportedIn\":\"\",\"comment\":\"<p>The position that was resolved.</p>\\n\",\"type\":\"IGeolocationPosition\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPreprocessMoreResultsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.preprocessMoreResults</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPreprocessMoreResultsEventArgs.results\",\"notSupportedIn\":\"\",\"comment\":\"<p>The results returned by the query that was executed</p>\\n\",\"type\":\"IQueryResults\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPreprocessResultsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.preprocessResults</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPreprocessResultsEventArgs.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query that was just executed</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPreprocessResultsEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryBuilder that was used for the current query</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPreprocessResultsEventArgs.results\",\"notSupportedIn\":\"\",\"comment\":\"<p>The results returned by the query that was executed</p>\\n\",\"type\":\"IQueryResults\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IPreprocessResultsEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>The IQuery interface describes a query that can be performed on the Coveo REST Search API.\\nFor basic usage, see the IQuery.q and IQuery.aq properties.</p>\\n<p>In a normal scenario, a query is built by the QueryBuilder class.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.actionsHistory\",\"notSupportedIn\":\"\",\"comment\":\"<p>The actions history represents the past actions a user made and is used by the Coveo Machine Learning service to\\nsuggest recommendations. It is generated by the page view script (<a href=\\\"https://github.com/coveo/coveo.analytics.js\\\">https://github.com/coveo/coveo.analytics.js</a>)</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.allowQueriesWithoutKeywords\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the Search API should perform queries even when no keywords were entered by the end user.\\nEnd user keywords are present in either the IQuery.q or IQuery.lq part of the query.</p>\\n<p>This parameter is normally controlled by SearchInterface.options.allowEmptyQuery option.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.aq\",\"notSupportedIn\":\"\",\"comment\":\"<p>The advanced query expression.<br/>\\nThis is the part of the query expression generated by code based on various rules.<br/>\\neg: Selecting a facet value will cause an expression to be added to the advanced query expression.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.categoryFacets\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of request to retrieve facet values for the CategoryFacet component</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.childField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the childField when doing parent-child loading (See: Folding)</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.commerce\",\"notSupportedIn\":\"\",\"comment\":\"<p>The commerce request to execute.</p>\\n\",\"type\":\"ICommerceRequest\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.context\",\"notSupportedIn\":\"\",\"comment\":\"<p>The context is a map of key_value that can be used in the Query pipeline in the Coveo platform.<br/></p>\\n\",\"type\":\"Context\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.cq\",\"notSupportedIn\":\"\",\"comment\":\"<p>The constant query expression.<br/>\\nThis part of the expression is much alike the advanced query expression, but it is meant to hold expressions that are constant for all users of a search interface/widget.<br/>\\nThe results of evaluating those expressions are kept in a special index cache, to avoid re-evaluating them on each query.<br/>\\nYou must be careful to not include dynamic parts in this expression, otherwise you risk filling up the cache with useless data and this might have a negative impact on performance.<br/>\\nExpressions other than cq also benefit from caching in the index, but using cq allows to explicitly require that a part of the query be included in the cache.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.debug\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to include debug information from the Search API in the query response.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>This debug information does not include ranking information.</p>\\n</blockquote>\\n<p>Setting this property to <code>true</code> can have an adverse effect on query performance, so it should always be left to\\n<code>false</code> in a production environment.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.dq\",\"notSupportedIn\":\"\",\"comment\":\"<p>The disjunction query expression.<br/>\\nThis is the disjunctive part of the query expression that is merged with the other expression parts using an OR boolean operator.<br/>\\nWhen specified, the final expression evaluated by the index ends up being (q aq cq) OR (dq).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.enableCollaborativeRating\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the index should take collaborative rating in account when ranking result. See: ResultRating</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.enableDidYouMean\",\"notSupportedIn\":\"\",\"comment\":\"<p>This enables the query correction feature of the index.<br/>\\nBy activating this, the index returns an array of {link IQueryCorrection} with suggested word corrections.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.enableQuerySyntax\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to enable the special query syntax such as field references for the basic query expression (parameter q).\\nIt is equivalent to a No syntax block applied to the basic query expression.\\nIf not specified, the parameter defaults to false</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.excerptLength\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.<br/>\\nThe index includes the top most interesting sentences (in the order they appear in the item) that fit in the specified number of characters.<br/>\\nWhen not specified, the default value is 200.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.facetOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The global configuration options to apply to the requests in the facets array.</p>\\n\",\"type\":\"IFacetOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.facets\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of request to retrieve facet values for the DynamicFacet component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.fieldsToExclude\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of fields that should be excluded from the query results.<br/>\\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.fieldsToInclude\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of fields that should be returned for each result.<br/>\\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.filterField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a field on which Folding should be performed.<br/>\\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.<br/>\\nIt&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.filterFieldRange\",\"notSupportedIn\":\"\",\"comment\":\"<p>Number of results that should be folded, using the IQuery.filterField</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.firstResult\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the 0-based index of the first result to return.<br/>\\nIf not specified, this parameter defaults to 0.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.format\",\"notSupportedIn\":\"\",\"comment\":\"<p>The format of a successful response.\\nIf not specified, this parameter defaults to &#39;json&#39;.</p>\\n\",\"type\":\"ResponseFormat\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.groupBy\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of Group By operations that can be performed on the query results to extract facets</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.lowercaseOperators\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to enable the support for operator in lowercase (AND OR -&gt; and or)</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.lq\",\"notSupportedIn\":\"\",\"comment\":\"<p>The contextual text.<br/>\\nThis is the contextual text part of the query. It uses the Coveo Machine Learning service to pick key keywords from\\nthe text and add them to the basic expression.\\nThis field is mainly used to pass context such a case description, long textual query or any other form of text that might help in\\nrefining the query.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.maximumAge\",\"notSupportedIn\":\"\",\"comment\":\"<p>The maximum age for cached query results, in milliseconds.<br/>\\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.<br/>\\nOtherwise, the query will be sent to the index.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.numberOfResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the number of results to return, starting from IQuery.firstResult.<br/>\\nIf not specified, this parameter defaults to 10.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.parentField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the parentField when doing parent-child loading (See: Folding)</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.partialMatch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to enable partial matching of the basic expression keywords.<br/>\\nBy activating this, when the basic expression contains at least IQuery.partialMatchKeywords, items containing only the number of keywords specified by IQuery.partialMatchThreshold will also match the query.<br/>\\nWithout this option, items are required to contain all the keywords in order to match the query.<br/>\\nIf not specified, this parameter defaults to false.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.partialMatchKeywords\",\"notSupportedIn\":\"\",\"comment\":\"<p>The minimum number of keywords needed to activate partial match.<br/>\\nSpecifies the minimum number of keywords needed for the partial match feature to activate.<br/>\\nIf the basic expression contains less than this number of keywords, no transformation is applied on the query.<br/>\\nIf not specified, this parameter defaults to 5.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.partialMatchThreshold\",\"notSupportedIn\":\"\",\"comment\":\"<p>The threshold to use for matching items when partial match is enabled.<br/>\\nSpecifies the minimum number of query keywords that an item must contain when partial match is enabled. This value can either be an absolute number or a percentage value based on the total number of keywords.<br/>\\nIf not specified, this parameter defaults to 50%.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.pipeline\",\"notSupportedIn\":\"\",\"comment\":\"<p>Name of the query pipeline to use.<br/>\\nSpecifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.q\",\"notSupportedIn\":\"\",\"comment\":\"<p>The basic query expression. <br/>\\nThis is typically the query expression entered by the user in a query box.<br/>\\nSince this part of the query is expected to come from user input, it is processed by the Did You Mean feature.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.queryFunctions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of Query Function operation that will be executed on the results.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.questionMark\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to enable question marks with wildcards.<br/>\\nThis enables using the question mark ? character within wildcard expressions.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.rankingFunctions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies an array of Ranking Function operations that will be executed on the result</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.recommendation\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the id of the recommendation interface that generated the query.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.retrieveFirstSentences\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the first sentences of the item should be included in the results.<br/>\\nThe retrieveFirstSentences option is typically used instead of excerpts when displaying email items, where the first sentence of the email might be of more interest than a contextually generated excerpt.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.searchHub\",\"notSupportedIn\":\"\",\"comment\":\"<p>The hub value set from the Analytics component.<br/>\\nUsed for analytics reporting in the Coveo platform</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.sortCriteria\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to Relevancy.<br/>\\nPossible values are : <br/>\\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\\n-- dateascending / datedescending : Sort using the value of the @date field, which is typically the last modification date of an item in the index.<br/>\\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using Relevancy except that automatic weights based on keyword proximity etc, are not computed.<br/>\\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\\n-- @field ascending / @field descending : Sort using the value of a custom field.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.tab\",\"notSupportedIn\":\"\",\"comment\":\"<p>The tab value set from the Tab component.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.userActions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The user ID or visitor ID whose item views should be tagged in the query results\\n(see the isUserActionView property of the IQueryResult interface).\\n<strong>Examples:</strong></p>\\n<ul>\\n<li><a href=\\\"mailto:asmith@example.com\\\">asmith@example.com</a></li>\\n<li>6318b0c6-9397-4d70-b393-cf4770fd1bab</li>\\n</ul>\\n\",\"type\":\"IUserActionsRequest\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuery.wildcards\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to enable wildcards on the basic expression keywords.<br/>\\nThis enables the wildcard features of the index. Coveo Platform will expand keywords containing wildcard characters to the possible matching keywords to broaden the query.<br/>\\nSee <a href=\\\"https://docs.coveo.com/en/1580/\\\">Using Wildcards in Queries</a>.<br/>\\nIf not specified, this parameter defaults to false.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryBuilderExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe the expressions part of a QueryBuilder.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryBuilderExpression.advanced\",\"notSupportedIn\":\"\",\"comment\":\"<p>The advanced part of the expression</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryBuilderExpression.basic\",\"notSupportedIn\":\"\",\"comment\":\"<p>The basic part of the expression</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryBuilderExpression.constant\",\"notSupportedIn\":\"\",\"comment\":\"<p>The constant part of the expression</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryBuilderExpression.disjunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>The disjunction part of the expression</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryBuilderExpression.full\",\"notSupportedIn\":\"\",\"comment\":\"<p>The whole expression</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryBuilderExpression.withoutConstant\",\"notSupportedIn\":\"\",\"comment\":\"<p>The full part, but without the constant.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryCorrection\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe correction for a query</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryCorrection.correctedQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query once corrected</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryCorrection.wordCorrections\",\"notSupportedIn\":\"\",\"comment\":\"<p>Array of correction for each word in the query</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryErrorEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.queryError</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryErrorEventArgs.endpoint\",\"notSupportedIn\":\"\",\"comment\":\"<p>The endpoint on which the error happened.</p>\\n\",\"type\":\"ISearchEndpoint\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryErrorEventArgs.error\",\"notSupportedIn\":\"\",\"comment\":\"<p>The error info / message itself.</p>\\n\",\"type\":\"IEndpointError\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryErrorEventArgs.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query that was just executed</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryErrorEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryBuilder that was used for the current query</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryErrorEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryException\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe an exception that was triggered by the index when performing the query.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryException.code\",\"notSupportedIn\":\"\",\"comment\":\"<p>The exception code</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a query function that can be executed against the index<br/>\\nSee: <a href=\\\"https://docs.coveo.com/en/1451/\\\">Query Functions</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryFunction.fieldName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The field name on which to store the query function result when the query returns</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryFunction.function\",\"notSupportedIn\":\"\",\"comment\":\"<p>Function to execute, as a string</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Possible options when performing a query with the query controller</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryOptions.beforeExecuteQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify a function that you wish to execute just before the query is executed</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryOptions.cancel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Cancel the query</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryOptions.ignoreWarningSearchEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>If the analytics component is enabled in the interface, it will look for any query executed by the query controller for which no analytics event was associated.<br/>\\nBy setting this property to true, this will cancel this check when the query is performed</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryOptions.logInActionsHistory\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether or not to log the query in the user actions history when using the page view script: <a href=\\\"https://github.com/coveo/coveo.analytics.js\\\">https://github.com/coveo/coveo.analytics.js</a>.\\nOnly the &#39;q&#39; part of the query will be logged.\\nThis option is useful, because it prevents the query to be logged twice when a Recommendation component is present.\\nIt also makes sure that only relevant queries are logged. For exemple, the &#39;empty&#39; interface load query isn&#39;t logged.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryOptions.origin\",\"notSupportedIn\":\"\",\"comment\":\"<p>The component from which the query originated. For example the pager will set the property to tweak it&#39;s behaviour</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryOptions.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query to execute is a search-as-you-type. This information will be passed down in the query events for component and external code to determine their behavior</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IQueryResult</code> interface describes a single result returned by the Coveo REST Search API.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.absentTerms\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query terms that are not matched by the result.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.childResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the child results of the item, if parent-child loading was performed.\\nSee the <code>Folding</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.clickUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the clickable URI of the item, which you can set on an <code>href</code> in your search interface.\\nSee the <code>ResultLink</code> component.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.excerpt\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains an excerpt of the item. Can be empty for certain types of items (e.g., images, videos, etc.).\\nSee the <code>Excerpt</code> component.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.flags\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the list of flags for the item. Values are separated by a semicolon characters (<code>;</code>).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.hasHtmlVersion\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains a value specifying whether the item has an HTML version.\\nSee the <code>Quickview</code> component.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.index\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the 0-based index value of the result, as returned by the Coveo REST Search API.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.isRecommendation\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains a value that specifies whether the result was recommended by the Coveo Machine Learning service.\\nSee the <code>Recommendation</code> component.</p>\\n<p>See also <a href=\\\"https://docs.coveo.com/en/1727/\\\">Coveo Machine Learning</a>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.isTopResult\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the result is a Featured Result in the Coveo Query Pipeline (see <a href=\\\"https://docs.coveo.com/en/1961/\\\">Adding and Managing Query Pipeline Featured Results</a>).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.isUserActionView\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the result item was previously viewed by the user specified in the userActions request of the query.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.parentResult\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the parent result of the item, if parent-child loading was performed.\\nSee the <code>Folding</code> component.</p>\\n\",\"type\":\"IQueryResult\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.printableUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains a printable URI (or path) to the item.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.queryUid\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the query UID, as returned by the Coveo REST Search API.\\nThis value is used mainly for usage analytics.</p>\\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.rankingInfo\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains ranking information, which the Coveo REST Search API returns along with the item when the query\\n<code>debug</code> property is <code>true</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.rating\",\"notSupportedIn\":\"\",\"comment\":\"<p><strong>Note:</strong></p>\\n<blockquote>\\n<p>The Coveo Cloud V2 platform does not support collaborative rating. Therefore, this property is obsolete in Coveo Cloud V2.</p>\\n</blockquote>\\n<p>Contains the collaborative rating value for the item.</p>\\n<p>See the <code>ResultRating</code> component.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.raw\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the raw field values of the item, expressed as key-value pairs.</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>SearchInterface</code> inside which this result is rendered.\\nThis value is used mainly to allow for conditional rendering of results templates.</p>\\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.state\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the query state of the <code>SearchInterface</code> inside which this result is rendered.\\nThis value is used mainly to allow for conditional rendering of results templates.</p>\\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the title of the item.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.uniqueId\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the unique ID of the item.\\nThis parameter is useful when making certain calls to a <code>SearchEndpoint</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResult.uri\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the URI of the item.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a set a results returned by the Search API</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.advancedExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>The advanced expression that was executed.<br/>\\nOnly sent if IQuery.debug is true</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.apiVersion\",\"notSupportedIn\":\"\",\"comment\":\"<p>The search api version that was used for this query.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.basicExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>The basic expression that was executed.<br/>\\nOnly sent if IQuery.debug is true</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.categoryFacets\",\"notSupportedIn\":\"\",\"comment\":\"<p>Category facet results of the query</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.clientDuration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The duration of the query for the client.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.constantExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>The constant expression that was executed.<br/>\\nOnly sent if IQuery.debug is true</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.duration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The total query duration, which is the sum of the <code>indexDuration</code> and <code>searchAPIDuration</code>, including any latency incurred through the necessary network hops.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.error\",\"notSupportedIn\":\"\",\"comment\":\"<p>When an error occurs, and the errorsAsSuccess flag is passed, the error will be returned in the body of the response</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.exception\",\"notSupportedIn\":\"\",\"comment\":\"<p>The exception that can be returned by the index if the query triggered an error</p>\\n\",\"type\":\"IQueryException\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.executionReport\",\"notSupportedIn\":\"\",\"comment\":\"<p>A detailed execution report sent by the Search API.<br/>\\nOnly sent if IQuery.debug is true</p>\\n\",\"type\":\"any\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.facets\",\"notSupportedIn\":\"\",\"comment\":\"<p>Facet results of the query</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.groupByResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>The group by results of the query</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.indexDuration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The part of the total query <code>duration</code> that was spent in the index.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.phrasesToHighlight\",\"notSupportedIn\":\"\",\"comment\":\"<p>Phrases to highlight (with stemming) in the results</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.pipeline\",\"notSupportedIn\":\"\",\"comment\":\"<p>The pipeline that was used for this query.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.proxyDuration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The duration of the query on the proxy (not always applicable, can be optional)</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.queryCorrections\",\"notSupportedIn\":\"\",\"comment\":\"<p>Possible query corrections (eg : DidYouMean)</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.rankingExpressions\",\"notSupportedIn\":\"\",\"comment\":\"<p>A list of ranking expression that were used to tweak the relevance.<br/>\\nOnly sent if IQuery.debug is true</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.refinedKeywords\",\"notSupportedIn\":\"\",\"comment\":\"<p>The keywords selected by Coveo Machine Learning Refined Query feature</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.results\",\"notSupportedIn\":\"\",\"comment\":\"<p>The results of the query</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.searchAPIDuration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The part of the total query <code>duration</code> that was spent in the Coveo Search API.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.searchUid\",\"notSupportedIn\":\"\",\"comment\":\"<p>A unique identifier for this query, used mainly for the Analytics service.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.splitTestRun\",\"notSupportedIn\":\"\",\"comment\":\"<p>The split test run that was used for this query. (A/B tests feature of the Coveo Query Pipeline)</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.termsToHighlight\",\"notSupportedIn\":\"\",\"comment\":\"<p>Terms to highlight (with stemming) in the results</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.totalCount\",\"notSupportedIn\":\"\",\"comment\":\"<p>The total number of results that matched the query in the index.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.totalCountFiltered\",\"notSupportedIn\":\"\",\"comment\":\"<p>The total number of results that matched the query in the index, but with the duplicate filtered.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.triggers\",\"notSupportedIn\":\"\",\"comment\":\"<p>The Coveo Query Pipeline triggers, if any were configured.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryResults.userIdentities\",\"notSupportedIn\":\"\",\"comment\":\"<p>A list of user identities that were used to perform this query.<br/>\\nOnly sent if IQuery.debug is true</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuccessEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QueryEvents.querySuccess</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuccessEventArgs.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query that was just executed</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuccessEventArgs.queryBuilder\",\"notSupportedIn\":\"\",\"comment\":\"<p>The QueryBuilder that was used for the current query</p>\\n\",\"type\":\"QueryBuilder\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuccessEventArgs.results\",\"notSupportedIn\":\"\",\"comment\":\"<p>The results returned by the query that was executed</p>\\n\",\"type\":\"IQueryResults\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuccessEventArgs.searchAsYouType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the query is a search-as-you-type</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestCompletion\",\"notSupportedIn\":\"\",\"comment\":\"<p>The IQuerySuggestCompletion interface describes a completion suggestion from the Coveo Machine Learning\\nservice (see <a href=\\\"https://docs.coveo.com/en/1727/\\\">Coveo Machine Learning</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestCompletion.executableConfidence\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains a value indicating the confidence level that this suggestion should be executed.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestCompletion.expression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the expression to complete.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestCompletion.highlighted\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the highlighted expression to complete.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestCompletion.score\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains a value indicating how certain the Coveo Machine Learning service is that this suggestion is actually\\nrelevant.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The IQuerySuggestRequest interface describes a request to the Coveo Machine Learning service query suggest.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.actionsHistory\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specfies the actions history which represents the past actions a user made. It is generated by the page view script (<a href=\\\"https://github.com/coveo/coveo.analytics.js\\\">https://github.com/coveo/coveo.analytics.js</a>)</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.context\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the context to use for the request.</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.count\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the number of suggestions that the Coveo Machine Learning service should return.\\nDefault value is <code>5</code>.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.enableWordCompletion\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to attempt to complete the last word of the current &quot;q&quot; parameter and boost the ranking score of the resulting expression so that it is returned as the first query suggestion.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.isGuestUser\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the current user is anonymous. This can be specified when configuring the SearchEndpoint.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.locale\",\"notSupportedIn\":\"\",\"comment\":\"<p>The locale of the current user. Will typically match the &quot;language&quot; parameter that is used to perform standard queries.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.pipeline\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the pipeline to use for the request.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.q\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the query / word for which to get completion.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.referrer\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the third level of origin of the request, typically the URL of the page that linked to the search interface from which the request originates (e.g., in JavaScript, this would correspond to the <code>document.referrer</code> value).</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.searchHub\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the search hub for which to get suggestions.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.tab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the second level of origin of the request, typically the identifier of the selected tab from which the request originates.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.timezone\",\"notSupportedIn\":\"\",\"comment\":\"<p>The tz database identifier of the time zone to use to correctly interpret dates in the query expression and result items.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestRequest.visitorId\",\"notSupportedIn\":\"\",\"comment\":\"<p>A GUID representing the current user, who can be authenticated or anonymous. This GUID is normally generated by the usage analytics service and stored in a non-expiring browser cookie.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestResponse\",\"notSupportedIn\":\"\",\"comment\":\"<p>The IQuerySuggestResponse interface describes a response from the Coveo Machine Learning service query\\nsuggestions.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestResponse.completions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains an array of completions.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestSelection\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes the object that all <code>querySuggestGetFocus</code> and <code>querySuggestSelection</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySuggestSelection.suggestion\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query suggestion that had focus or was selected.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuerySummaryCancelLastActionArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Argument sent to all handlers bound on QuerySummaryEvents.cancelLastAction</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuickviewLoadedEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IQuickviewLoadedEventArgs</code> interface describes the object that all\\n<code>quickviewLoaded</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQuickviewLoadedEventArgs.duration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The amount of time it took to download the content to display in the quickview modal window (in milliseconds).</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRangeValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes a single range value in a group by request or facet request.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRangeValue.end\",\"notSupportedIn\":\"\",\"comment\":\"<p>The value to end the range at.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>500</code></li>\\n<li><code>2018-12-31T23:59:59.999Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"RangeType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRangeValue.endInclusive\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to include the <code>end</code> value in the range.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRangeValue.label\",\"notSupportedIn\":\"\",\"comment\":\"<p>The label to associate with the range value.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>0 - 500</code></li>\\n<li><code>In 2018</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRangeValue.start\",\"notSupportedIn\":\"\",\"comment\":\"<p>The value to start the range at.\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<ul>\\n<li><code>0</code></li>\\n<li><code>2018-01-01T00:00:00.000Z</code></li>\\n</ul>\\n</blockquote>\\n\",\"type\":\"RangeType\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRankingExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a ranking expression performed against the index (qre)</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRankingExpression.expression\",\"notSupportedIn\":\"\",\"comment\":\"<p>The expression that was executed in the ranking expression</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRankingExpression.modifier\",\"notSupportedIn\":\"\",\"comment\":\"<p>The relevance modifier that was applied</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRankingFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a ranking function that can be executed against the index.<br/>\\nSee: <a href=\\\"https://docs.coveo.com/en/1448/\\\">Ranking Functions</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRankingFunction.expression\",\"notSupportedIn\":\"\",\"comment\":\"<p>The mathematical expression that calculates the ranking value to add to the result score.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRankingFunction.normalizeWeight\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether to normalize the value using the standard index scale or not. If you don&#39;t want to completely override the index ranking and use the qrf as a boost, you should turn this on.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRatingRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IRatingRequest</code> interface describes a request to rate an item in the index.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRatingRequest.rating\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the rating description.\\nPossible values are <code>Undefined</code> | <code>Lowest</code> | <code>Low</code> | <code>Average</code> | <code>Good</code> | <code>Best</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRatingRequest.uniqueId\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the unique ID of the item to rate.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo\",\"notSupportedIn\":\"\",\"comment\":\"<p>Information about a request</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo.begun\",\"notSupportedIn\":\"\",\"comment\":\"<p>The timestamp at which the request started</p>\\n\",\"type\":\"Date\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo.headers\",\"notSupportedIn\":\"\",\"comment\":\"<p>The headers for the request.</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo.method\",\"notSupportedIn\":\"\",\"comment\":\"<p>The method that was used for this request</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo.queryString\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query string parameters that were used for this request</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo.requestData\",\"notSupportedIn\":\"\",\"comment\":\"<p>The data that was sent for this request</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo.requestDataType\",\"notSupportedIn\":\"\",\"comment\":\"<p>The requestDataType that was used for this request</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IRequestInfo.url\",\"notSupportedIn\":\"\",\"comment\":\"<p>Url that was requested</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResolvingPositionEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IResolvingPositionEventArgs</code> interface describes the object that all\\n<code>onResolvingPosition</code> event handlers receive as an argument.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResolvingPositionEventArgs.providers\",\"notSupportedIn\":\"\",\"comment\":\"<p>The array of providers that can provide a position. The first provider that can resolve the position will be used.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResponse\",\"notSupportedIn\":\"\",\"comment\":\"<p>A generic response</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResponse.data\",\"notSupportedIn\":\"\",\"comment\":\"<p>Data of the response</p>\\n\",\"type\":\"T\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings\",\"notSupportedIn\":\"\",\"comment\":\"<p>The bindings, or environment in which each component inside the ResultList exists.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Triggers state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>The root HTMLElement of the SearchInterface in which the component exists.</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IResultsComponentBindings.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options when creating a SearchEndpoint</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.accessToken\",\"notSupportedIn\":\"\",\"comment\":\"<p>This allows using an OAuth2 or a search token to authenticate against the Search API.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.anonymous\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies that the request (and the Coveo Search API) does not need any kind of authentication.<br/>\\nThis flag is only needed for specific setups when your requests are being blocked by your browser. If your queries are executing correctly, you do not need to bother.<br/>\\nSetting this flag will prevent the withCredentials option to be set on the XMLHttpRequest, allowing performing cross-domain requests on a server that returns * in the Access-Control-Allow-Origin HTTP header.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.password\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the password part of the credentials used to authenticate with the REST API.<br/>\\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.queryStringArguments\",\"notSupportedIn\":\"\",\"comment\":\"<p>Query string arguments to add to every request to the search endpoint.<br/>\\neg : {&#39;foo&#39;:&#39;bar&#39;, &#39;a&#39;:&#39;b&#39;}</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.renewAccessToken\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a function that, when called, will arrange for a new search token to be generated.<br/>\\nIt is expected to return a Promise that should be resolved with the new token once it&#39;s available.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.requestModifier\",\"notSupportedIn\":\"\",\"comment\":\"<p>A function which will allow external code to modify all endpoint call parameters before they are sent by the browser.\\nUsed in very specific scenario where the network infrastructure require special request headers to be added or removed, for example.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.restUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>The uri for the search endpoint. eg: cloudplatform.coveo.com/rest/search</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.searchAlertsUri\",\"notSupportedIn\":\"\",\"comment\":\"<p>The uri for the Coveo search alerts service. If not specified, will automatically resolve using the restUri otherwise</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.username\",\"notSupportedIn\":\"\",\"comment\":\"<p>This is the username part of the credentials used to authenticate with the Search API using Basic Authentication.<br/>\\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEndpointOptions.xmlHttpRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The XmlHttpRequest implementation to use instead of the native one.\\nIf not specified, the native one is used.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describes a Coveo Cloud usage analytics <em>search</em> event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.actionCause\",\"notSupportedIn\":\"\",\"comment\":\"<p>A unique name describing the action that triggered the event.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#name\\\"><code>name</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>pagerNext</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.actionType\",\"notSupportedIn\":\"\",\"comment\":\"<p>A name describing the category of actions to which the action that triggered the event belongs.\\nSee the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html#type\\\"><code>type</code></a> property of the <a href=\\\"https://coveo.github.io/search-ui/interfaces/ianalyticsactioncause.html\\\"><code>IAnalyticsActionCause</code></a> interface.</p>\\n<p><strong>Example:</strong> <code>getMoreResults</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.advancedQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>The original advanced query expression (i.e., <code>aq</code>) sent for the related query.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.anonymous\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event should be logged anonymously to the Coveo Cloud usage analytics service.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.anonymous\\\"><code>anonymous</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.contextual\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the related query was contextual.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.customData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Additional metadata to send along with the event.\\n<strong>Note:</strong> This field may include custom user context information (see <a href=\\\"https://docs.coveo.com/en/399/\\\">Sending Custom Context Information</a>).</p>\\n<p><strong>Example:</strong> <code>{ &quot;currentResultsPerPage&quot;: 25, &quot;userRole&quot;: &quot;developer&quot; }</code></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.device\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the device or browser that triggered the event.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Chrome</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.didYouMean\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the <em>did you mean</em> feature was enabled for the related query.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\\n<p><strong>Example:</strong> <code>@source==&quot;Product Documentation&quot;</code></p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.facetState\",\"notSupportedIn\":\"\",\"comment\":\"<p>A representation of the state of each dynamic facet in the search interface when the action that triggered the event was executed.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.language\",\"notSupportedIn\":\"\",\"comment\":\"<p>The language of the search interface from which the event originates.\\nMust be a valid <a href=\\\"https://en.wikipedia.org/wiki/ISO_639-1\\\">ISO-639-1 code</a>.</p>\\n<p><strong>Note:</strong> By default, the framework sets this field according to the currently loaded culture file (see <a href=\\\"https://docs.coveo.com/en/421/\\\">Changing the Language of Your Search Interface</a>).</p>\\n<p><strong>Example:</strong> <code>en</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.mobile\",\"notSupportedIn\":\"\",\"comment\":\"<p>Whether the event originates from a mobile device.\\n<strong>Note:</strong> The framework normally sets this field by parsing the current <code>navigator.userAgent</code> value.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.numberOfResults\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of query result items returned by the related query.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.originContext\",\"notSupportedIn\":\"\",\"comment\":\"<p>The broad application context from which the event originates.\\n<strong>Note:</strong> By default, the framework sets this field to <code>Search</code>. However, you can use the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#setorigincontext\\\"><code>setOriginContext</code></a> method of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component to modify the default value.</p>\\n<p><strong>Example:</strong> <code>Search</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.originLevel1\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the search interface from which the event originates.\\n<strong>Note:</strong> This field is normally set through the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.searchhub\\\"><code>searchHub</code></a> option of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearch</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.originLevel2\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the tab from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the identifier of the currently selected <a href=\\\"https://coveo.github.io/search-ui/components/tab.html\\\"><code>Tab</code></a> in the search interface.</p>\\n<p><strong>Example:</strong> <code>All</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.originLevel3\",\"notSupportedIn\":\"\",\"comment\":\"<p>The address of the webpage that linked to the search interface from which the event originates.\\n<strong>Note:</strong> The framework normally sets this field to the current <code>document.referrer</code> value.</p>\\n<p><strong>Example:</strong> <code>http://example.com/</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.pageNumber\",\"notSupportedIn\":\"\",\"comment\":\"<p>The 0-based page of results requested for the related query.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.queryPipeline\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the query pipeline to which the related query was routed.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipeline</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.queryText\",\"notSupportedIn\":\"\",\"comment\":\"<p>The original basic query expression (i.e., <code>q</code>) sent for the related query.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\\n<p><strong>Example:</strong> <code>coveo machine learning</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.responseTime\",\"notSupportedIn\":\"\",\"comment\":\"<p>The time it took to get a response from the Search API for the query related to the event (in milliseconds).\\n<strong>Note:</strong> The framework normally sets this field to <code>0</code>, except for search events in which case it sets the field by retrieving the information from the related Search API query response.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.resultsPerPage\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of results per page requested for the related query.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related query.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.searchQueryUid\",\"notSupportedIn\":\"\",\"comment\":\"<p>The unique identifier of the related query.\\n<strong>Note:</strong> The framework normally sets this field by retrieving the information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>74682726-0e20-46eb-85ac-f37259346f57</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.splitTestRunName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the A/B test that applied to the related query.\\n<strong>Note:</strong> This field may be set through the <code>splitTestRunName</code> option of the <code>Analytics</code> component. However, if the option is left any, the framework attempts to set this field by retrieving information from the related Search API query response.</p>\\n<p><strong>Example:</strong> <code>Test new ART model</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.splitTestRunVersion\",\"notSupportedIn\":\"\",\"comment\":\"<p>The version of the A/B test that applied to the related query (i.e., version A or version B).\\n<strong>Note:</strong> This field may be set through the <code>splitTestRunVersion</code> option of the <code>Analytics</code> component. However, if the option is left any and the related Search API query response indicates that an A/B test was applied, the framework sets this field to the name of the query pipeline to which the query was routed.</p>\\n<p><strong>Example:</strong> <code>PartnerPortalSearchPipelineWithART</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.userAgent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The software acting on behalf of the end-user whose action triggered the event.\\n<strong>Note:</strong> By default, the framework sets this field to the current <code>navigator.userAgent</code> value.</p>\\n<p><strong>Example:</strong> <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.userDisplayName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The display name of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.userdisplayname\\\"><code>userDisplayName</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <code>Alice Smith</code></p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.userGroups\",\"notSupportedIn\":\"\",\"comment\":\"<p>The groups the end-user whose action triggered the event belongs to.\\n<strong>Note:</strong> This field is normally left any, and the Coveo Cloud usage analytics service attempts to extract the information from the search token when actually recording the event.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISearchEvent.username\",\"notSupportedIn\":\"\",\"comment\":\"<p>The identifier of the end-user whose action triggered the event.\\n<strong>Note:</strong> This field is normally set to the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html#options.user\\\"><code>user</code></a> option value of the <a href=\\\"https://coveo.github.io/search-ui/components/analytics.html\\\"><code>Analytics</code></a> component. However, when actually recording the event, the Coveo Cloud usage analytics service may override this value with information extracted from the search token.</p>\\n<p><strong>Example:</strong> <a href=\\\"mailto:`asmith@example.com\\\">`asmith@example.com</a>`</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISizeOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>Available options for the size templateHelpers.\\nExample:</p>\\n<div class=\\\"CoveoFieldValue\\\" data-helper=\\\"helperName\\\" data-helper-options-optionName=\\\"option-value\\\"></div>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISizeOptions.base\",\"notSupportedIn\":\"\",\"comment\":\"<p>The base into which to format the value.\\nFormula: value <em> 10^(3 </em> base)</p>\\n<p><strong>Examples:</strong></p>\\n<blockquote>\\n<p><strong>Base 0:</strong></p>\\n<p>1 =&gt; 1B</p>\\n<p>1000 =&gt; 1KB</p>\\n</blockquote>\\n<blockquote>\\n<p><strong>Base 1:</strong></p>\\n<p>1 =&gt; 1KB</p>\\n<p>1000 =&gt; 1MB</p>\\n</blockquote>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISizeOptions.precision\",\"notSupportedIn\":\"\",\"comment\":\"<p>The precision to use to format the size (i.e., the number of digits to display after the decimal)\\n<strong>Examples:</strong></p>\\n<blockquote>\\n<p><strong>Precision 0:</strong></p>\\n<p>1.0 =&gt; 1</p>\\n<p>1.85 =&gt; 1</p>\\n</blockquote>\\n<blockquote>\\n<p><strong>Precision 1:</strong></p>\\n<p>1.0 =&gt; 1.0</p>\\n<p>1.85 =&gt; 1.8</p>\\n</blockquote>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IStreamHighlightOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options when highlighting a stream.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IStreamHighlightOptions.cssClass\",\"notSupportedIn\":\"\",\"comment\":\"<p>The css class that the highlight will generate.\\nDefaults to <code>coveo-highlight</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IStreamHighlightOptions.regexFlags\",\"notSupportedIn\":\"\",\"comment\":\"<p>The regex flags that should be applied to generate the highlighting.\\nDefaults to <code>gi</code>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IStringMap\",\"notSupportedIn\":\"\",\"comment\":\"<p>A JSON which contains type T.\\neg :</p>\\n<pre><code>IS<span class=\\\"hljs-function\\\"><span class=\\\"hljs-title\\\">tringMap</span>&lt;<span class=\\\"hljs-keyword\\\">boolean</span>&gt; -&gt;</span> {<span class=\\\"hljs-string\\\">'foo'</span> : <span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-string\\\">'bar'</span> : <span class=\\\"hljs-literal\\\">false</span>};\\nIS<span class=\\\"hljs-function\\\"><span class=\\\"hljs-title\\\">tringMap</span>&lt;number&gt; -&gt;</span> {<span class=\\\"hljs-string\\\">'foo'</span> : <span class=\\\"hljs-number\\\">1</span> , <span class=\\\"hljs-string\\\">'bar'</span> : <span class=\\\"hljs-number\\\">123</span>}\\n</code></pre>\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscription\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a subscription to the Coveo Search alerts service</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscription.frequency\",\"notSupportedIn\":\"\",\"comment\":\"<p>Frequency of the alerts</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscription.id\",\"notSupportedIn\":\"\",\"comment\":\"<p>The id of the subscription</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscription.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name that should be used by the API to identify this subscription</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscription.type\",\"notSupportedIn\":\"\",\"comment\":\"<p>Type of subscription.<br/>\\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscription.typeConfig\",\"notSupportedIn\":\"\",\"comment\":\"<p>Config of the subscription</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscription.user\",\"notSupportedIn\":\"\",\"comment\":\"<p>The user associated with the subscription</p>\\n\",\"type\":\"ISubscriptionUser\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionItemRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ISubscriptionItemRequest</code> interface describes a subscription to a single item (a result).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionItemRequest.id\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the unique ID of the item to subscribe to.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionItemRequest.modifiedDateField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Indicates which field contains the modification date of the item to subscribe to.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionItemRequest.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the title of the item to subscribe to.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionItemRequest.watchedFields\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains a list of fields to monitor for the item to subscribe to.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionQueryRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a subscription to a single query</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionQueryRequest.modifiedDateField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Which field on the result set represent the modification date for which you wish to receive alerts</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionQueryRequest.query\",\"notSupportedIn\":\"\",\"comment\":\"<p>Query to subscribe to</p>\\n\",\"type\":\"IQuery\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a request to subscribe to the Coveo Search alerts service</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionRequest.frequency\",\"notSupportedIn\":\"\",\"comment\":\"<p>Frequency of the alerts</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionRequest.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name that should be used by the API to identify this subscription</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionRequest.type\",\"notSupportedIn\":\"\",\"comment\":\"<p>Type of subscription.<br/>\\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionRequest.typeConfig\",\"notSupportedIn\":\"\",\"comment\":\"<p>Config of the subscription</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionUser\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a user associated with a subscription to the Coveo Search alerts service</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionUser.email\",\"notSupportedIn\":\"\",\"comment\":\"<p>The email of the user</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISubscriptionUser.manageToken\",\"notSupportedIn\":\"\",\"comment\":\"<p>The token used to manage the alerts via email.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISuccessResponse\",\"notSupportedIn\":\"\",\"comment\":\"<p>A generic success response</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISuccessResponse.data\",\"notSupportedIn\":\"\",\"comment\":\"<p>Data of the response</p>\\n\",\"type\":\"T\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ISuccessResponse.duration\",\"notSupportedIn\":\"\",\"comment\":\"<p>The time that the successfull response took to complete</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITaggingRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>ITaggingRequest</code> interface describes a tag request on an item.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITaggingRequest.doAdd\",\"notSupportedIn\":\"\",\"comment\":\"<p>Indicates whether to add the tag value, or to remove the tag value.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITaggingRequest.fieldName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the field name to tag.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITaggingRequest.fieldValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the value to tag.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITaggingRequest.uniqueId\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the unique ID of the item to tag.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITemplateHelperFunction\",\"notSupportedIn\":\"\",\"comment\":\"<p>A function that describe a templates.\\nIt can take any number of arguments, but needs to return a simple string.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITimeSpanUtilsOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options to use when calculating a timespan</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITimeSpanUtilsOptions.isMilliseconds\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify if the given timespan is in seconds or milliseconds</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITopQueries\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe a request to get top queries</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITopQueries.pageSize\",\"notSupportedIn\":\"\",\"comment\":\"<p>Determine how many suggestions to receive</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITopQueries.queryText\",\"notSupportedIn\":\"\",\"comment\":\"<p>The query text for which to receive suggestions</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITrigger\",\"notSupportedIn\":\"\",\"comment\":\"<p>A trigger is an action that the interface will perform (show a message, execute a function, redirect users) depending on the query that was performed.<br/>\\nA trigger that can be configured in the Coveo Query Pipeline.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITriggerExecute\",\"notSupportedIn\":\"\",\"comment\":\"<p>Execute a javascript function present in the page.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITriggerNotify\",\"notSupportedIn\":\"\",\"comment\":\"<p>Notify (show a message) to a user</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITriggerQuery\",\"notSupportedIn\":\"\",\"comment\":\"<p>Perform a new query with a different query expression</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ITriggerRedirect\",\"notSupportedIn\":\"\",\"comment\":\"<p>Redirect the user to another url</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IUpdateResultPreviewsManagerOptionsEventArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Executed when a Suggestion is focused before PopulateSearchResultPreviews is called to fetch more options.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IUpdateResultPreviewsManagerOptionsEventArgs.displayAfterDuration\",\"notSupportedIn\":\"\",\"comment\":\"<p>How many milliseconds should a Suggestion be focused for before PopulateSearchResultPreviews is called.\\nIf this is not defined, it will default to 200ms.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IUserActionsRequest\",\"notSupportedIn\":\"\",\"comment\":\"<p>The information about the user we&#39;d like to check and its actions.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IUserActionsRequest.tagViewsOfUser\",\"notSupportedIn\":\"\",\"comment\":\"<p>The id of the user for which we should check the document views.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IUserIdentity\",\"notSupportedIn\":\"\",\"comment\":\"<p>Describe the identity of a user on the Coveo platform</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IUserIdentity.name\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the identity</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IUserIdentity.provider\",\"notSupportedIn\":\"\",\"comment\":\"<p>The provider of the identity in the Coveo platform</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IViewAsHtmlOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IViewAsHtmlOptions</code> interface describes the available options when calling against a\\n<code>SearchEndpoint</code> to view an item as an HTMLElement (think: quickview).</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.BaseFormTypes\",\"notSupportedIn\":\"\",\"comment\":\"<p>The basic types of form available to build an advanced search section.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.Context\",\"notSupportedIn\":\"\",\"comment\":\"<p>A context, as returned by SearchInterface.getQueryContext or PipelineContext.getContext</p>\\n\",\"type\":\"IStringMap\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.IQueryExpression\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <code>IQueryExpression</code> type is a string type dedicated to query expressions.\\nThis type is used to build a specific option for query expressions.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResponseFormat\",\"notSupportedIn\":\"\",\"comment\":\"<p>The format of a successful response.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ValidLayout\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible valid and supported layouts.\\nSee the <a href=\\\"https://docs.coveo.com/en/360/\\\">Result Layouts</a> documentation.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ValidTooltipPlacement\",\"notSupportedIn\":\"\",\"comment\":\"<p>The allowed <code>Quickview</code> <code>tooltipPlacement</code> option values. The <code>-start</code> and <code>-end</code> variations indicate relative alignement. Horizontally (<code>top</code>, <code>bottom</code>), <code>-start</code> means <em>left</em> and <code>-end</code> means <em>right</em>. Vertically (<code>left</code>, <code>right</code>), <code>-start</code> means <em>top</em> and <code>-end</code> means <em>bottom</em>. No variation means <em>center</em>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Coveo.ResponsiveFacetOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>ResponsiveFacets options</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.TemplateSettings\",\"notSupportedIn\":\"\",\"comment\":\"<p>underscore.js template settings, set templateSettings or pass as an argument\\nto &#39;template()&#39; to override defaults.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.TemplateSettings.escape\",\"notSupportedIn\":\"\",\"comment\":\"<p>Default value is &#39;/&lt;%-([\\\\s\\\\S]+?)%&gt;/g&#39;.</p>\\n\",\"type\":\"RegExp\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.TemplateSettings.evaluate\",\"notSupportedIn\":\"\",\"comment\":\"<p>Default value is &#39;/&lt;%([\\\\s\\\\S]+?)%&gt;/g&#39;.</p>\\n\",\"type\":\"RegExp\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.TemplateSettings.interpolate\",\"notSupportedIn\":\"\",\"comment\":\"<p>Default value is &#39;/&lt;%=([\\\\s\\\\S]+?)%&gt;/g&#39;.</p>\\n\",\"type\":\"RegExp\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.TemplateSettings.variable\",\"notSupportedIn\":\"\",\"comment\":\"<p>By default, &#39;template()&#39; places the values from your data in the local scope via the &#39;with&#39; statement.\\nHowever, you can specify a single variable name with this setting.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.ThrottleSettings\",\"notSupportedIn\":\"\",\"comment\":\"<p>underscore.js _.throttle options.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.ThrottleSettings.leading\",\"notSupportedIn\":\"\",\"comment\":\"<p>If you&#39;d like to disable the leading-edge call, pass this as false.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"_.ThrottleSettings.trailing\",\"notSupportedIn\":\"\",\"comment\":\"<p>If you&#39;d like to disable the execution on the trailing-edge, pass false.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.selection.Group\",\"notSupportedIn\":\"\",\"comment\":\"<p>Selections are grouped into arrays of nodes, with the parent tracked in the &#39;parentNode&#39; property.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.DragEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Define a D3-specific DragEvent per <a href=\\\"https://github.com/mbostock/d3/wiki/Drag-Behavior#on\\\">https://github.com/mbostock/d3/wiki/Drag-Behavior#on</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.Map\",\"notSupportedIn\":\"\",\"comment\":\"<p>A shim for ES6 maps. The implementation uses a JavaScript object internally, and thus keys are limited to strings.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.Numeric\",\"notSupportedIn\":\"\",\"comment\":\"<p>Administrivia: anything with a valueOf(): number method is comparable, so we allow it in numeric operations</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.Selection\",\"notSupportedIn\":\"\",\"comment\":\"<p>A grouped array of nodes.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.Selection.length\",\"notSupportedIn\":\"\",\"comment\":\"<p>The number of groups in this selection.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.Set\",\"notSupportedIn\":\"\",\"comment\":\"<p>A shim for ES6 sets. Is only able to store strings.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.ZoomEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Define a D3-specific ZoomEvent per <a href=\\\"https://github.com/mbostock/d3/wiki/Zoom-Behavior#event\\\">https://github.com/mbostock/d3/wiki/Zoom-Behavior#event</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.Primitive\",\"notSupportedIn\":\"\",\"comment\":\"<p>Administrivia: JavaScript primitive types, or &quot;things that toString() predictably&quot;.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.event\",\"notSupportedIn\":\"\",\"comment\":\"<p>The current event&#39;s value. Use this variable in a handler registered with <code>selection.on</code>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"d3.version\",\"notSupportedIn\":\"\",\"comment\":\"<p>The current version of D3.js.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceComponent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Defines the Coveo for Salesforce component which is hosting the search interface.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceEnvironment\",\"notSupportedIn\":\"\",\"comment\":\"<p>Defines the Salesforce environment in which the search interface is currently running.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxAttachToCase</em> component allows you to attach a result to the current Salesforce object. This component normally renders itself inside the BoxResultAction Component.\\n<strong>Note:</strong></p>\\n<blockquote>\\n<p>Your Salesforce users must have <code>Attached Result</code> object permissions to be able to use this component (see <a href=\\\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=159\\\">Granting Access to Attach to Case Users</a>).</p>\\n</blockquote>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for AttachToCase</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.options.displayText\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should include the Attach/Detach text.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-display-text</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxAttachToCase.options.displayTooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should include the Attach/Detach tooltip.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-display-tooltip</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxAttachToCase.options.readonly\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should be in read only mode. When in read only mode, you cannot Attach or Detach results.\\nThe default value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-readonly</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxAttachToCase.options.recordType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specified the current record type.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Case\"}},{\"name\":\"BoxAttachToCase.options.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for AttachToCase</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxAttachToCase.options.options.displayText\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should include the Attach/Detach text.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-display-text</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxAttachToCase.options.options.displayTooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should include the Attach/Detach tooltip.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-display-tooltip</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxAttachToCase.options.options.readonly\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should be in read only mode. When in read only mode, you cannot Attach or Detach results.\\nThe default value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-readonly</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxAttachToCase.options.options.recordType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specified the current record type.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Case\"}},{\"name\":\"BoxAttachToCase.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxFieldTable</em> component is meant to be included inside a <a href=\\\"https://coveo.github.io/search-ui/components/resultlist.html\\\">ResultList Component</a>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxFieldTable'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the component</p>\\n\",\"type\":\"IFieldTableOptions\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxFieldTable.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new FieldTable.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxPipelineContext.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>BoxQuickview</em> component inherits from the Quickview component, and thus provides all the same options(see <a href=\\\"https://coveo.github.io/search-ui/components/quickview.html\\\">Coveo Component Quickview</a>).</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoBoxQuickView'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuickview.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Quickview</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>CaseDeflection</em> component is used to allow administrators to increase case deflection by recommending items to your users as they enter a case.\\nTo learn how to implement it, see <a href=\\\"https://developers.coveo.com/x/tABqAg\\\">CaseDeflection Lightning Component</a></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CaseDeflection.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ConfigurationTelemetry\",\"notSupportedIn\":\"\",\"comment\":\"<p>Extension of the Telemetry class containing configuration data for the Configuration page&#39;s tracked elements.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"CssCoordinates\",\"notSupportedIn\":\"\",\"comment\":\"<p>Class representing CSS cartesian coordinates using <code>top</code> and <code>left</code> style attributes.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FacetObserver\",\"notSupportedIn\":\"\",\"comment\":\"<p>Observe a facet and fire events on an element when the former disappear or move.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FacetObserver.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new instance of FacetObserver.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>Field</em> component adds a text input to a case creation form, where a user can enter text.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoField\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for fields</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.options.caseField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the field used to save the input value when the user submits the form.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-case-field</span>=<span class=\\\"hljs-string\\\">'Subject'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.options.enableAnalytic\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to enable analytics on the component.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-analytic</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Field.options.enableSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to include the entered keywords in the search for related cases.\\nThe default value is <code>true</code>.</p>\\n<p><strong>Note:`</strong></p>\\n<blockquote>\\n<p>If <code>addQre</code>, <code>addSome</code>, and <code>addCorrelateUsingIdf</code> are all set to <code>false</code>, <code>useSomeOnAllKeywords</code> on the CaseCreation component needs to be enabled for this option to be useful.</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-search</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Field.options.isRequired\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether the input has to be filled before the form can be submitted.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-is-required</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Field.options.numberOfLines\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the input height in number of lines.\\nDefault value is <code>1</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-number-of-lines</span>=<span class=\\\"hljs-string\\\">'1'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"1\"}},{\"name\":\"Field.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the title to display above the input.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">'Your Title'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.options.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies a short hint displayed inside the input before the user enters a value.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-placeholder</span>=<span class=\\\"hljs-string\\\">'Enter a subject...'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Field.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchNode\",\"notSupportedIn\":\"\",\"comment\":\"<p> Interface Editor for FullSearchNode</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"FullSearchNode.hiddenOptionKeys\",\"notSupportedIn\":\"\",\"comment\":\"<p>Returns an array of the options which will not be in the interfaceEditor</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"MetadataStore\",\"notSupportedIn\":\"\",\"comment\":\"<p>Metadata store use to store and analyze search interfaces.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"MetadataStore.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Attach a event listener that add telemetry metadata to the first interfaceLoad event or the first input change event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist\",\"notSupportedIn\":\"\",\"comment\":\"<p>This component adds a drop down list to a case creation form.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoPicklist\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for picklist</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.options.addQre\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to add a QRE in the query using the <code>searchField</code> and the selected option as expression.\\nDefault value is <code>true</code>.</p>\\n<p>This option is useful only when <code>enableSearch</code> is set to <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-add-Qre</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n<p>The generated expression looks like this, where:</p>\\n<ul>\\n<li><code>searchField</code> is the <code>searchField</code> option.</li>\\n<li><code>selectedOption</code> is the option the user selected.</li>\\n<li><code>queryModifier</code> is the <code>queryModifier</code> option.</li>\\n</ul>\\n<pre><code><span class=\\\"hljs-constructor\\\">$qre(<span class=\\\"hljs-params\\\">expression</span>: <span class=\\\"hljs-params\\\">searchField</span>=<span class=\\\"hljs-params\\\">selectedOption</span>, <span class=\\\"hljs-params\\\">modifier</span>: <span class=\\\"hljs-params\\\">queryModifier</span>)</span>\\n</code></pre><p>For more information on the <code>$qre</code> expression, see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$qre\\\">Standard Query Extensions - $qre</a>.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Picklist.options.caseField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the field used to save the drop down list value when the user submits the form.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-case-field</span>=<span class=\\\"hljs-string\\\">'Priority'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.options.defaultValue\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the default selected value in the drop down list.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-default-value</span>=<span class=\\\"hljs-string\\\">\\\"Low\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.options.enableAnalytic\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to enable analytics on the component.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-analytic</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"Picklist.options.enableSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether to include the selected option keywords in the search for related cases. The default value is <code>false</code>.\\n<strong>NOTE:</strong></p>\\n<blockquote>\\n<p>If <code>addQre</code>, <code>addSome</code>, and <code>addCorrelateUsingIdf</code> are all set to <code>false</code>, <code>useSomeOnAllKeywords</code> on the CaseCreation component needs to be enabled for this option to be useful.</p>\\n</blockquote>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-enable-search</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"Picklist.options.isRequired\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether an option has to be selected before the form can be submitted.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-is-required</span>=<span class=\\\"hljs-string\\\">'false'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"Picklist.options.queryModifier\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies how to affect the ranking score for items where the <code>searchField</code> is equal to the selected option (see <a href=\\\"https://developers.coveo.com/display/SearchREST/Standard+Query+Extensions#StandardQueryExtensions-$qre\\\">Standard Query Extensions - $qre</a>).\\nDefault value is <code>50</code>.</p>\\n<p>This option is used with <code>searchField</code> to boost item by adding a query ranking expression (QRE)  where the <code>searchField</code> is equal to the selected option.</p>\\n<p>This option is useful only when the <code>addQre</code> option is enabled.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-query-modifier</span>=<span class=\\\"hljs-string\\\">'50'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"50\"}},{\"name\":\"Picklist.options.searchField\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the field to use in the QRE added to the search query.\\nThis option is useful only when the <code>addQre</code> option is enabled.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-search-field</span>=<span class=\\\"hljs-string\\\">\\\"@sfcasepriority\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"IFieldOption\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.options.title\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the title to display above the drop down list.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-title</span>=<span class=\\\"hljs-string\\\">'Your Title'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.options.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies what to display when the user&#39;s mouse is over the <code>title</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-tooltip</span>=<span class=\\\"hljs-string\\\">'The priority'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.options.values\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the values to display in the drop down list.\\nIf this option is left empty, the values are automatically obtained using the <code>caseField</code> option.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-values</span>=<span class=\\\"hljs-string\\\">\\\"Low, Medium, High\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"Object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"Picklist.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Create a new Component. Resolve all IComponentBindings if not provided.<br/>\\nCreate a new Logger for this component.\\nAttach the component to the SearchInterface.<br/></p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMediaNode\",\"notSupportedIn\":\"\",\"comment\":\"<p>Interface Editor node for the ProductMedia component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMediaNode.priority\",\"notSupportedIn\":\"\",\"comment\":\"<p>The priority of the match.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMediaNode.hiddenOptionKeys\",\"notSupportedIn\":\"\",\"comment\":\"<p>Get the properties that we don&#39;t want to front in the interface editor.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ProductMediaNode.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Build a ProductMediaNode instance after a node have been matched.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResponsiveCreateArticle\",\"notSupportedIn\":\"\",\"comment\":\"<p>ResponsiveCreateArticle is responsible to display a responsive button\\nfor the CreateArticle.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResponsiveFullSearch\",\"notSupportedIn\":\"\",\"comment\":\"<p>ResponsiveFullSearch is responsible to display a responsive button\\nfor the FullSearch.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResponsiveFullSearch.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Constructor for ResponsiveFullSearch</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>ResultActionsPostToFeed</em> component is a Result Template component designed to work\\nwith the <em>ResultActionsMenu</em> Result Template component.\\nIts main purpose is to insert the current result in a Salesforce Chatter &quot;Post&quot;.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoResultActionsMenu\\\"</span>&gt;</span>\\n <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoResultActionsPostToFeed\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>ResultActionsPostToFeed</em></p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.options.autoSubmit\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should submit the post right away.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-auto-submit</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsPostToFeed.options.body\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the template that will be inserted in the &quot;body&quot; of the post.\\nDefault value is <code>&lt;b&gt;${title}&lt;/b&gt; (${ClickUri})&lt;br /&gt;&lt;p&gt;&lt;i&gt;&quot;${Excerpt}&quot;&lt;/i&gt;&lt;/p&gt;</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-body</span>=<span class=\\\"hljs-string\\\">'&lt;b&gt;${title}&lt;/b&gt; (${ClickUri})&lt;br /&gt;&lt;p&gt;&lt;i&gt;\\\"${Excerpt}\\\"&lt;/i&gt;&lt;/p&gt;'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"ResultActionsPostToFeed.options.insertType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies how the component should insert the text in the post.\\nPossible values are <code>begin</code>, <code>end</code>, <code>cursor</code> and <code>replace</code>.\\nDefault value is <code>replace</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-insert-type</span>=<span class=\\\"hljs-string\\\">'cursor'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"replace\"}},{\"name\":\"ResultActionsPostToFeed.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Construct a ResultQuickAction component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>ResultActionsSendEmail</em> component is a Result Template component designed to work\\nwith the <em>ResultActionsMenu</em> Result Template component.\\nIts main purpose is to insert the current result in a Salesforce &quot;Email&quot;.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoResultActionsMenu\\\"</span>&gt;</span>\\n <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"ResultActionsSendEmail\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>ResultActionsSendEmail</em></p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendEmail.options.htmlBody\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the template that will be inserted in the &quot;htmlBody&quot; of the Email.\\nDefault value is <code>&lt;a href=&quot;${ClickUri}&quot;&gt;${title}&lt;/a&gt;.</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-html-body</span>=<span class=\\\"hljs-string\\\">'&lt;a href=\\\"${ClickUri}\\\"&gt;${title}&lt;/a&gt;.'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"ResultActionsSendEmail.options.insertType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies how the component should insert the text in the email.\\nPossible values are <code>begin</code>, <code>end</code>, <code>cursor</code> and <code>replace</code>.\\nDefault value is <code>replace</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-insert-type</span>=<span class=\\\"hljs-string\\\">'cursor'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"replace\"}},{\"name\":\"ResultActionsSendEmail.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Construct a ResultQuickAction component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>ResultActionsSendLiveAgent</em> component is a Result Template component designed to work\\nwith the <em>ResultActionsMenu</em> Result Template component.\\nIts main purpose is to insert the current result in a Salesforce Live Agent chat window.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoResultActionsMenu\\\"</span>&gt;</span>\\n <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoResultActionsSendLiveAgent\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>ResultActionsSendLiveAgent</em></p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultActionsSendLiveAgent.options.text\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the template that will be inserted in the &quot;text&quot; of the message.\\nDefault value is <code>${title} ${ClickUri}</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-text</span>=<span class=\\\"hljs-string\\\">'${title} ${ClickUri}'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}},{\"name\":\"ResultActionsSendLiveAgent.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Construct a ResultAction component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>ResultQuickAction</em> component is a Result Template component designed to work\\nwith the <em>ResultActionsMenu</em> Result Template component.\\nIt can be customized to perform any Salesforce Quick Action.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoResultActionsMenu\\\"</span>&gt;</span>\\n <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"CoveoResultQuickAction\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>ResultQuickAction</em>.</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.options.actionName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of the Quick Action bound to this result action.\\nThis field is required.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-action-name</span>=<span class=\\\"hljs-string\\\">'FeedItem.TextPost'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"required\":\"true\"}},{\"name\":\"ResultQuickAction.options.autoSubmit\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies if the component should perform the action right away.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-auto-submit</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"ResultQuickAction.options.icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>The icon that will be displayed on the button.\\nIf text is provided, the button will contain that text.\\nIf the HTML of an image is provided, that image will be displayed in the button.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.options.onSendActionEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specify the name of the event that will be fired to allow modification\\nof the arguments before sending the action.\\nThis field is optional. If left empty, no event will be fired.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-on-send-action-event</span>=<span class=\\\"hljs-string\\\">'ResultActionsEvents.onPostToFeed'</span> /&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.options.targetFields\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the fields that will be sent in the arguments of the quick action.\\nThis argument must be provided as a JSON object. Fields from the query result\\ncan be inserted by placing ${FieldName} in a string value.\\nThis field is required.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-target-fields</span>=<span class=\\\"hljs-string\\\">'{\\\"Body\\\":{\\\"value\\\":\\\"&lt;b&gt;${title}&lt;/b&gt;(${ClickUri})&lt;br/&gt;&lt;p&gt;&lt;i&gt;\\\\\\\"${Excerpt}\\\\\\\"&lt;/i&gt;&lt;/p&gt;\\\"}}'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.options.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>The tooltip that displays on hovering the component.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-tooltip</span>=<span class=\\\"hljs-string\\\">'Post to Feed'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickAction.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Construct a ResultQuickAction component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickActionNode\",\"notSupportedIn\":\"\",\"comment\":\"<p>Interface editor node for the ResultQuickAction.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickActionNode.priority\",\"notSupportedIn\":\"\",\"comment\":\"<p>The priority of the match.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickActionNode.hiddenOptionKeys\",\"notSupportedIn\":\"\",\"comment\":\"<p>Get the properties that we don&#39;t want to front in the interface editor.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ResultQuickActionNode.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Build a ResultQuickActionNode instance after a node has been matched.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview\",\"notSupportedIn\":\"\",\"comment\":\"<p>A Locker-friendly Quickview.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceAdvancedQuickview.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>Quickview</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickviewDocument\",\"notSupportedIn\":\"\",\"comment\":\"<p>Boilerplate for the customizable quickview.\\nUse the given @member queryString and  @member documentID to initialize the state\\nbefore opening an actual QuickviewDocument</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickviewQueryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Small override of the QueryController.\\nOverride @method getLastQuery to return a minimalist IQuery using the @member queryString.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickviewQueryController.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickviewQueryController.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceQuickviewQueryController.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>SalesforceResultLink</em> component is used to open result links as Salesforce tabs.\\nIt inherits from the <a href=\\\"https://coveo.github.io/search-ui/components/resultlink.html\\\">ResultLink Component</a>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoSalesforceResultLink'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for SalesforceResultLink</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"SalesforceResultLink.options.openInPrimaryTab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies that the result link should try to open as a primary console tab. If it fails, it instead opens in a new browser tab.\\nDefault is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoSalesforceResultLink'</span> <span class=\\\"hljs-attr\\\">data-open-in-primary-tab</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"SalesforceResultLink.options.openInSubTab\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies that the result link should try to open as a secondary console tab. If it fails, it instead opens in a new browser tab.\\nDefault is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">'CoveoSalesforceResultLink'</span> <span class=\\\"hljs-attr\\\">data-open-in-sub-tab</span>=<span class=\\\"hljs-string\\\">'true'</span>/&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"SalesforceResultLink.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new <code>ResultLink</code> component.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox\",\"notSupportedIn\":\"\",\"comment\":\"<p>The <em>StandaloneSearchbox</em> component is used to replace the default community searchbox.\\nIts options are fronted in the Community Builder (see <a href=\\\"https://developers.coveo.com/x/lRwvAg#IncludingtheStandaloneSearchboxinYourCommunity-customize-ssb\\\">Customizing the Standalone Searchbox</a>).</p>\\n<p>To learn how to implement this component in your community, see <a href=\\\"https://developers.coveo.com/x/lRwvAg\\\">Including the Standalone Searchbox in Your Community</a>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.bind\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows the component to bind events and execute them only when it is enabled.</p>\\n\",\"type\":\"ComponentEvents\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.componentOptionsModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of options for different components. Mainly used by ResultLink.</p>\\n\",\"type\":\"ComponentOptionsModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.componentStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"ComponentStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.disabled\",\"notSupportedIn\":\"\",\"comment\":\"<p>A disabled component will not participate in the query, or listen to ComponentEvents.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.logger\",\"notSupportedIn\":\"\",\"comment\":\"<p>Allows component to log in the dev console.</p>\\n\",\"type\":\"Logger\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.queryController\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the singleton that allows to trigger queries.</p>\\n\",\"type\":\"QueryController\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.queryStateModel\",\"notSupportedIn\":\"\",\"comment\":\"<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\\n\",\"type\":\"QueryStateModel\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.root\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root HTMLElement (the SearchInterface).</p>\\n\",\"type\":\"HTMLElement\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.searchInterface\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the root of every component, the SearchInterface.</p>\\n\",\"type\":\"SearchInterface\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.usageAnalytics\",\"notSupportedIn\":\"\",\"comment\":\"<p>A reference to the Analytics.client.</p>\\n\",\"type\":\"IAnalyticsClient\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.ID\",\"notSupportedIn\":\"\",\"comment\":\"<p>The static ID that each component needs in order to be identified.<br/>\\nFor example, SearchButton -&gt; static ID: SearchButton -&gt; className: CoveoSearchButton</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.options\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for StandaloneSearchbox</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.options.enableFieldAddon\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether or not field names should be suggested (see <a href=\\\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablefieldaddon\\\">Omnibox - enableFieldAddon</a>).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.options.enableQueryExtensionAddon\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether or not to complete query extensions (see <a href=\\\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequeryextensionaddon\\\">Omnibox - enableQueryExtensionAddon</a>).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.options.enableQuerySuggestAddon\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether or not to enable Coveo Machine Learning (see <a href=\\\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablequerysuggestaddon\\\">Omnibox - enableRevealQuerySuggestAddon</a>).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.options.placeholder\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the placeholder text to put in the searchbox when no query is typed.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.options.searchPageName\",\"notSupportedIn\":\"\",\"comment\":\"<p>The name of the search page where the searchbox should redirect.\\nDefault value may change depending on your Coveo for Salesforce version. For more information, see <a href=\\\"https://developers.coveo.com/x/lRwvAg\\\">Including the Standalone Searchbox in Your Community</a>.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"StandaloneSearchbox\"}},{\"name\":\"StandaloneSearchbox.options.triggerQueryOnClear\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies whether or not to trigger a query when the search box is cleared (see <a href=\\\"https://coveo.github.io/search-ui/components/querybox.html#options.triggerqueryonclear\\\">Querybox - triggerQueryOnClear</a>).</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StandaloneSearchbox.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Creates a new Omnibox component. Also enables necessary addons and binds events on various query events.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StaticResourceCache\",\"notSupportedIn\":\"\",\"comment\":\"<p>The StaticResourceCache object is a singleton instance for batching calls to resolve paths to Static Resources.\\nThe results are kept in memory to speed up subsequent requests.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"StaticResourceCache.Resolver\",\"notSupportedIn\":\"\",\"comment\":\"<p>Sets the RemoteAction caller function to be used.\\nReturns the set resolver function.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomerNode\",\"notSupportedIn\":\"\",\"comment\":\"<p>Interface Editor node for the Viewed by Customer.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomerNode.priority\",\"notSupportedIn\":\"\",\"comment\":\"<p>The priority of the match.</p>\\n\",\"type\":\"number\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"ViewedByCustomerNode.constructor\",\"notSupportedIn\":\"\",\"comment\":\"<p>Build a ViewedByCustomerNode instance after a node have been matched.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IAugmentData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Interface for the data returned from external fetch action.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IAugmentData.commonData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Data to add to every result with matching object id.</p>\\n\",\"type\":\"__type\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IAugmentData.resultData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Data specific to a result with matching object id.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IPromiseReturnArgs\",\"notSupportedIn\":\"\",\"comment\":\"<p>Generic interface for the response returned by the external fetch action.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IQuickviewGetDocumentData\",\"notSupportedIn\":\"\",\"comment\":\"<p>Small extension of the IGetDocumentOptions interface to allow the use of requestData in it.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultActionOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>ResultAction</em>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultActionOptions.icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>The icon that the ResultAction will display.\\nIf text is provided, the button will contain that text.\\nIf the HTML of an SVG image is provided, that image will be displayed in the button.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultActionOptions.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>The tooltip that displays on hovering the ResultAction.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The possible options for <em>ResultQuickAction</em>.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.actionName\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the name of the Quick Action bound to this result action.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.autoSubmit\",\"notSupportedIn\":\"\",\"comment\":\"<p>Optional. Set to true if you want to save and submit the quick action after setting the field values.\\nDefault is false</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.icon\",\"notSupportedIn\":\"\",\"comment\":\"<p>The icon that the ResultAction will display.\\nIf text is provided, the button will contain that text.\\nIf the HTML of an SVG image is provided, that image will be displayed in the button.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.onSendActionEvent\",\"notSupportedIn\":\"\",\"comment\":\"<p>Optional. Specify the name of the event that clients will be able to hook to and\\nmodify the arguments before sending the action to Salesforce.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.recordType\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the current record type.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.targetFields\",\"notSupportedIn\":\"\",\"comment\":\"<p>Specifies the fields that will be sent in the arguments of the quick action.\\nThis argument must be provided as a JSON object. Fields from the query result\\ncan be inserted by placing ${FieldName} in a string value.</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.tooltip\",\"notSupportedIn\":\"\",\"comment\":\"<p>The tooltip that displays on hovering the ResultAction.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.IResultQuickActionsEventOnSendAction\",\"notSupportedIn\":\"\",\"comment\":\"<p>The arguments provided to the onSendAction event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.IResultQuickActionsEventOnSendAction.args\",\"notSupportedIn\":\"\",\"comment\":\"<p>The arguments that will be proivided to the quick action API.</p>\\n\",\"type\":\"IQuickActionAPISetActionFieldValuesArg\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionOptions.IResultQuickActionsEventOnSendAction.result\",\"notSupportedIn\":\"\",\"comment\":\"<p>The result that this quickAction is associated with.</p>\\n\",\"type\":\"IQueryResult\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionsEventOnSendAction\",\"notSupportedIn\":\"\",\"comment\":\"<p>The arguments provided to the onSendAction event.</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionsEventOnSendAction.args\",\"notSupportedIn\":\"\",\"comment\":\"<p>The arguments that will be proivided to the quick action API.</p>\\n\",\"type\":\"IQuickActionAPISetActionFieldValuesArg\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IResultQuickActionsEventOnSendAction.result\",\"notSupportedIn\":\"\",\"comment\":\"<p>The result that this quickAction is associated with.</p>\\n\",\"type\":\"IQueryResult\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IViewedByCustomerOptions\",\"notSupportedIn\":\"\",\"comment\":\"<p>The options for the ViewedByCustomerComponent</p>\\n\",\"type\":\"\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IViewedByCustomerOptions.label\",\"notSupportedIn\":\"\",\"comment\":\"<p>The label that should be displayed when the component is displayed.</p>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"IViewedByCustomerOptions.showIcon\",\"notSupportedIn\":\"\",\"comment\":\"<p>If true, will display an icon when the component is displayed itself.</p>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.options\",\"comment\":\"<p>The possible options for BoxQuerySome</p>\\n\",\"type\":\"object\",\"constrainedValues\":[],\"miscAttributes\":{}},{\"name\":\"BoxQuerySome.options.include\",\"comment\":\"<p>A comma separated list of fields to automatically add to the query.\\nDefault value is <code>Subject</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-include</span>=<span class=\\\"hljs-string\\\">'Subject'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"Subject\"}},{\"name\":\"BoxQuerySome.options.includeCurrentRecord\",\"comment\":\"<p>Specifies whether to include the currently viewed case in the search results.\\nDefault value is <code>false</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-include-in-current-record</span>=<span class=\\\"hljs-string\\\">'false'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"BoxQuerySome.options.disableOnNonContextualSearch\",\"comment\":\"<p>Specifies whether to disable the added query from the `include` option when a user decides to perform a non-contextual search.\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-disable-on-non-contextual-search</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxQuerySome.options.useSomeQRE\",\"comment\":\"<p>Specifies whether to generate the query using the `$some` query extension (see [Standard Query Extensions - $some](https://developers.coveo.com/x/ZQMv#StandardQueryExtensions-$some)).\\nSetting this option to `false` changes the query from an `aq` to a long query (see [Long Expression](https://developers.coveo.com/x/P4CpAQ#ProfilingaQuery-LongExpression)), enabling Coveo Machine Learning Intelligent Term Detection (ITD).\\nDefault value is <code>true</code>.</p>\\n<pre><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">data-use-some-q-r-e</span>=<span class=\\\"hljs-string\\\">'true'</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></pre>\\n\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"true\"}},{\"name\":\"BoxQuerySome.options.removeStopWords\",\"comment\":\"<p>Specifies if stop words should be removed from the keywords. Stop words are common words that the index can filter out when ranking the documents (e.g.: the, is, at, on...</p>\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"SalesforceQuickview.options.useAdvancedQuickview\",\"comment\":\"<p>Enable the Advanced Quickview if you want to use more advanced features of the Quickview, like the highlighting or if you have a custom Quickview.</p>\",\"type\":\"boolean\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"false\"}},{\"name\":\"SalesforceQuickview.options.quickviewUrl\",\"comment\":\"<p>Fill this field with the URL of your custom Quickview page if you have one.</p>\",\"type\":\"string\",\"constrainedValues\":[],\"miscAttributes\":{\"defaultValue\":\"\"}}]");

/***/ }),
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesforceThumbnailNode; });
/* harmony import */ var _components_search_ui_Thumbnail_SalesforceThumbnail__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37);
/* harmony import */ var coveo_interface_editor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var coveo_interface_editor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(coveo_interface_editor__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_2__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var SalesforceThumbnailNode = /** @class */ (function (_super) {
    __extends(SalesforceThumbnailNode, _super);
    function SalesforceThumbnailNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    SalesforceThumbnailNode.match = function (node) {
        if (node && node.classList && node.classList.contains) {
            return node.classList.contains(coveo_search_ui__WEBPACK_IMPORTED_MODULE_2__["Component"].computeCssClassNameForType(_components_search_ui_Thumbnail_SalesforceThumbnail__WEBPACK_IMPORTED_MODULE_0__[/* SalesforceThumbnail */ "a"].ID));
        }
        return false;
    };
    SalesforceThumbnailNode.priority = coveo_interface_editor__WEBPACK_IMPORTED_MODULE_1__["InterfaceEditor"].ComponentNode.priority + 1;
    return SalesforceThumbnailNode;
}(coveo_interface_editor__WEBPACK_IMPORTED_MODULE_1__["InterfaceEditor"].ComponentNode));

coveo_interface_editor__WEBPACK_IMPORTED_MODULE_1__["InterfaceEditor"].ResultComponentNode.resultComponents.Advanced.push(_components_search_ui_Thumbnail_SalesforceThumbnail__WEBPACK_IMPORTED_MODULE_0__[/* SalesforceThumbnail */ "a"].ID);
coveo_interface_editor__WEBPACK_IMPORTED_MODULE_1__["InterfaceEditor"].Parser.addNodeMatcher(SalesforceThumbnailNode, _components_search_ui_Thumbnail_SalesforceThumbnail__WEBPACK_IMPORTED_MODULE_0__[/* SalesforceThumbnail */ "a"].ID);


/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AttachToCaseNode; });
/* harmony import */ var coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var coveo_search_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _AttachToCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var AttachToCaseNode = /** @class */ (function (_super) {
    __extends(AttachToCaseNode, _super);
    function AttachToCaseNode(node, parser) {
        var _this = _super.call(this, node, parser) || this;
        _this.node = node;
        _this.isDeletable = true;
        return _this;
    }
    AttachToCaseNode.match = function (node) {
        return $(node).hasClass(coveo_search_ui__WEBPACK_IMPORTED_MODULE_1__["Component"].computeCssClassNameForType(_AttachToCase__WEBPACK_IMPORTED_MODULE_2__[/* AttachToCase */ "a"].ID));
    };
    Object.defineProperty(AttachToCaseNode.prototype, "hiddenOptionKeys", {
        get: function () {
            return ['attachToCaseEndpoint', 'recordType'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttachToCaseNode.prototype, "displayedOptionKeys", {
        /**
         * Get the properties to display in the interface editor.
         */
        get: function () {
            var _this = this;
            return Object.keys(_AttachToCase__WEBPACK_IMPORTED_MODULE_2__[/* AttachToCase */ "a"].options).filter(function (option) { return !_this.hiddenOptionKeys.includes(option); });
        },
        enumerable: true,
        configurable: true
    });
    AttachToCaseNode.priority = coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].ResultComponentNode.priority + 1;
    return AttachToCaseNode;
}(coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].ResultComponentNode));

coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].ResultComponentNode.resultComponents.Basic.push(_AttachToCase__WEBPACK_IMPORTED_MODULE_2__[/* AttachToCase */ "a"].ID);
coveo_interface_editor__WEBPACK_IMPORTED_MODULE_0__["InterfaceEditor"].Parser.addNodeMatcher(AttachToCaseNode);


/***/ })
/******/ ]);(function(e, a) { for(var i in a) e[i] = a[i]; }(window.Coveo, c4sf))